
CppTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053f8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08005580  08005580  00015580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800564c  0800564c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800564c  0800564c  0001564c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005654  08005654  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005654  08005654  00015654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005658  08005658  00015658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800565c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a4  20000070  080056cc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000814  080056cc  00020814  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000196d6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003050  00000000  00000000  00039776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001630  00000000  00000000  0003c7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f8  00000000  00000000  0003ddf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b4b6  00000000  00000000  0003f2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ff9  00000000  00000000  0006a7a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f704d  00000000  00000000  0008379f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017a7ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000657c  00000000  00000000  0017a83c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005568 	.word	0x08005568

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08005568 	.word	0x08005568

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <_ZN7TestCPPC1Eh>:
using namespace std;

struct TestCPP
{
    TestCPP() : Counter(0) {}
    TestCPP(uint8_t Value) :
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	460b      	mov	r3, r1
 80004d6:	70fb      	strb	r3, [r7, #3]
	Counter(Value){}
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	78fa      	ldrb	r2, [r7, #3]
 80004dc:	701a      	strb	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4618      	mov	r0, r3
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <_ZN7TestCPP9IncrementEv>:

    void Increment(void)
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
    {
        Counter++;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	3301      	adds	r3, #1
 80004fa:	b2da      	uxtb	r2, r3
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	701a      	strb	r2, [r3, #0]
    }
 8000500:	bf00      	nop
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <_ZN7TestCPP3GetEv>:

    uint8_t Get(void)
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
    {
        return Counter;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	781b      	ldrb	r3, [r3, #0]
    }
 8000518:	4618      	mov	r0, r3
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052a:	f000 ffc8 	bl	80014be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052e:	f000 f82b 	bl	8000588 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000532:	f000 fa2d 	bl	8000990 <_ZL12MX_GPIO_Initv>
  MX_DFSDM1_Init();
 8000536:	f000 f899 	bl	800066c <_ZL14MX_DFSDM1_Initv>
  MX_I2C2_Init();
 800053a:	f000 f8d5 	bl	80006e8 <_ZL12MX_I2C2_Initv>
  MX_QUADSPI_Init();
 800053e:	f000 f921 	bl	8000784 <_ZL15MX_QUADSPI_Initv>
  MX_SPI3_Init();
 8000542:	f000 f949 	bl	80007d8 <_ZL12MX_SPI3_Initv>
  MX_USART1_UART_Init();
 8000546:	f000 f989 	bl	800085c <_ZL19MX_USART1_UART_Initv>
  MX_USART3_UART_Init();
 800054a:	f000 f9bb 	bl	80008c4 <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 800054e:	f000 f9ed 	bl	800092c <_ZL22MX_USB_OTG_FS_PCD_Initv>
  /* USER CODE BEGIN 2 */
  TestCPP TestObj(3);
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	2103      	movs	r1, #3
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff ffb8 	bl	80004cc <_ZN7TestCPPC1Eh>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  TestObj.Increment();
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	4618      	mov	r0, r3
 8000560:	f7ff ffc4 	bl	80004ec <_ZN7TestCPP9IncrementEv>

	     if(TestObj.Get() > 100)
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	4618      	mov	r0, r3
 8000568:	f7ff ffd0 	bl	800050c <_ZN7TestCPP3GetEv>
 800056c:	4603      	mov	r3, r0
 800056e:	2b64      	cmp	r3, #100	; 0x64
 8000570:	bf8c      	ite	hi
 8000572:	2301      	movhi	r3, #1
 8000574:	2300      	movls	r3, #0
 8000576:	b2db      	uxtb	r3, r3
 8000578:	2b00      	cmp	r3, #0
 800057a:	d0ef      	beq.n	800055c <main+0x38>
	     {
	         printf("The value is greater than 100!\r\n");
 800057c:	4801      	ldr	r0, [pc, #4]	; (8000584 <main+0x60>)
 800057e:	f004 fb63 	bl	8004c48 <puts>

	         while(true);
 8000582:	e7fe      	b.n	8000582 <main+0x5e>
 8000584:	08005580 	.word	0x08005580

08000588 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b096      	sub	sp, #88	; 0x58
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	2244      	movs	r2, #68	; 0x44
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f004 fae0 	bl	8004b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	463b      	mov	r3, r7
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005ae:	f001 feaf 	bl	8002310 <HAL_PWREx_ControlVoltageScaling>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	bf14      	ite	ne
 80005b8:	2301      	movne	r3, #1
 80005ba:	2300      	moveq	r3, #0
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 80005c2:	f000 fb97 	bl	8000cf4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005c6:	f001 fe85 	bl	80022d4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005ca:	4b27      	ldr	r3, [pc, #156]	; (8000668 <_Z18SystemClock_Configv+0xe0>)
 80005cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005d0:	4a25      	ldr	r2, [pc, #148]	; (8000668 <_Z18SystemClock_Configv+0xe0>)
 80005d2:	f023 0318 	bic.w	r3, r3, #24
 80005d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005da:	2314      	movs	r3, #20
 80005dc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005de:	2301      	movs	r3, #1
 80005e0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005e2:	2301      	movs	r3, #1
 80005e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005ea:	2360      	movs	r3, #96	; 0x60
 80005ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ee:	2302      	movs	r3, #2
 80005f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005f2:	2301      	movs	r3, #1
 80005f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005f6:	2301      	movs	r3, #1
 80005f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005fa:	2328      	movs	r3, #40	; 0x28
 80005fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005fe:	2307      	movs	r3, #7
 8000600:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000602:	2302      	movs	r3, #2
 8000604:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000606:	2302      	movs	r3, #2
 8000608:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4618      	mov	r0, r3
 8000610:	f001 ffa0 	bl	8002554 <HAL_RCC_OscConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	bf14      	ite	ne
 800061a:	2301      	movne	r3, #1
 800061c:	2300      	moveq	r3, #0
 800061e:	b2db      	uxtb	r3, r3
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 8000624:	f000 fb66 	bl	8000cf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000628:	230f      	movs	r3, #15
 800062a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062c:	2303      	movs	r3, #3
 800062e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800063c:	463b      	mov	r3, r7
 800063e:	2104      	movs	r1, #4
 8000640:	4618      	mov	r0, r3
 8000642:	f002 fb63 	bl	8002d0c <HAL_RCC_ClockConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	bf14      	ite	ne
 800064c:	2301      	movne	r3, #1
 800064e:	2300      	moveq	r3, #0
 8000650:	b2db      	uxtb	r3, r3
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 8000656:	f000 fb4d 	bl	8000cf4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800065a:	f003 f865 	bl	8003728 <HAL_RCCEx_EnableMSIPLLMode>
}
 800065e:	bf00      	nop
 8000660:	3758      	adds	r7, #88	; 0x58
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40021000 	.word	0x40021000

0800066c <_ZL14MX_DFSDM1_Initv>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <_ZL14MX_DFSDM1_Initv+0x74>)
 8000672:	4a1c      	ldr	r2, [pc, #112]	; (80006e4 <_ZL14MX_DFSDM1_Initv+0x78>)
 8000674:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <_ZL14MX_DFSDM1_Initv+0x74>)
 8000678:	2201      	movs	r2, #1
 800067a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <_ZL14MX_DFSDM1_Initv+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <_ZL14MX_DFSDM1_Initv+0x74>)
 8000684:	2202      	movs	r2, #2
 8000686:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <_ZL14MX_DFSDM1_Initv+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <_ZL14MX_DFSDM1_Initv+0x74>)
 8000690:	2200      	movs	r2, #0
 8000692:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <_ZL14MX_DFSDM1_Initv+0x74>)
 8000696:	f44f 7280 	mov.w	r2, #256	; 0x100
 800069a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800069c:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <_ZL14MX_DFSDM1_Initv+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80006a2:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <_ZL14MX_DFSDM1_Initv+0x74>)
 80006a4:	2204      	movs	r2, #4
 80006a6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80006a8:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <_ZL14MX_DFSDM1_Initv+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <_ZL14MX_DFSDM1_Initv+0x74>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80006b4:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <_ZL14MX_DFSDM1_Initv+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <_ZL14MX_DFSDM1_Initv+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80006c0:	4807      	ldr	r0, [pc, #28]	; (80006e0 <_ZL14MX_DFSDM1_Initv+0x74>)
 80006c2:	f001 f8a7 	bl	8001814 <HAL_DFSDM_ChannelInit>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	bf14      	ite	ne
 80006cc:	2301      	movne	r3, #1
 80006ce:	2300      	moveq	r3, #0
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <_ZL14MX_DFSDM1_Initv+0x6e>
  {
    Error_Handler();
 80006d6:	f000 fb0d 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	2000008c 	.word	0x2000008c
 80006e4:	40016020 	.word	0x40016020

080006e8 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006ec:	4b23      	ldr	r3, [pc, #140]	; (800077c <_ZL12MX_I2C2_Initv+0x94>)
 80006ee:	4a24      	ldr	r2, [pc, #144]	; (8000780 <_ZL12MX_I2C2_Initv+0x98>)
 80006f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80006f2:	4b22      	ldr	r3, [pc, #136]	; (800077c <_ZL12MX_I2C2_Initv+0x94>)
 80006f4:	f640 6214 	movw	r2, #3604	; 0xe14
 80006f8:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006fa:	4b20      	ldr	r3, [pc, #128]	; (800077c <_ZL12MX_I2C2_Initv+0x94>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000700:	4b1e      	ldr	r3, [pc, #120]	; (800077c <_ZL12MX_I2C2_Initv+0x94>)
 8000702:	2201      	movs	r2, #1
 8000704:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000706:	4b1d      	ldr	r3, [pc, #116]	; (800077c <_ZL12MX_I2C2_Initv+0x94>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800070c:	4b1b      	ldr	r3, [pc, #108]	; (800077c <_ZL12MX_I2C2_Initv+0x94>)
 800070e:	2200      	movs	r2, #0
 8000710:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000712:	4b1a      	ldr	r3, [pc, #104]	; (800077c <_ZL12MX_I2C2_Initv+0x94>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000718:	4b18      	ldr	r3, [pc, #96]	; (800077c <_ZL12MX_I2C2_Initv+0x94>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <_ZL12MX_I2C2_Initv+0x94>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000724:	4815      	ldr	r0, [pc, #84]	; (800077c <_ZL12MX_I2C2_Initv+0x94>)
 8000726:	f001 fb66 	bl	8001df6 <HAL_I2C_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	bf14      	ite	ne
 8000730:	2301      	movne	r3, #1
 8000732:	2300      	moveq	r3, #0
 8000734:	b2db      	uxtb	r3, r3
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 800073a:	f000 fadb 	bl	8000cf4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800073e:	2100      	movs	r1, #0
 8000740:	480e      	ldr	r0, [pc, #56]	; (800077c <_ZL12MX_I2C2_Initv+0x94>)
 8000742:	f001 fbe7 	bl	8001f14 <HAL_I2CEx_ConfigAnalogFilter>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	bf14      	ite	ne
 800074c:	2301      	movne	r3, #1
 800074e:	2300      	moveq	r3, #0
 8000750:	b2db      	uxtb	r3, r3
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <_ZL12MX_I2C2_Initv+0x72>
  {
    Error_Handler();
 8000756:	f000 facd 	bl	8000cf4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800075a:	2100      	movs	r1, #0
 800075c:	4807      	ldr	r0, [pc, #28]	; (800077c <_ZL12MX_I2C2_Initv+0x94>)
 800075e:	f001 fc24 	bl	8001faa <HAL_I2CEx_ConfigDigitalFilter>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	bf14      	ite	ne
 8000768:	2301      	movne	r3, #1
 800076a:	2300      	moveq	r3, #0
 800076c:	b2db      	uxtb	r3, r3
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <_ZL12MX_I2C2_Initv+0x8e>
  {
    Error_Handler();
 8000772:	f000 fabf 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200000c4 	.word	0x200000c4
 8000780:	40005800 	.word	0x40005800

08000784 <_ZL15MX_QUADSPI_Initv>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <_ZL15MX_QUADSPI_Initv+0x4c>)
 800078a:	4a12      	ldr	r2, [pc, #72]	; (80007d4 <_ZL15MX_QUADSPI_Initv+0x50>)
 800078c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800078e:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <_ZL15MX_QUADSPI_Initv+0x4c>)
 8000790:	2202      	movs	r2, #2
 8000792:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000794:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <_ZL15MX_QUADSPI_Initv+0x4c>)
 8000796:	2204      	movs	r2, #4
 8000798:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800079a:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <_ZL15MX_QUADSPI_Initv+0x4c>)
 800079c:	2210      	movs	r2, #16
 800079e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80007a0:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <_ZL15MX_QUADSPI_Initv+0x4c>)
 80007a2:	2217      	movs	r2, #23
 80007a4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <_ZL15MX_QUADSPI_Initv+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80007ac:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <_ZL15MX_QUADSPI_Initv+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80007b2:	4807      	ldr	r0, [pc, #28]	; (80007d0 <_ZL15MX_QUADSPI_Initv+0x4c>)
 80007b4:	f001 fe12 	bl	80023dc <HAL_QSPI_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	bf14      	ite	ne
 80007be:	2301      	movne	r3, #1
 80007c0:	2300      	moveq	r3, #0
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <_ZL15MX_QUADSPI_Initv+0x48>
  {
    Error_Handler();
 80007c8:	f000 fa94 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000118 	.word	0x20000118
 80007d4:	a0001000 	.word	0xa0001000

080007d8 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007dc:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <_ZL12MX_SPI3_Initv+0x7c>)
 80007de:	4a1e      	ldr	r2, [pc, #120]	; (8000858 <_ZL12MX_SPI3_Initv+0x80>)
 80007e0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007e2:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <_ZL12MX_SPI3_Initv+0x7c>)
 80007e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007e8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007ea:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <_ZL12MX_SPI3_Initv+0x7c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <_ZL12MX_SPI3_Initv+0x7c>)
 80007f2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80007f6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007f8:	4b16      	ldr	r3, [pc, #88]	; (8000854 <_ZL12MX_SPI3_Initv+0x7c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <_ZL12MX_SPI3_Initv+0x7c>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000804:	4b13      	ldr	r3, [pc, #76]	; (8000854 <_ZL12MX_SPI3_Initv+0x7c>)
 8000806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800080a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <_ZL12MX_SPI3_Initv+0x7c>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <_ZL12MX_SPI3_Initv+0x7c>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000818:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <_ZL12MX_SPI3_Initv+0x7c>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800081e:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <_ZL12MX_SPI3_Initv+0x7c>)
 8000820:	2200      	movs	r2, #0
 8000822:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000824:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <_ZL12MX_SPI3_Initv+0x7c>)
 8000826:	2207      	movs	r2, #7
 8000828:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <_ZL12MX_SPI3_Initv+0x7c>)
 800082c:	2200      	movs	r2, #0
 800082e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000830:	4b08      	ldr	r3, [pc, #32]	; (8000854 <_ZL12MX_SPI3_Initv+0x7c>)
 8000832:	2208      	movs	r2, #8
 8000834:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000836:	4807      	ldr	r0, [pc, #28]	; (8000854 <_ZL12MX_SPI3_Initv+0x7c>)
 8000838:	f003 f958 	bl	8003aec <HAL_SPI_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	bf14      	ite	ne
 8000842:	2301      	movne	r3, #1
 8000844:	2300      	moveq	r3, #0
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <_ZL12MX_SPI3_Initv+0x78>
  {
    Error_Handler();
 800084c:	f000 fa52 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	2000015c 	.word	0x2000015c
 8000858:	40003c00 	.word	0x40003c00

0800085c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000860:	4b16      	ldr	r3, [pc, #88]	; (80008bc <_ZL19MX_USART1_UART_Initv+0x60>)
 8000862:	4a17      	ldr	r2, [pc, #92]	; (80008c0 <_ZL19MX_USART1_UART_Initv+0x64>)
 8000864:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <_ZL19MX_USART1_UART_Initv+0x60>)
 8000868:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800086c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800086e:	4b13      	ldr	r3, [pc, #76]	; (80008bc <_ZL19MX_USART1_UART_Initv+0x60>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <_ZL19MX_USART1_UART_Initv+0x60>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <_ZL19MX_USART1_UART_Initv+0x60>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000880:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <_ZL19MX_USART1_UART_Initv+0x60>)
 8000882:	220c      	movs	r2, #12
 8000884:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000886:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <_ZL19MX_USART1_UART_Initv+0x60>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800088c:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <_ZL19MX_USART1_UART_Initv+0x60>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000892:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <_ZL19MX_USART1_UART_Initv+0x60>)
 8000894:	2200      	movs	r2, #0
 8000896:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <_ZL19MX_USART1_UART_Initv+0x60>)
 800089a:	2200      	movs	r2, #0
 800089c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800089e:	4807      	ldr	r0, [pc, #28]	; (80008bc <_ZL19MX_USART1_UART_Initv+0x60>)
 80008a0:	f003 f9c7 	bl	8003c32 <HAL_UART_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	bf14      	ite	ne
 80008aa:	2301      	movne	r3, #1
 80008ac:	2300      	moveq	r3, #0
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 80008b4:	f000 fa1e 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	200001c0 	.word	0x200001c0
 80008c0:	40013800 	.word	0x40013800

080008c4 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008c8:	4b16      	ldr	r3, [pc, #88]	; (8000924 <_ZL19MX_USART3_UART_Initv+0x60>)
 80008ca:	4a17      	ldr	r2, [pc, #92]	; (8000928 <_ZL19MX_USART3_UART_Initv+0x64>)
 80008cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <_ZL19MX_USART3_UART_Initv+0x60>)
 80008d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008d6:	4b13      	ldr	r3, [pc, #76]	; (8000924 <_ZL19MX_USART3_UART_Initv+0x60>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <_ZL19MX_USART3_UART_Initv+0x60>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <_ZL19MX_USART3_UART_Initv+0x60>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008e8:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <_ZL19MX_USART3_UART_Initv+0x60>)
 80008ea:	220c      	movs	r2, #12
 80008ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ee:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <_ZL19MX_USART3_UART_Initv+0x60>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f4:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <_ZL19MX_USART3_UART_Initv+0x60>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <_ZL19MX_USART3_UART_Initv+0x60>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000900:	4b08      	ldr	r3, [pc, #32]	; (8000924 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000902:	2200      	movs	r2, #0
 8000904:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000906:	4807      	ldr	r0, [pc, #28]	; (8000924 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000908:	f003 f993 	bl	8003c32 <HAL_UART_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	bf14      	ite	ne
 8000912:	2301      	movne	r3, #1
 8000914:	2300      	moveq	r3, #0
 8000916:	b2db      	uxtb	r3, r3
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <_ZL19MX_USART3_UART_Initv+0x5c>
  {
    Error_Handler();
 800091c:	f000 f9ea 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000244 	.word	0x20000244
 8000928:	40004800 	.word	0x40004800

0800092c <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000930:	4b16      	ldr	r3, [pc, #88]	; (800098c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000932:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000936:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800093a:	2206      	movs	r2, #6
 800093c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800093e:	4b13      	ldr	r3, [pc, #76]	; (800098c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000940:	2202      	movs	r2, #2
 8000942:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000946:	2202      	movs	r2, #2
 8000948:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800094c:	2200      	movs	r2, #0
 800094e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000950:	4b0e      	ldr	r3, [pc, #56]	; (800098c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000952:	2200      	movs	r2, #0
 8000954:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000958:	2200      	movs	r2, #0
 800095a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800095c:	4b0b      	ldr	r3, [pc, #44]	; (800098c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800095e:	2200      	movs	r2, #0
 8000960:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000962:	4b0a      	ldr	r3, [pc, #40]	; (800098c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000964:	2200      	movs	r2, #0
 8000966:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800096a:	2200      	movs	r2, #0
 800096c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800096e:	4807      	ldr	r0, [pc, #28]	; (800098c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8000970:	f001 fb67 	bl	8002042 <HAL_PCD_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	bf14      	ite	ne
 800097a:	2301      	movne	r3, #1
 800097c:	2300      	moveq	r3, #0
 800097e:	b2db      	uxtb	r3, r3
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x5c>
  {
    Error_Handler();
 8000984:	f000 f9b6 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}
 800098c:	200002c8 	.word	0x200002c8

08000990 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009a6:	4bbd      	ldr	r3, [pc, #756]	; (8000c9c <_ZL12MX_GPIO_Initv+0x30c>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	4abc      	ldr	r2, [pc, #752]	; (8000c9c <_ZL12MX_GPIO_Initv+0x30c>)
 80009ac:	f043 0310 	orr.w	r3, r3, #16
 80009b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b2:	4bba      	ldr	r3, [pc, #744]	; (8000c9c <_ZL12MX_GPIO_Initv+0x30c>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	f003 0310 	and.w	r3, r3, #16
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009be:	4bb7      	ldr	r3, [pc, #732]	; (8000c9c <_ZL12MX_GPIO_Initv+0x30c>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	4ab6      	ldr	r2, [pc, #728]	; (8000c9c <_ZL12MX_GPIO_Initv+0x30c>)
 80009c4:	f043 0304 	orr.w	r3, r3, #4
 80009c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ca:	4bb4      	ldr	r3, [pc, #720]	; (8000c9c <_ZL12MX_GPIO_Initv+0x30c>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	f003 0304 	and.w	r3, r3, #4
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4bb1      	ldr	r3, [pc, #708]	; (8000c9c <_ZL12MX_GPIO_Initv+0x30c>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	4ab0      	ldr	r2, [pc, #704]	; (8000c9c <_ZL12MX_GPIO_Initv+0x30c>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e2:	4bae      	ldr	r3, [pc, #696]	; (8000c9c <_ZL12MX_GPIO_Initv+0x30c>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	4bab      	ldr	r3, [pc, #684]	; (8000c9c <_ZL12MX_GPIO_Initv+0x30c>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	4aaa      	ldr	r2, [pc, #680]	; (8000c9c <_ZL12MX_GPIO_Initv+0x30c>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fa:	4ba8      	ldr	r3, [pc, #672]	; (8000c9c <_ZL12MX_GPIO_Initv+0x30c>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a06:	4ba5      	ldr	r3, [pc, #660]	; (8000c9c <_ZL12MX_GPIO_Initv+0x30c>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	4aa4      	ldr	r2, [pc, #656]	; (8000c9c <_ZL12MX_GPIO_Initv+0x30c>)
 8000a0c:	f043 0308 	orr.w	r3, r3, #8
 8000a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a12:	4ba2      	ldr	r3, [pc, #648]	; (8000c9c <_ZL12MX_GPIO_Initv+0x30c>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	f003 0308 	and.w	r3, r3, #8
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000a24:	489e      	ldr	r0, [pc, #632]	; (8000ca0 <_ZL12MX_GPIO_Initv+0x310>)
 8000a26:	f001 f9ab 	bl	8001d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f248 1104 	movw	r1, #33028	; 0x8104
 8000a30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a34:	f001 f9a4 	bl	8001d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000a3e:	4899      	ldr	r0, [pc, #612]	; (8000ca4 <_ZL12MX_GPIO_Initv+0x314>)
 8000a40:	f001 f99e 	bl	8001d80 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	f241 0181 	movw	r1, #4225	; 0x1081
 8000a4a:	4897      	ldr	r0, [pc, #604]	; (8000ca8 <_ZL12MX_GPIO_Initv+0x318>)
 8000a4c:	f001 f998 	bl	8001d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a50:	2201      	movs	r2, #1
 8000a52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a56:	4894      	ldr	r0, [pc, #592]	; (8000ca8 <_ZL12MX_GPIO_Initv+0x318>)
 8000a58:	f001 f992 	bl	8001d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000a62:	4892      	ldr	r0, [pc, #584]	; (8000cac <_ZL12MX_GPIO_Initv+0x31c>)
 8000a64:	f001 f98c 	bl	8001d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	2120      	movs	r1, #32
 8000a6c:	488d      	ldr	r0, [pc, #564]	; (8000ca4 <_ZL12MX_GPIO_Initv+0x314>)
 8000a6e:	f001 f987 	bl	8001d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a72:	2201      	movs	r2, #1
 8000a74:	2101      	movs	r1, #1
 8000a76:	488a      	ldr	r0, [pc, #552]	; (8000ca0 <_ZL12MX_GPIO_Initv+0x310>)
 8000a78:	f001 f982 	bl	8001d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000a7c:	f240 1315 	movw	r3, #277	; 0x115
 8000a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	4882      	ldr	r0, [pc, #520]	; (8000ca0 <_ZL12MX_GPIO_Initv+0x310>)
 8000a96:	f000 ffc9 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000a9a:	236a      	movs	r3, #106	; 0x6a
 8000a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a9e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	487c      	ldr	r0, [pc, #496]	; (8000ca0 <_ZL12MX_GPIO_Initv+0x310>)
 8000ab0:	f000 ffbc 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000ab4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4878      	ldr	r0, [pc, #480]	; (8000cac <_ZL12MX_GPIO_Initv+0x31c>)
 8000acc:	f000 ffae 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000ad0:	233f      	movs	r3, #63	; 0x3f
 8000ad2:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ad4:	230b      	movs	r3, #11
 8000ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4872      	ldr	r0, [pc, #456]	; (8000cac <_ZL12MX_GPIO_Initv+0x31c>)
 8000ae4:	f000 ffa2 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af4:	2303      	movs	r3, #3
 8000af6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000af8:	2308      	movs	r3, #8
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	4619      	mov	r1, r3
 8000b02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b06:	f000 ff91 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000b0a:	f248 1304 	movw	r3, #33028	; 0x8104
 8000b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b26:	f000 ff81 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000b2a:	2308      	movs	r3, #8
 8000b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b48:	f000 ff70 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000b4c:	2310      	movs	r3, #16
 8000b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b50:	230b      	movs	r3, #11
 8000b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b62:	f000 ff63 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000b66:	23e0      	movs	r3, #224	; 0xe0
 8000b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b72:	2303      	movs	r3, #3
 8000b74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b76:	2305      	movs	r3, #5
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b84:	f000 ff52 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b8c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4841      	ldr	r0, [pc, #260]	; (8000ca4 <_ZL12MX_GPIO_Initv+0x314>)
 8000b9e:	f000 ff45 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ba6:	230b      	movs	r3, #11
 8000ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	483b      	ldr	r0, [pc, #236]	; (8000ca4 <_ZL12MX_GPIO_Initv+0x314>)
 8000bb6:	f000 ff39 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000bba:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000bbe:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4834      	ldr	r0, [pc, #208]	; (8000ca4 <_ZL12MX_GPIO_Initv+0x314>)
 8000bd4:	f000 ff2a 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000bd8:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000bdc:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bde:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	482e      	ldr	r0, [pc, #184]	; (8000ca8 <_ZL12MX_GPIO_Initv+0x318>)
 8000bf0:	f000 ff1c 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000bf4:	f243 0381 	movw	r3, #12417	; 0x3081
 8000bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4826      	ldr	r0, [pc, #152]	; (8000ca8 <_ZL12MX_GPIO_Initv+0x318>)
 8000c0e:	f000 ff0d 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000c12:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4820      	ldr	r0, [pc, #128]	; (8000cac <_ZL12MX_GPIO_Initv+0x31c>)
 8000c2c:	f000 fefe 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000c30:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c36:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	4819      	ldr	r0, [pc, #100]	; (8000cac <_ZL12MX_GPIO_Initv+0x31c>)
 8000c48:	f000 fef0 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c5c:	2305      	movs	r3, #5
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	4619      	mov	r1, r3
 8000c66:	4810      	ldr	r0, [pc, #64]	; (8000ca8 <_ZL12MX_GPIO_Initv+0x318>)
 8000c68:	f000 fee0 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000c6c:	2378      	movs	r3, #120	; 0x78
 8000c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c70:	2302      	movs	r3, #2
 8000c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c7c:	2307      	movs	r3, #7
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	4619      	mov	r1, r3
 8000c86:	4808      	ldr	r0, [pc, #32]	; (8000ca8 <_ZL12MX_GPIO_Initv+0x318>)
 8000c88:	f000 fed0 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000c8c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c92:	2312      	movs	r3, #18
 8000c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	e00a      	b.n	8000cb0 <_ZL12MX_GPIO_Initv+0x320>
 8000c9a:	bf00      	nop
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	48001000 	.word	0x48001000
 8000ca4:	48000400 	.word	0x48000400
 8000ca8:	48000c00 	.word	0x48000c00
 8000cac:	48000800 	.word	0x48000800
 8000cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cb6:	2304      	movs	r3, #4
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cba:	f107 0314 	add.w	r3, r7, #20
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	480b      	ldr	r0, [pc, #44]	; (8000cf0 <_ZL12MX_GPIO_Initv+0x360>)
 8000cc2:	f000 feb3 	bl	8001a2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2017      	movs	r0, #23
 8000ccc:	f000 fd6b 	bl	80017a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000cd0:	2017      	movs	r0, #23
 8000cd2:	f000 fd84 	bl	80017de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2100      	movs	r1, #0
 8000cda:	2028      	movs	r0, #40	; 0x28
 8000cdc:	f000 fd63 	bl	80017a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ce0:	2028      	movs	r0, #40	; 0x28
 8000ce2:	f000 fd7c 	bl	80017de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ce6:	bf00      	nop
 8000ce8:	3728      	adds	r7, #40	; 0x28
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	48000400 	.word	0x48000400

08000cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf8:	b672      	cpsid	i
}
 8000cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <Error_Handler+0x8>
	...

08000d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d06:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <HAL_MspInit+0x44>)
 8000d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d0a:	4a0e      	ldr	r2, [pc, #56]	; (8000d44 <HAL_MspInit+0x44>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6613      	str	r3, [r2, #96]	; 0x60
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <HAL_MspInit+0x44>)
 8000d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <HAL_MspInit+0x44>)
 8000d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d22:	4a08      	ldr	r2, [pc, #32]	; (8000d44 <HAL_MspInit+0x44>)
 8000d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d28:	6593      	str	r3, [r2, #88]	; 0x58
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_MspInit+0x44>)
 8000d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	40021000 	.word	0x40021000

08000d48 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b0ac      	sub	sp, #176	; 0xb0
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2288      	movs	r2, #136	; 0x88
 8000d66:	2100      	movs	r1, #0
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f003 fef7 	bl	8004b5c <memset>
  if(DFSDM1_Init == 0)
 8000d6e:	4b25      	ldr	r3, [pc, #148]	; (8000e04 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d142      	bne.n	8000dfc <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000d76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d7a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4618      	mov	r0, r3
 8000d88:	f002 f9e4 	bl	8003154 <HAL_RCCEx_PeriphCLKConfig>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000d92:	f7ff ffaf 	bl	8000cf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000d96:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d9a:	4a1b      	ldr	r2, [pc, #108]	; (8000e08 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000da0:	6613      	str	r3, [r2, #96]	; 0x60
 8000da2:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000da6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dae:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	4a15      	ldr	r2, [pc, #84]	; (8000e08 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000db4:	f043 0310 	orr.w	r3, r3, #16
 8000db8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dba:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbe:	f003 0310 	and.w	r3, r3, #16
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000dc6:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000dca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000de0:	2306      	movs	r3, #6
 8000de2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000de6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dea:	4619      	mov	r1, r3
 8000dec:	4807      	ldr	r0, [pc, #28]	; (8000e0c <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000dee:	f000 fe1d 	bl	8001a2c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000df2:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	3301      	adds	r3, #1
 8000df8:	4a02      	ldr	r2, [pc, #8]	; (8000e04 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000dfa:	6013      	str	r3, [r2, #0]
  }

}
 8000dfc:	bf00      	nop
 8000dfe:	37b0      	adds	r7, #176	; 0xb0
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	200007d4 	.word	0x200007d4
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	48001000 	.word	0x48001000

08000e10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b0ac      	sub	sp, #176	; 0xb0
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2288      	movs	r2, #136	; 0x88
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f003 fe93 	bl	8004b5c <memset>
  if(hi2c->Instance==I2C2)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a21      	ldr	r2, [pc, #132]	; (8000ec0 <HAL_I2C_MspInit+0xb0>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d13b      	bne.n	8000eb8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e40:	2380      	movs	r3, #128	; 0x80
 8000e42:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f002 f981 	bl	8003154 <HAL_RCCEx_PeriphCLKConfig>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e58:	f7ff ff4c 	bl	8000cf4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5c:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <HAL_I2C_MspInit+0xb4>)
 8000e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e60:	4a18      	ldr	r2, [pc, #96]	; (8000ec4 <HAL_I2C_MspInit+0xb4>)
 8000e62:	f043 0302 	orr.w	r3, r3, #2
 8000e66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e68:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <HAL_I2C_MspInit+0xb4>)
 8000e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6c:	f003 0302 	and.w	r3, r3, #2
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000e74:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e7c:	2312      	movs	r3, #18
 8000e7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e82:	2301      	movs	r3, #1
 8000e84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e8e:	2304      	movs	r3, #4
 8000e90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e94:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e98:	4619      	mov	r1, r3
 8000e9a:	480b      	ldr	r0, [pc, #44]	; (8000ec8 <HAL_I2C_MspInit+0xb8>)
 8000e9c:	f000 fdc6 	bl	8001a2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <HAL_I2C_MspInit+0xb4>)
 8000ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea4:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <HAL_I2C_MspInit+0xb4>)
 8000ea6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000eaa:	6593      	str	r3, [r2, #88]	; 0x58
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <HAL_I2C_MspInit+0xb4>)
 8000eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000eb8:	bf00      	nop
 8000eba:	37b0      	adds	r7, #176	; 0xb0
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40005800 	.word	0x40005800
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	48000400 	.word	0x48000400

08000ecc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	; 0x28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a17      	ldr	r2, [pc, #92]	; (8000f48 <HAL_QSPI_MspInit+0x7c>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d128      	bne.n	8000f40 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000eee:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <HAL_QSPI_MspInit+0x80>)
 8000ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ef2:	4a16      	ldr	r2, [pc, #88]	; (8000f4c <HAL_QSPI_MspInit+0x80>)
 8000ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef8:	6513      	str	r3, [r2, #80]	; 0x50
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <HAL_QSPI_MspInit+0x80>)
 8000efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <HAL_QSPI_MspInit+0x80>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0a:	4a10      	ldr	r2, [pc, #64]	; (8000f4c <HAL_QSPI_MspInit+0x80>)
 8000f0c:	f043 0310 	orr.w	r3, r3, #16
 8000f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <HAL_QSPI_MspInit+0x80>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	f003 0310 	and.w	r3, r3, #16
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000f1e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000f22:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f30:	230a      	movs	r3, #10
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4805      	ldr	r0, [pc, #20]	; (8000f50 <HAL_QSPI_MspInit+0x84>)
 8000f3c:	f000 fd76 	bl	8001a2c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000f40:	bf00      	nop
 8000f42:	3728      	adds	r7, #40	; 0x28
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	a0001000 	.word	0xa0001000
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	48001000 	.word	0x48001000

08000f54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08a      	sub	sp, #40	; 0x28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a17      	ldr	r2, [pc, #92]	; (8000fd0 <HAL_SPI_MspInit+0x7c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d128      	bne.n	8000fc8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f76:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <HAL_SPI_MspInit+0x80>)
 8000f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7a:	4a16      	ldr	r2, [pc, #88]	; (8000fd4 <HAL_SPI_MspInit+0x80>)
 8000f7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f80:	6593      	str	r3, [r2, #88]	; 0x58
 8000f82:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <HAL_SPI_MspInit+0x80>)
 8000f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <HAL_SPI_MspInit+0x80>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f92:	4a10      	ldr	r2, [pc, #64]	; (8000fd4 <HAL_SPI_MspInit+0x80>)
 8000f94:	f043 0304 	orr.w	r3, r3, #4
 8000f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <HAL_SPI_MspInit+0x80>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9e:	f003 0304 	and.w	r3, r3, #4
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000fa6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fb8:	2306      	movs	r3, #6
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <HAL_SPI_MspInit+0x84>)
 8000fc4:	f000 fd32 	bl	8001a2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000fc8:	bf00      	nop
 8000fca:	3728      	adds	r7, #40	; 0x28
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40003c00 	.word	0x40003c00
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	48000800 	.word	0x48000800

08000fdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b0ae      	sub	sp, #184	; 0xb8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ff4:	f107 031c 	add.w	r3, r7, #28
 8000ff8:	2288      	movs	r2, #136	; 0x88
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f003 fdad 	bl	8004b5c <memset>
  if(huart->Instance==USART1)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a42      	ldr	r2, [pc, #264]	; (8001110 <HAL_UART_MspInit+0x134>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d13b      	bne.n	8001084 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800100c:	2301      	movs	r3, #1
 800100e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001010:	2300      	movs	r3, #0
 8001012:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001014:	f107 031c 	add.w	r3, r7, #28
 8001018:	4618      	mov	r0, r3
 800101a:	f002 f89b 	bl	8003154 <HAL_RCCEx_PeriphCLKConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001024:	f7ff fe66 	bl	8000cf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001028:	4b3a      	ldr	r3, [pc, #232]	; (8001114 <HAL_UART_MspInit+0x138>)
 800102a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800102c:	4a39      	ldr	r2, [pc, #228]	; (8001114 <HAL_UART_MspInit+0x138>)
 800102e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001032:	6613      	str	r3, [r2, #96]	; 0x60
 8001034:	4b37      	ldr	r3, [pc, #220]	; (8001114 <HAL_UART_MspInit+0x138>)
 8001036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001038:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800103c:	61bb      	str	r3, [r7, #24]
 800103e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001040:	4b34      	ldr	r3, [pc, #208]	; (8001114 <HAL_UART_MspInit+0x138>)
 8001042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001044:	4a33      	ldr	r2, [pc, #204]	; (8001114 <HAL_UART_MspInit+0x138>)
 8001046:	f043 0302 	orr.w	r3, r3, #2
 800104a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104c:	4b31      	ldr	r3, [pc, #196]	; (8001114 <HAL_UART_MspInit+0x138>)
 800104e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001058:	23c0      	movs	r3, #192	; 0xc0
 800105a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106a:	2303      	movs	r3, #3
 800106c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001070:	2307      	movs	r3, #7
 8001072:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001076:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800107a:	4619      	mov	r1, r3
 800107c:	4826      	ldr	r0, [pc, #152]	; (8001118 <HAL_UART_MspInit+0x13c>)
 800107e:	f000 fcd5 	bl	8001a2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001082:	e040      	b.n	8001106 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a24      	ldr	r2, [pc, #144]	; (800111c <HAL_UART_MspInit+0x140>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d13b      	bne.n	8001106 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800108e:	2304      	movs	r3, #4
 8001090:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001092:	2300      	movs	r3, #0
 8001094:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	4618      	mov	r0, r3
 800109c:	f002 f85a 	bl	8003154 <HAL_RCCEx_PeriphCLKConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_UART_MspInit+0xce>
      Error_Handler();
 80010a6:	f7ff fe25 	bl	8000cf4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <HAL_UART_MspInit+0x138>)
 80010ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ae:	4a19      	ldr	r2, [pc, #100]	; (8001114 <HAL_UART_MspInit+0x138>)
 80010b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b4:	6593      	str	r3, [r2, #88]	; 0x58
 80010b6:	4b17      	ldr	r3, [pc, #92]	; (8001114 <HAL_UART_MspInit+0x138>)
 80010b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c2:	4b14      	ldr	r3, [pc, #80]	; (8001114 <HAL_UART_MspInit+0x138>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	4a13      	ldr	r2, [pc, #76]	; (8001114 <HAL_UART_MspInit+0x138>)
 80010c8:	f043 0308 	orr.w	r3, r3, #8
 80010cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <HAL_UART_MspInit+0x138>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	f003 0308 	and.w	r3, r3, #8
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80010da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ee:	2303      	movs	r3, #3
 80010f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010f4:	2307      	movs	r3, #7
 80010f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010fa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010fe:	4619      	mov	r1, r3
 8001100:	4807      	ldr	r0, [pc, #28]	; (8001120 <HAL_UART_MspInit+0x144>)
 8001102:	f000 fc93 	bl	8001a2c <HAL_GPIO_Init>
}
 8001106:	bf00      	nop
 8001108:	37b8      	adds	r7, #184	; 0xb8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40013800 	.word	0x40013800
 8001114:	40021000 	.word	0x40021000
 8001118:	48000400 	.word	0x48000400
 800111c:	40004800 	.word	0x40004800
 8001120:	48000c00 	.word	0x48000c00

08001124 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b0ac      	sub	sp, #176	; 0xb0
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	2288      	movs	r2, #136	; 0x88
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f003 fd09 	bl	8004b5c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001152:	d17c      	bne.n	800124e <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001154:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001158:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800115a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800115e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001162:	2301      	movs	r3, #1
 8001164:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001166:	2301      	movs	r3, #1
 8001168:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800116a:	2318      	movs	r3, #24
 800116c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800116e:	2307      	movs	r3, #7
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001172:	2302      	movs	r3, #2
 8001174:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001176:	2302      	movs	r3, #2
 8001178:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800117a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	4618      	mov	r0, r3
 8001186:	f001 ffe5 	bl	8003154 <HAL_RCCEx_PeriphCLKConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001190:	f7ff fdb0 	bl	8000cf4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001194:	4b30      	ldr	r3, [pc, #192]	; (8001258 <HAL_PCD_MspInit+0x134>)
 8001196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001198:	4a2f      	ldr	r2, [pc, #188]	; (8001258 <HAL_PCD_MspInit+0x134>)
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a0:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <HAL_PCD_MspInit+0x134>)
 80011a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80011ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b4:	2300      	movs	r3, #0
 80011b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80011c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011c4:	4619      	mov	r1, r3
 80011c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ca:	f000 fc2f 	bl	8001a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80011ce:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80011d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d6:	2302      	movs	r3, #2
 80011d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e2:	2303      	movs	r3, #3
 80011e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011e8:	230a      	movs	r3, #10
 80011ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011f2:	4619      	mov	r1, r3
 80011f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f8:	f000 fc18 	bl	8001a2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011fc:	4b16      	ldr	r3, [pc, #88]	; (8001258 <HAL_PCD_MspInit+0x134>)
 80011fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001200:	4a15      	ldr	r2, [pc, #84]	; (8001258 <HAL_PCD_MspInit+0x134>)
 8001202:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001206:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001208:	4b13      	ldr	r3, [pc, #76]	; (8001258 <HAL_PCD_MspInit+0x134>)
 800120a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001214:	4b10      	ldr	r3, [pc, #64]	; (8001258 <HAL_PCD_MspInit+0x134>)
 8001216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d114      	bne.n	800124a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001220:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <HAL_PCD_MspInit+0x134>)
 8001222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001224:	4a0c      	ldr	r2, [pc, #48]	; (8001258 <HAL_PCD_MspInit+0x134>)
 8001226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122a:	6593      	str	r3, [r2, #88]	; 0x58
 800122c:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <HAL_PCD_MspInit+0x134>)
 800122e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001238:	f001 f8c0 	bl	80023bc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_PCD_MspInit+0x134>)
 800123e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001240:	4a05      	ldr	r2, [pc, #20]	; (8001258 <HAL_PCD_MspInit+0x134>)
 8001242:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001246:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001248:	e001      	b.n	800124e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800124a:	f001 f8b7 	bl	80023bc <HAL_PWREx_EnableVddUSB>
}
 800124e:	bf00      	nop
 8001250:	37b0      	adds	r7, #176	; 0xb0
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40021000 	.word	0x40021000

0800125c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <NMI_Handler+0x4>

08001262 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001266:	e7fe      	b.n	8001266 <HardFault_Handler+0x4>

08001268 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800126c:	e7fe      	b.n	800126c <MemManage_Handler+0x4>

0800126e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001272:	e7fe      	b.n	8001272 <BusFault_Handler+0x4>

08001274 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <UsageFault_Handler+0x4>

0800127a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a8:	f000 f95e 	bl	8001568 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80012b4:	2020      	movs	r0, #32
 80012b6:	f000 fd7b 	bl	8001db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80012ba:	2040      	movs	r0, #64	; 0x40
 80012bc:	f000 fd78 	bl	8001db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80012c0:	2080      	movs	r0, #128	; 0x80
 80012c2:	f000 fd75 	bl	8001db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80012c6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80012ca:	f000 fd71 	bl	8001db0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80012d6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80012da:	f000 fd69 	bl	8001db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80012de:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80012e2:	f000 fd65 	bl	8001db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80012e6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012ea:	f000 fd61 	bl	8001db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80012ee:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012f2:	f000 fd5d 	bl	8001db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80012f6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012fa:	f000 fd59 	bl	8001db0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}

08001302 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af00      	add	r7, sp, #0
 8001308:	60f8      	str	r0, [r7, #12]
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	e00a      	b.n	800132a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001314:	f3af 8000 	nop.w
 8001318:	4601      	mov	r1, r0
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	1c5a      	adds	r2, r3, #1
 800131e:	60ba      	str	r2, [r7, #8]
 8001320:	b2ca      	uxtb	r2, r1
 8001322:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	3301      	adds	r3, #1
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	429a      	cmp	r2, r3
 8001330:	dbf0      	blt.n	8001314 <_read+0x12>
  }

  return len;
 8001332:	687b      	ldr	r3, [r7, #4]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	e009      	b.n	8001362 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	1c5a      	adds	r2, r3, #1
 8001352:	60ba      	str	r2, [r7, #8]
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	3301      	adds	r3, #1
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	429a      	cmp	r2, r3
 8001368:	dbf1      	blt.n	800134e <_write+0x12>
  }
  return len;
 800136a:	687b      	ldr	r3, [r7, #4]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <_close>:

int _close(int file)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800137c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001380:	4618      	mov	r0, r3
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800139c:	605a      	str	r2, [r3, #4]
  return 0;
 800139e:	2300      	movs	r3, #0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <_isatty>:

int _isatty(int file)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013b4:	2301      	movs	r3, #1
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b085      	sub	sp, #20
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	60f8      	str	r0, [r7, #12]
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e4:	4a14      	ldr	r2, [pc, #80]	; (8001438 <_sbrk+0x5c>)
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <_sbrk+0x60>)
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f0:	4b13      	ldr	r3, [pc, #76]	; (8001440 <_sbrk+0x64>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d102      	bne.n	80013fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <_sbrk+0x64>)
 80013fa:	4a12      	ldr	r2, [pc, #72]	; (8001444 <_sbrk+0x68>)
 80013fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <_sbrk+0x64>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	429a      	cmp	r2, r3
 800140a:	d207      	bcs.n	800141c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800140c:	f003 fb7c 	bl	8004b08 <__errno>
 8001410:	4603      	mov	r3, r0
 8001412:	220c      	movs	r2, #12
 8001414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001416:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800141a:	e009      	b.n	8001430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <_sbrk+0x64>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001422:	4b07      	ldr	r3, [pc, #28]	; (8001440 <_sbrk+0x64>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	4a05      	ldr	r2, [pc, #20]	; (8001440 <_sbrk+0x64>)
 800142c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800142e:	68fb      	ldr	r3, [r7, #12]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20018000 	.word	0x20018000
 800143c:	00000400 	.word	0x00000400
 8001440:	200007d8 	.word	0x200007d8
 8001444:	20000818 	.word	0x20000818

08001448 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <SystemInit+0x20>)
 800144e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001452:	4a05      	ldr	r2, [pc, #20]	; (8001468 <SystemInit+0x20>)
 8001454:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001458:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800146c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001470:	f7ff ffea 	bl	8001448 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001474:	480c      	ldr	r0, [pc, #48]	; (80014a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001476:	490d      	ldr	r1, [pc, #52]	; (80014ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001478:	4a0d      	ldr	r2, [pc, #52]	; (80014b0 <LoopForever+0xe>)
  movs r3, #0
 800147a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800147c:	e002      	b.n	8001484 <LoopCopyDataInit>

0800147e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001482:	3304      	adds	r3, #4

08001484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001488:	d3f9      	bcc.n	800147e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800148a:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800148c:	4c0a      	ldr	r4, [pc, #40]	; (80014b8 <LoopForever+0x16>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001490:	e001      	b.n	8001496 <LoopFillZerobss>

08001492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001494:	3204      	adds	r2, #4

08001496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001498:	d3fb      	bcc.n	8001492 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800149a:	f003 fb3b 	bl	8004b14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800149e:	f7ff f841 	bl	8000524 <main>

080014a2 <LoopForever>:

LoopForever:
    b LoopForever
 80014a2:	e7fe      	b.n	80014a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014ac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80014b0:	0800565c 	.word	0x0800565c
  ldr r2, =_sbss
 80014b4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80014b8:	20000814 	.word	0x20000814

080014bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014bc:	e7fe      	b.n	80014bc <ADC1_2_IRQHandler>

080014be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014c4:	2300      	movs	r3, #0
 80014c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c8:	2003      	movs	r0, #3
 80014ca:	f000 f961 	bl	8001790 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ce:	2000      	movs	r0, #0
 80014d0:	f000 f80e 	bl	80014f0 <HAL_InitTick>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d002      	beq.n	80014e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	71fb      	strb	r3, [r7, #7]
 80014de:	e001      	b.n	80014e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014e0:	f7ff fc0e 	bl	8000d00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014e4:	79fb      	ldrb	r3, [r7, #7]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014f8:	2300      	movs	r3, #0
 80014fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014fc:	4b17      	ldr	r3, [pc, #92]	; (800155c <HAL_InitTick+0x6c>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d023      	beq.n	800154c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001504:	4b16      	ldr	r3, [pc, #88]	; (8001560 <HAL_InitTick+0x70>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b14      	ldr	r3, [pc, #80]	; (800155c <HAL_InitTick+0x6c>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4619      	mov	r1, r3
 800150e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001512:	fbb3 f3f1 	udiv	r3, r3, r1
 8001516:	fbb2 f3f3 	udiv	r3, r2, r3
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f96d 	bl	80017fa <HAL_SYSTICK_Config>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10f      	bne.n	8001546 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b0f      	cmp	r3, #15
 800152a:	d809      	bhi.n	8001540 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800152c:	2200      	movs	r2, #0
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001534:	f000 f937 	bl	80017a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001538:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <HAL_InitTick+0x74>)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	e007      	b.n	8001550 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	73fb      	strb	r3, [r7, #15]
 8001544:	e004      	b.n	8001550 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	73fb      	strb	r3, [r7, #15]
 800154a:	e001      	b.n	8001550 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001550:	7bfb      	ldrb	r3, [r7, #15]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000008 	.word	0x20000008
 8001560:	20000000 	.word	0x20000000
 8001564:	20000004 	.word	0x20000004

08001568 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_IncTick+0x20>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_IncTick+0x24>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4413      	add	r3, r2
 8001578:	4a04      	ldr	r2, [pc, #16]	; (800158c <HAL_IncTick+0x24>)
 800157a:	6013      	str	r3, [r2, #0]
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	20000008 	.word	0x20000008
 800158c:	200007dc 	.word	0x200007dc

08001590 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return uwTick;
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <HAL_GetTick+0x14>)
 8001596:	681b      	ldr	r3, [r3, #0]
}
 8001598:	4618      	mov	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	200007dc 	.word	0x200007dc

080015a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015b0:	f7ff ffee 	bl	8001590 <HAL_GetTick>
 80015b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015c0:	d005      	beq.n	80015ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015c2:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <HAL_Delay+0x44>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	461a      	mov	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4413      	add	r3, r2
 80015cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ce:	bf00      	nop
 80015d0:	f7ff ffde 	bl	8001590 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d8f7      	bhi.n	80015d0 <HAL_Delay+0x28>
  {
  }
}
 80015e0:	bf00      	nop
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000008 	.word	0x20000008

080015f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <__NVIC_SetPriorityGrouping+0x44>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800160c:	4013      	ands	r3, r2
 800160e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800161c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001622:	4a04      	ldr	r2, [pc, #16]	; (8001634 <__NVIC_SetPriorityGrouping+0x44>)
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	60d3      	str	r3, [r2, #12]
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800163c:	4b04      	ldr	r3, [pc, #16]	; (8001650 <__NVIC_GetPriorityGrouping+0x18>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	0a1b      	lsrs	r3, r3, #8
 8001642:	f003 0307 	and.w	r3, r3, #7
}
 8001646:	4618      	mov	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	2b00      	cmp	r3, #0
 8001664:	db0b      	blt.n	800167e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	f003 021f 	and.w	r2, r3, #31
 800166c:	4907      	ldr	r1, [pc, #28]	; (800168c <__NVIC_EnableIRQ+0x38>)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	095b      	lsrs	r3, r3, #5
 8001674:	2001      	movs	r0, #1
 8001676:	fa00 f202 	lsl.w	r2, r0, r2
 800167a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000e100 	.word	0xe000e100

08001690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	6039      	str	r1, [r7, #0]
 800169a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	db0a      	blt.n	80016ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	490c      	ldr	r1, [pc, #48]	; (80016dc <__NVIC_SetPriority+0x4c>)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	0112      	lsls	r2, r2, #4
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	440b      	add	r3, r1
 80016b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b8:	e00a      	b.n	80016d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4908      	ldr	r1, [pc, #32]	; (80016e0 <__NVIC_SetPriority+0x50>)
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	3b04      	subs	r3, #4
 80016c8:	0112      	lsls	r2, r2, #4
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	440b      	add	r3, r1
 80016ce:	761a      	strb	r2, [r3, #24]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000e100 	.word	0xe000e100
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b089      	sub	sp, #36	; 0x24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f1c3 0307 	rsb	r3, r3, #7
 80016fe:	2b04      	cmp	r3, #4
 8001700:	bf28      	it	cs
 8001702:	2304      	movcs	r3, #4
 8001704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3304      	adds	r3, #4
 800170a:	2b06      	cmp	r3, #6
 800170c:	d902      	bls.n	8001714 <NVIC_EncodePriority+0x30>
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3b03      	subs	r3, #3
 8001712:	e000      	b.n	8001716 <NVIC_EncodePriority+0x32>
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43da      	mvns	r2, r3
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	401a      	ands	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800172c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	fa01 f303 	lsl.w	r3, r1, r3
 8001736:	43d9      	mvns	r1, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	4313      	orrs	r3, r2
         );
}
 800173e:	4618      	mov	r0, r3
 8001740:	3724      	adds	r7, #36	; 0x24
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3b01      	subs	r3, #1
 8001758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800175c:	d301      	bcc.n	8001762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800175e:	2301      	movs	r3, #1
 8001760:	e00f      	b.n	8001782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <SysTick_Config+0x40>)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800176a:	210f      	movs	r1, #15
 800176c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001770:	f7ff ff8e 	bl	8001690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <SysTick_Config+0x40>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177a:	4b04      	ldr	r3, [pc, #16]	; (800178c <SysTick_Config+0x40>)
 800177c:	2207      	movs	r2, #7
 800177e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	e000e010 	.word	0xe000e010

08001790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff ff29 	bl	80015f0 <__NVIC_SetPriorityGrouping>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b086      	sub	sp, #24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	4603      	mov	r3, r0
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
 80017b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017b8:	f7ff ff3e 	bl	8001638 <__NVIC_GetPriorityGrouping>
 80017bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	68b9      	ldr	r1, [r7, #8]
 80017c2:	6978      	ldr	r0, [r7, #20]
 80017c4:	f7ff ff8e 	bl	80016e4 <NVIC_EncodePriority>
 80017c8:	4602      	mov	r2, r0
 80017ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff5d 	bl	8001690 <__NVIC_SetPriority>
}
 80017d6:	bf00      	nop
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4603      	mov	r3, r0
 80017e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff31 	bl	8001654 <__NVIC_EnableIRQ>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff ffa2 	bl	800174c <SysTick_Config>
 8001808:	4603      	mov	r3, r0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e0ac      	b.n	8001980 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f000 f8b2 	bl	8001994 <DFSDM_GetChannelFromInstance>
 8001830:	4603      	mov	r3, r0
 8001832:	4a55      	ldr	r2, [pc, #340]	; (8001988 <HAL_DFSDM_ChannelInit+0x174>)
 8001834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e09f      	b.n	8001980 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff fa81 	bl	8000d48 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001846:	4b51      	ldr	r3, [pc, #324]	; (800198c <HAL_DFSDM_ChannelInit+0x178>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	3301      	adds	r3, #1
 800184c:	4a4f      	ldr	r2, [pc, #316]	; (800198c <HAL_DFSDM_ChannelInit+0x178>)
 800184e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001850:	4b4e      	ldr	r3, [pc, #312]	; (800198c <HAL_DFSDM_ChannelInit+0x178>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d125      	bne.n	80018a4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001858:	4b4d      	ldr	r3, [pc, #308]	; (8001990 <HAL_DFSDM_ChannelInit+0x17c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a4c      	ldr	r2, [pc, #304]	; (8001990 <HAL_DFSDM_ChannelInit+0x17c>)
 800185e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001862:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001864:	4b4a      	ldr	r3, [pc, #296]	; (8001990 <HAL_DFSDM_ChannelInit+0x17c>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	4948      	ldr	r1, [pc, #288]	; (8001990 <HAL_DFSDM_ChannelInit+0x17c>)
 800186e:	4313      	orrs	r3, r2
 8001870:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001872:	4b47      	ldr	r3, [pc, #284]	; (8001990 <HAL_DFSDM_ChannelInit+0x17c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a46      	ldr	r2, [pc, #280]	; (8001990 <HAL_DFSDM_ChannelInit+0x17c>)
 8001878:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800187c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	791b      	ldrb	r3, [r3, #4]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d108      	bne.n	8001898 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001886:	4b42      	ldr	r3, [pc, #264]	; (8001990 <HAL_DFSDM_ChannelInit+0x17c>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	3b01      	subs	r3, #1
 8001890:	041b      	lsls	r3, r3, #16
 8001892:	493f      	ldr	r1, [pc, #252]	; (8001990 <HAL_DFSDM_ChannelInit+0x17c>)
 8001894:	4313      	orrs	r3, r2
 8001896:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001898:	4b3d      	ldr	r3, [pc, #244]	; (8001990 <HAL_DFSDM_ChannelInit+0x17c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a3c      	ldr	r2, [pc, #240]	; (8001990 <HAL_DFSDM_ChannelInit+0x17c>)
 800189e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018a2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80018b2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6819      	ldr	r1, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80018c2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80018c8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 020f 	bic.w	r2, r2, #15
 80018e0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6819      	ldr	r1, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80018f0:	431a      	orrs	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001908:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6899      	ldr	r1, [r3, #8]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001918:	3b01      	subs	r3, #1
 800191a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800191c:	431a      	orrs	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	430a      	orrs	r2, r1
 8001924:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f002 0207 	and.w	r2, r2, #7
 8001934:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6859      	ldr	r1, [r3, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001940:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001948:	431a      	orrs	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001960:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f000 f810 	bl	8001994 <DFSDM_GetChannelFromInstance>
 8001974:	4602      	mov	r2, r0
 8001976:	4904      	ldr	r1, [pc, #16]	; (8001988 <HAL_DFSDM_ChannelInit+0x174>)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	200007e4 	.word	0x200007e4
 800198c:	200007e0 	.word	0x200007e0
 8001990:	40016000 	.word	0x40016000

08001994 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a1c      	ldr	r2, [pc, #112]	; (8001a10 <DFSDM_GetChannelFromInstance+0x7c>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d102      	bne.n	80019aa <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	e02b      	b.n	8001a02 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a19      	ldr	r2, [pc, #100]	; (8001a14 <DFSDM_GetChannelFromInstance+0x80>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d102      	bne.n	80019b8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80019b2:	2301      	movs	r3, #1
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	e024      	b.n	8001a02 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a17      	ldr	r2, [pc, #92]	; (8001a18 <DFSDM_GetChannelFromInstance+0x84>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d102      	bne.n	80019c6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80019c0:	2302      	movs	r3, #2
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	e01d      	b.n	8001a02 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a14      	ldr	r2, [pc, #80]	; (8001a1c <DFSDM_GetChannelFromInstance+0x88>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d102      	bne.n	80019d4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80019ce:	2304      	movs	r3, #4
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	e016      	b.n	8001a02 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <DFSDM_GetChannelFromInstance+0x8c>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d102      	bne.n	80019e2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80019dc:	2305      	movs	r3, #5
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	e00f      	b.n	8001a02 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a0f      	ldr	r2, [pc, #60]	; (8001a24 <DFSDM_GetChannelFromInstance+0x90>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d102      	bne.n	80019f0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80019ea:	2306      	movs	r3, #6
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	e008      	b.n	8001a02 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a0d      	ldr	r2, [pc, #52]	; (8001a28 <DFSDM_GetChannelFromInstance+0x94>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d102      	bne.n	80019fe <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80019f8:	2307      	movs	r3, #7
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	e001      	b.n	8001a02 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80019fe:	2303      	movs	r3, #3
 8001a00:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001a02:	68fb      	ldr	r3, [r7, #12]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	40016000 	.word	0x40016000
 8001a14:	40016020 	.word	0x40016020
 8001a18:	40016040 	.word	0x40016040
 8001a1c:	40016080 	.word	0x40016080
 8001a20:	400160a0 	.word	0x400160a0
 8001a24:	400160c0 	.word	0x400160c0
 8001a28:	400160e0 	.word	0x400160e0

08001a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b087      	sub	sp, #28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a3a:	e17f      	b.n	8001d3c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	2101      	movs	r1, #1
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	fa01 f303 	lsl.w	r3, r1, r3
 8001a48:	4013      	ands	r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 8171 	beq.w	8001d36 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d005      	beq.n	8001a6c <HAL_GPIO_Init+0x40>
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d130      	bne.n	8001ace <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	2203      	movs	r2, #3
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4013      	ands	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	68da      	ldr	r2, [r3, #12]
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	091b      	lsrs	r3, r3, #4
 8001ab8:	f003 0201 	and.w	r2, r3, #1
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	2b03      	cmp	r3, #3
 8001ad8:	d118      	bne.n	8001b0c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ade:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4013      	ands	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	08db      	lsrs	r3, r3, #3
 8001af6:	f003 0201 	and.w	r2, r3, #1
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d017      	beq.n	8001b48 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	2203      	movs	r2, #3
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d123      	bne.n	8001b9c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	08da      	lsrs	r2, r3, #3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3208      	adds	r2, #8
 8001b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b60:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	220f      	movs	r2, #15
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4013      	ands	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	691a      	ldr	r2, [r3, #16]
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	08da      	lsrs	r2, r3, #3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3208      	adds	r2, #8
 8001b96:	6939      	ldr	r1, [r7, #16]
 8001b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 0203 	and.w	r2, r3, #3
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 80ac 	beq.w	8001d36 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bde:	4b5f      	ldr	r3, [pc, #380]	; (8001d5c <HAL_GPIO_Init+0x330>)
 8001be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001be2:	4a5e      	ldr	r2, [pc, #376]	; (8001d5c <HAL_GPIO_Init+0x330>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	6613      	str	r3, [r2, #96]	; 0x60
 8001bea:	4b5c      	ldr	r3, [pc, #368]	; (8001d5c <HAL_GPIO_Init+0x330>)
 8001bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	60bb      	str	r3, [r7, #8]
 8001bf4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bf6:	4a5a      	ldr	r2, [pc, #360]	; (8001d60 <HAL_GPIO_Init+0x334>)
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	089b      	lsrs	r3, r3, #2
 8001bfc:	3302      	adds	r3, #2
 8001bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c02:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	220f      	movs	r2, #15
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43db      	mvns	r3, r3
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	4013      	ands	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c20:	d025      	beq.n	8001c6e <HAL_GPIO_Init+0x242>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a4f      	ldr	r2, [pc, #316]	; (8001d64 <HAL_GPIO_Init+0x338>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d01f      	beq.n	8001c6a <HAL_GPIO_Init+0x23e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a4e      	ldr	r2, [pc, #312]	; (8001d68 <HAL_GPIO_Init+0x33c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d019      	beq.n	8001c66 <HAL_GPIO_Init+0x23a>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a4d      	ldr	r2, [pc, #308]	; (8001d6c <HAL_GPIO_Init+0x340>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d013      	beq.n	8001c62 <HAL_GPIO_Init+0x236>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a4c      	ldr	r2, [pc, #304]	; (8001d70 <HAL_GPIO_Init+0x344>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d00d      	beq.n	8001c5e <HAL_GPIO_Init+0x232>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a4b      	ldr	r2, [pc, #300]	; (8001d74 <HAL_GPIO_Init+0x348>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d007      	beq.n	8001c5a <HAL_GPIO_Init+0x22e>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a4a      	ldr	r2, [pc, #296]	; (8001d78 <HAL_GPIO_Init+0x34c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d101      	bne.n	8001c56 <HAL_GPIO_Init+0x22a>
 8001c52:	2306      	movs	r3, #6
 8001c54:	e00c      	b.n	8001c70 <HAL_GPIO_Init+0x244>
 8001c56:	2307      	movs	r3, #7
 8001c58:	e00a      	b.n	8001c70 <HAL_GPIO_Init+0x244>
 8001c5a:	2305      	movs	r3, #5
 8001c5c:	e008      	b.n	8001c70 <HAL_GPIO_Init+0x244>
 8001c5e:	2304      	movs	r3, #4
 8001c60:	e006      	b.n	8001c70 <HAL_GPIO_Init+0x244>
 8001c62:	2303      	movs	r3, #3
 8001c64:	e004      	b.n	8001c70 <HAL_GPIO_Init+0x244>
 8001c66:	2302      	movs	r3, #2
 8001c68:	e002      	b.n	8001c70 <HAL_GPIO_Init+0x244>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <HAL_GPIO_Init+0x244>
 8001c6e:	2300      	movs	r3, #0
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	f002 0203 	and.w	r2, r2, #3
 8001c76:	0092      	lsls	r2, r2, #2
 8001c78:	4093      	lsls	r3, r2
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c80:	4937      	ldr	r1, [pc, #220]	; (8001d60 <HAL_GPIO_Init+0x334>)
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	089b      	lsrs	r3, r3, #2
 8001c86:	3302      	adds	r3, #2
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c8e:	4b3b      	ldr	r3, [pc, #236]	; (8001d7c <HAL_GPIO_Init+0x350>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	43db      	mvns	r3, r3
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cb2:	4a32      	ldr	r2, [pc, #200]	; (8001d7c <HAL_GPIO_Init+0x350>)
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cb8:	4b30      	ldr	r3, [pc, #192]	; (8001d7c <HAL_GPIO_Init+0x350>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cdc:	4a27      	ldr	r2, [pc, #156]	; (8001d7c <HAL_GPIO_Init+0x350>)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ce2:	4b26      	ldr	r3, [pc, #152]	; (8001d7c <HAL_GPIO_Init+0x350>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	43db      	mvns	r3, r3
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d06:	4a1d      	ldr	r2, [pc, #116]	; (8001d7c <HAL_GPIO_Init+0x350>)
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d0c:	4b1b      	ldr	r3, [pc, #108]	; (8001d7c <HAL_GPIO_Init+0x350>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d30:	4a12      	ldr	r2, [pc, #72]	; (8001d7c <HAL_GPIO_Init+0x350>)
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	fa22 f303 	lsr.w	r3, r2, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f47f ae78 	bne.w	8001a3c <HAL_GPIO_Init+0x10>
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	bf00      	nop
 8001d50:	371c      	adds	r7, #28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40010000 	.word	0x40010000
 8001d64:	48000400 	.word	0x48000400
 8001d68:	48000800 	.word	0x48000800
 8001d6c:	48000c00 	.word	0x48000c00
 8001d70:	48001000 	.word	0x48001000
 8001d74:	48001400 	.word	0x48001400
 8001d78:	48001800 	.word	0x48001800
 8001d7c:	40010400 	.word	0x40010400

08001d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	807b      	strh	r3, [r7, #2]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d90:	787b      	ldrb	r3, [r7, #1]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d96:	887a      	ldrh	r2, [r7, #2]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d9c:	e002      	b.n	8001da4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d9e:	887a      	ldrh	r2, [r7, #2]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001dba:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dbc:	695a      	ldr	r2, [r3, #20]
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d006      	beq.n	8001dd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dc6:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dc8:	88fb      	ldrh	r3, [r7, #6]
 8001dca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dcc:	88fb      	ldrh	r3, [r7, #6]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 f806 	bl	8001de0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40010400 	.word	0x40010400

08001de0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e081      	b.n	8001f0c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d106      	bne.n	8001e22 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7fe fff7 	bl	8000e10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2224      	movs	r2, #36	; 0x24
 8001e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 0201 	bic.w	r2, r2, #1
 8001e38:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e46:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e56:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d107      	bne.n	8001e70 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e6c:	609a      	str	r2, [r3, #8]
 8001e6e:	e006      	b.n	8001e7e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e7c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d104      	bne.n	8001e90 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e8e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6812      	ldr	r2, [r2, #0]
 8001e9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ea2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eb2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691a      	ldr	r2, [r3, #16]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69d9      	ldr	r1, [r3, #28]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a1a      	ldr	r2, [r3, #32]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f042 0201 	orr.w	r2, r2, #1
 8001eec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2220      	movs	r2, #32
 8001ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b20      	cmp	r3, #32
 8001f28:	d138      	bne.n	8001f9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d101      	bne.n	8001f38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f34:	2302      	movs	r3, #2
 8001f36:	e032      	b.n	8001f9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2224      	movs	r2, #36	; 0x24
 8001f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0201 	bic.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6819      	ldr	r1, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f042 0201 	orr.w	r2, r2, #1
 8001f86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	e000      	b.n	8001f9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f9c:	2302      	movs	r3, #2
  }
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b085      	sub	sp, #20
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b20      	cmp	r3, #32
 8001fbe:	d139      	bne.n	8002034 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d101      	bne.n	8001fce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e033      	b.n	8002036 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2224      	movs	r2, #36	; 0x24
 8001fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 0201 	bic.w	r2, r2, #1
 8001fec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ffc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	4313      	orrs	r3, r2
 8002006:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0201 	orr.w	r2, r2, #1
 800201e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2220      	movs	r2, #32
 8002024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002030:	2300      	movs	r3, #0
 8002032:	e000      	b.n	8002036 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002034:	2302      	movs	r3, #2
  }
}
 8002036:	4618      	mov	r0, r3
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002042:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002044:	b08f      	sub	sp, #60	; 0x3c
 8002046:	af0a      	add	r7, sp, #40	; 0x28
 8002048:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e116      	b.n	8002282 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d106      	bne.n	8002074 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff f858 	bl	8001124 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2203      	movs	r2, #3
 8002078:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002084:	2b00      	cmp	r3, #0
 8002086:	d102      	bne.n	800208e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f002 faaf 	bl	80045f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	603b      	str	r3, [r7, #0]
 800209e:	687e      	ldr	r6, [r7, #4]
 80020a0:	466d      	mov	r5, sp
 80020a2:	f106 0410 	add.w	r4, r6, #16
 80020a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80020b6:	1d33      	adds	r3, r6, #4
 80020b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020ba:	6838      	ldr	r0, [r7, #0]
 80020bc:	f002 fa6f 	bl	800459e <USB_CoreInit>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d005      	beq.n	80020d2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2202      	movs	r2, #2
 80020ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e0d7      	b.n	8002282 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2100      	movs	r1, #0
 80020d8:	4618      	mov	r0, r3
 80020da:	f002 fa9d 	bl	8004618 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020de:	2300      	movs	r3, #0
 80020e0:	73fb      	strb	r3, [r7, #15]
 80020e2:	e04a      	b.n	800217a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020e4:	7bfa      	ldrb	r2, [r7, #15]
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	4613      	mov	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4413      	add	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	333d      	adds	r3, #61	; 0x3d
 80020f4:	2201      	movs	r2, #1
 80020f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020f8:	7bfa      	ldrb	r2, [r7, #15]
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	4413      	add	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	333c      	adds	r3, #60	; 0x3c
 8002108:	7bfa      	ldrb	r2, [r7, #15]
 800210a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800210c:	7bfa      	ldrb	r2, [r7, #15]
 800210e:	7bfb      	ldrb	r3, [r7, #15]
 8002110:	b298      	uxth	r0, r3
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	4613      	mov	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4413      	add	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	3344      	adds	r3, #68	; 0x44
 8002120:	4602      	mov	r2, r0
 8002122:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002124:	7bfa      	ldrb	r2, [r7, #15]
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	4613      	mov	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	3340      	adds	r3, #64	; 0x40
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002138:	7bfa      	ldrb	r2, [r7, #15]
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	4413      	add	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	3348      	adds	r3, #72	; 0x48
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800214c:	7bfa      	ldrb	r2, [r7, #15]
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	4413      	add	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	334c      	adds	r3, #76	; 0x4c
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002160:	7bfa      	ldrb	r2, [r7, #15]
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	4413      	add	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	3354      	adds	r3, #84	; 0x54
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002174:	7bfb      	ldrb	r3, [r7, #15]
 8002176:	3301      	adds	r3, #1
 8002178:	73fb      	strb	r3, [r7, #15]
 800217a:	7bfa      	ldrb	r2, [r7, #15]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	429a      	cmp	r2, r3
 8002182:	d3af      	bcc.n	80020e4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002184:	2300      	movs	r3, #0
 8002186:	73fb      	strb	r3, [r7, #15]
 8002188:	e044      	b.n	8002214 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800218a:	7bfa      	ldrb	r2, [r7, #15]
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	4613      	mov	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	4413      	add	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	440b      	add	r3, r1
 8002198:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021a0:	7bfa      	ldrb	r2, [r7, #15]
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	4613      	mov	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4413      	add	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80021b2:	7bfa      	ldrb	r2, [r7, #15]
 80021b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021b6:	7bfa      	ldrb	r2, [r7, #15]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4413      	add	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021cc:	7bfa      	ldrb	r2, [r7, #15]
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	4413      	add	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021e2:	7bfa      	ldrb	r2, [r7, #15]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	4413      	add	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021f8:	7bfa      	ldrb	r2, [r7, #15]
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	4413      	add	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800220e:	7bfb      	ldrb	r3, [r7, #15]
 8002210:	3301      	adds	r3, #1
 8002212:	73fb      	strb	r3, [r7, #15]
 8002214:	7bfa      	ldrb	r2, [r7, #15]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	429a      	cmp	r2, r3
 800221c:	d3b5      	bcc.n	800218a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	603b      	str	r3, [r7, #0]
 8002224:	687e      	ldr	r6, [r7, #4]
 8002226:	466d      	mov	r5, sp
 8002228:	f106 0410 	add.w	r4, r6, #16
 800222c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800222e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002230:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002232:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002234:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002238:	e885 0003 	stmia.w	r5, {r0, r1}
 800223c:	1d33      	adds	r3, r6, #4
 800223e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002240:	6838      	ldr	r0, [r7, #0]
 8002242:	f002 fa35 	bl	80046b0 <USB_DevInit>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2202      	movs	r2, #2
 8002250:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e014      	b.n	8002282 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	2b01      	cmp	r3, #1
 800226e:	d102      	bne.n	8002276 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f80a 	bl	800228a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f002 fbe1 	bl	8004a42 <USB_DevDisconnect>

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800228a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800228a:	b480      	push	{r7}
 800228c:	b085      	sub	sp, #20
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022bc:	f043 0303 	orr.w	r3, r3, #3
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022d8:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a04      	ldr	r2, [pc, #16]	; (80022f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80022de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e2:	6013      	str	r3, [r2, #0]
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40007000 	.word	0x40007000

080022f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80022f8:	4b04      	ldr	r3, [pc, #16]	; (800230c <HAL_PWREx_GetVoltageRange+0x18>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002300:	4618      	mov	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40007000 	.word	0x40007000

08002310 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800231e:	d130      	bne.n	8002382 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002320:	4b23      	ldr	r3, [pc, #140]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800232c:	d038      	beq.n	80023a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800232e:	4b20      	ldr	r3, [pc, #128]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002336:	4a1e      	ldr	r2, [pc, #120]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002338:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800233c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800233e:	4b1d      	ldr	r3, [pc, #116]	; (80023b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2232      	movs	r2, #50	; 0x32
 8002344:	fb02 f303 	mul.w	r3, r2, r3
 8002348:	4a1b      	ldr	r2, [pc, #108]	; (80023b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800234a:	fba2 2303 	umull	r2, r3, r2, r3
 800234e:	0c9b      	lsrs	r3, r3, #18
 8002350:	3301      	adds	r3, #1
 8002352:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002354:	e002      	b.n	800235c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	3b01      	subs	r3, #1
 800235a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800235c:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002368:	d102      	bne.n	8002370 <HAL_PWREx_ControlVoltageScaling+0x60>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1f2      	bne.n	8002356 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002370:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800237c:	d110      	bne.n	80023a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e00f      	b.n	80023a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002382:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800238a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800238e:	d007      	beq.n	80023a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002390:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002398:	4a05      	ldr	r2, [pc, #20]	; (80023b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800239a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800239e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40007000 	.word	0x40007000
 80023b4:	20000000 	.word	0x20000000
 80023b8:	431bde83 	.word	0x431bde83

080023bc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	4a04      	ldr	r2, [pc, #16]	; (80023d8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80023c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ca:	6053      	str	r3, [r2, #4]
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	40007000 	.word	0x40007000

080023dc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af02      	add	r7, sp, #8
 80023e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80023e4:	f7ff f8d4 	bl	8001590 <HAL_GetTick>
 80023e8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e063      	b.n	80024bc <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10b      	bne.n	8002418 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7fe fd5f 	bl	8000ecc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800240e:	f241 3188 	movw	r1, #5000	; 0x1388
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f858 	bl	80024c8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	3b01      	subs	r3, #1
 8002428:	021a      	lsls	r2, r3, #8
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	2120      	movs	r1, #32
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f850 	bl	80024e4 <QSPI_WaitFlagStateUntilTimeout>
 8002444:	4603      	mov	r3, r0
 8002446:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002448:	7afb      	ldrb	r3, [r7, #11]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d131      	bne.n	80024b2 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002458:	f023 0310 	bic.w	r3, r3, #16
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6852      	ldr	r2, [r2, #4]
 8002460:	0611      	lsls	r1, r2, #24
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	68d2      	ldr	r2, [r2, #12]
 8002466:	4311      	orrs	r1, r2
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	6812      	ldr	r2, [r2, #0]
 800246c:	430b      	orrs	r3, r1
 800246e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	685a      	ldr	r2, [r3, #4]
 8002476:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <HAL_QSPI_Init+0xe8>)
 8002478:	4013      	ands	r3, r2
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6912      	ldr	r2, [r2, #16]
 800247e:	0411      	lsls	r1, r2, #16
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6952      	ldr	r2, [r2, #20]
 8002484:	4311      	orrs	r1, r2
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	6992      	ldr	r2, [r2, #24]
 800248a:	4311      	orrs	r1, r2
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	430b      	orrs	r3, r1
 8002492:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0201 	orr.w	r2, r2, #1
 80024a2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80024ba:	7afb      	ldrb	r3, [r7, #11]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	ffe0f8fe 	.word	0xffe0f8fe

080024c8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	603b      	str	r3, [r7, #0]
 80024f0:	4613      	mov	r3, r2
 80024f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80024f4:	e01a      	b.n	800252c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024fc:	d016      	beq.n	800252c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024fe:	f7ff f847 	bl	8001590 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	429a      	cmp	r2, r3
 800250c:	d302      	bcc.n	8002514 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10b      	bne.n	800252c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2204      	movs	r2, #4
 8002518:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002520:	f043 0201 	orr.w	r2, r3, #1
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e00e      	b.n	800254a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	4013      	ands	r3, r2
 8002536:	2b00      	cmp	r3, #0
 8002538:	bf14      	ite	ne
 800253a:	2301      	movne	r3, #1
 800253c:	2300      	moveq	r3, #0
 800253e:	b2db      	uxtb	r3, r3
 8002540:	461a      	mov	r2, r3
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	429a      	cmp	r2, r3
 8002546:	d1d6      	bne.n	80024f6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b088      	sub	sp, #32
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e3ca      	b.n	8002cfc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002566:	4b97      	ldr	r3, [pc, #604]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002570:	4b94      	ldr	r3, [pc, #592]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f003 0303 	and.w	r3, r3, #3
 8002578:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0310 	and.w	r3, r3, #16
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 80e4 	beq.w	8002750 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d007      	beq.n	800259e <HAL_RCC_OscConfig+0x4a>
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	2b0c      	cmp	r3, #12
 8002592:	f040 808b 	bne.w	80026ac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2b01      	cmp	r3, #1
 800259a:	f040 8087 	bne.w	80026ac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800259e:	4b89      	ldr	r3, [pc, #548]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d005      	beq.n	80025b6 <HAL_RCC_OscConfig+0x62>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e3a2      	b.n	8002cfc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1a      	ldr	r2, [r3, #32]
 80025ba:	4b82      	ldr	r3, [pc, #520]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d004      	beq.n	80025d0 <HAL_RCC_OscConfig+0x7c>
 80025c6:	4b7f      	ldr	r3, [pc, #508]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025ce:	e005      	b.n	80025dc <HAL_RCC_OscConfig+0x88>
 80025d0:	4b7c      	ldr	r3, [pc, #496]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80025d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025d6:	091b      	lsrs	r3, r3, #4
 80025d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025dc:	4293      	cmp	r3, r2
 80025de:	d223      	bcs.n	8002628 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f000 fd55 	bl	8003094 <RCC_SetFlashLatencyFromMSIRange>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e383      	b.n	8002cfc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025f4:	4b73      	ldr	r3, [pc, #460]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a72      	ldr	r2, [pc, #456]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80025fa:	f043 0308 	orr.w	r3, r3, #8
 80025fe:	6013      	str	r3, [r2, #0]
 8002600:	4b70      	ldr	r3, [pc, #448]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	496d      	ldr	r1, [pc, #436]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 800260e:	4313      	orrs	r3, r2
 8002610:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002612:	4b6c      	ldr	r3, [pc, #432]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	021b      	lsls	r3, r3, #8
 8002620:	4968      	ldr	r1, [pc, #416]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002622:	4313      	orrs	r3, r2
 8002624:	604b      	str	r3, [r1, #4]
 8002626:	e025      	b.n	8002674 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002628:	4b66      	ldr	r3, [pc, #408]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a65      	ldr	r2, [pc, #404]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 800262e:	f043 0308 	orr.w	r3, r3, #8
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	4b63      	ldr	r3, [pc, #396]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	4960      	ldr	r1, [pc, #384]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002642:	4313      	orrs	r3, r2
 8002644:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002646:	4b5f      	ldr	r3, [pc, #380]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	021b      	lsls	r3, r3, #8
 8002654:	495b      	ldr	r1, [pc, #364]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002656:	4313      	orrs	r3, r2
 8002658:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d109      	bne.n	8002674 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	4618      	mov	r0, r3
 8002666:	f000 fd15 	bl	8003094 <RCC_SetFlashLatencyFromMSIRange>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e343      	b.n	8002cfc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002674:	f000 fc4a 	bl	8002f0c <HAL_RCC_GetSysClockFreq>
 8002678:	4602      	mov	r2, r0
 800267a:	4b52      	ldr	r3, [pc, #328]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	091b      	lsrs	r3, r3, #4
 8002680:	f003 030f 	and.w	r3, r3, #15
 8002684:	4950      	ldr	r1, [pc, #320]	; (80027c8 <HAL_RCC_OscConfig+0x274>)
 8002686:	5ccb      	ldrb	r3, [r1, r3]
 8002688:	f003 031f 	and.w	r3, r3, #31
 800268c:	fa22 f303 	lsr.w	r3, r2, r3
 8002690:	4a4e      	ldr	r2, [pc, #312]	; (80027cc <HAL_RCC_OscConfig+0x278>)
 8002692:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002694:	4b4e      	ldr	r3, [pc, #312]	; (80027d0 <HAL_RCC_OscConfig+0x27c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f7fe ff29 	bl	80014f0 <HAL_InitTick>
 800269e:	4603      	mov	r3, r0
 80026a0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d052      	beq.n	800274e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
 80026aa:	e327      	b.n	8002cfc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d032      	beq.n	800271a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026b4:	4b43      	ldr	r3, [pc, #268]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a42      	ldr	r2, [pc, #264]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026c0:	f7fe ff66 	bl	8001590 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026c8:	f7fe ff62 	bl	8001590 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e310      	b.n	8002cfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026da:	4b3a      	ldr	r3, [pc, #232]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026e6:	4b37      	ldr	r3, [pc, #220]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a36      	ldr	r2, [pc, #216]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80026ec:	f043 0308 	orr.w	r3, r3, #8
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	4b34      	ldr	r3, [pc, #208]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	4931      	ldr	r1, [pc, #196]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002700:	4313      	orrs	r3, r2
 8002702:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002704:	4b2f      	ldr	r3, [pc, #188]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	021b      	lsls	r3, r3, #8
 8002712:	492c      	ldr	r1, [pc, #176]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002714:	4313      	orrs	r3, r2
 8002716:	604b      	str	r3, [r1, #4]
 8002718:	e01a      	b.n	8002750 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800271a:	4b2a      	ldr	r3, [pc, #168]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a29      	ldr	r2, [pc, #164]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002720:	f023 0301 	bic.w	r3, r3, #1
 8002724:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002726:	f7fe ff33 	bl	8001590 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800272e:	f7fe ff2f 	bl	8001590 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e2dd      	b.n	8002cfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002740:	4b20      	ldr	r3, [pc, #128]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1f0      	bne.n	800272e <HAL_RCC_OscConfig+0x1da>
 800274c:	e000      	b.n	8002750 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800274e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b00      	cmp	r3, #0
 800275a:	d074      	beq.n	8002846 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	2b08      	cmp	r3, #8
 8002760:	d005      	beq.n	800276e <HAL_RCC_OscConfig+0x21a>
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	2b0c      	cmp	r3, #12
 8002766:	d10e      	bne.n	8002786 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	2b03      	cmp	r3, #3
 800276c:	d10b      	bne.n	8002786 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800276e:	4b15      	ldr	r3, [pc, #84]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d064      	beq.n	8002844 <HAL_RCC_OscConfig+0x2f0>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d160      	bne.n	8002844 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e2ba      	b.n	8002cfc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800278e:	d106      	bne.n	800279e <HAL_RCC_OscConfig+0x24a>
 8002790:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a0b      	ldr	r2, [pc, #44]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 8002796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279a:	6013      	str	r3, [r2, #0]
 800279c:	e026      	b.n	80027ec <HAL_RCC_OscConfig+0x298>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027a6:	d115      	bne.n	80027d4 <HAL_RCC_OscConfig+0x280>
 80027a8:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a05      	ldr	r2, [pc, #20]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80027ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027b2:	6013      	str	r3, [r2, #0]
 80027b4:	4b03      	ldr	r3, [pc, #12]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a02      	ldr	r2, [pc, #8]	; (80027c4 <HAL_RCC_OscConfig+0x270>)
 80027ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027be:	6013      	str	r3, [r2, #0]
 80027c0:	e014      	b.n	80027ec <HAL_RCC_OscConfig+0x298>
 80027c2:	bf00      	nop
 80027c4:	40021000 	.word	0x40021000
 80027c8:	080055a0 	.word	0x080055a0
 80027cc:	20000000 	.word	0x20000000
 80027d0:	20000004 	.word	0x20000004
 80027d4:	4ba0      	ldr	r3, [pc, #640]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a9f      	ldr	r2, [pc, #636]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80027da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027de:	6013      	str	r3, [r2, #0]
 80027e0:	4b9d      	ldr	r3, [pc, #628]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a9c      	ldr	r2, [pc, #624]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80027e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d013      	beq.n	800281c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f4:	f7fe fecc 	bl	8001590 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027fc:	f7fe fec8 	bl	8001590 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b64      	cmp	r3, #100	; 0x64
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e276      	b.n	8002cfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800280e:	4b92      	ldr	r3, [pc, #584]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0f0      	beq.n	80027fc <HAL_RCC_OscConfig+0x2a8>
 800281a:	e014      	b.n	8002846 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281c:	f7fe feb8 	bl	8001590 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002824:	f7fe feb4 	bl	8001590 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b64      	cmp	r3, #100	; 0x64
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e262      	b.n	8002cfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002836:	4b88      	ldr	r3, [pc, #544]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f0      	bne.n	8002824 <HAL_RCC_OscConfig+0x2d0>
 8002842:	e000      	b.n	8002846 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d060      	beq.n	8002914 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	2b04      	cmp	r3, #4
 8002856:	d005      	beq.n	8002864 <HAL_RCC_OscConfig+0x310>
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2b0c      	cmp	r3, #12
 800285c:	d119      	bne.n	8002892 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	2b02      	cmp	r3, #2
 8002862:	d116      	bne.n	8002892 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002864:	4b7c      	ldr	r3, [pc, #496]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <HAL_RCC_OscConfig+0x328>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e23f      	b.n	8002cfc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287c:	4b76      	ldr	r3, [pc, #472]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	061b      	lsls	r3, r3, #24
 800288a:	4973      	ldr	r1, [pc, #460]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 800288c:	4313      	orrs	r3, r2
 800288e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002890:	e040      	b.n	8002914 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d023      	beq.n	80028e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800289a:	4b6f      	ldr	r3, [pc, #444]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a6e      	ldr	r2, [pc, #440]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80028a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a6:	f7fe fe73 	bl	8001590 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ae:	f7fe fe6f 	bl	8001590 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e21d      	b.n	8002cfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028c0:	4b65      	ldr	r3, [pc, #404]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028cc:	4b62      	ldr	r3, [pc, #392]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	061b      	lsls	r3, r3, #24
 80028da:	495f      	ldr	r1, [pc, #380]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	604b      	str	r3, [r1, #4]
 80028e0:	e018      	b.n	8002914 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028e2:	4b5d      	ldr	r3, [pc, #372]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a5c      	ldr	r2, [pc, #368]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80028e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ee:	f7fe fe4f 	bl	8001590 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f6:	f7fe fe4b 	bl	8001590 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e1f9      	b.n	8002cfc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002908:	4b53      	ldr	r3, [pc, #332]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1f0      	bne.n	80028f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	2b00      	cmp	r3, #0
 800291e:	d03c      	beq.n	800299a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d01c      	beq.n	8002962 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002928:	4b4b      	ldr	r3, [pc, #300]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 800292a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800292e:	4a4a      	ldr	r2, [pc, #296]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002938:	f7fe fe2a 	bl	8001590 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002940:	f7fe fe26 	bl	8001590 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e1d4      	b.n	8002cfc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002952:	4b41      	ldr	r3, [pc, #260]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 8002954:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0ef      	beq.n	8002940 <HAL_RCC_OscConfig+0x3ec>
 8002960:	e01b      	b.n	800299a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002962:	4b3d      	ldr	r3, [pc, #244]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 8002964:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002968:	4a3b      	ldr	r2, [pc, #236]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 800296a:	f023 0301 	bic.w	r3, r3, #1
 800296e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002972:	f7fe fe0d 	bl	8001590 <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800297a:	f7fe fe09 	bl	8001590 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e1b7      	b.n	8002cfc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800298c:	4b32      	ldr	r3, [pc, #200]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 800298e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1ef      	bne.n	800297a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0304 	and.w	r3, r3, #4
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 80a6 	beq.w	8002af4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029a8:	2300      	movs	r3, #0
 80029aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029ac:	4b2a      	ldr	r3, [pc, #168]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80029ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10d      	bne.n	80029d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029b8:	4b27      	ldr	r3, [pc, #156]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80029ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029bc:	4a26      	ldr	r2, [pc, #152]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80029be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c2:	6593      	str	r3, [r2, #88]	; 0x58
 80029c4:	4b24      	ldr	r3, [pc, #144]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 80029c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029cc:	60bb      	str	r3, [r7, #8]
 80029ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029d0:	2301      	movs	r3, #1
 80029d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029d4:	4b21      	ldr	r3, [pc, #132]	; (8002a5c <HAL_RCC_OscConfig+0x508>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d118      	bne.n	8002a12 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029e0:	4b1e      	ldr	r3, [pc, #120]	; (8002a5c <HAL_RCC_OscConfig+0x508>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a1d      	ldr	r2, [pc, #116]	; (8002a5c <HAL_RCC_OscConfig+0x508>)
 80029e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ec:	f7fe fdd0 	bl	8001590 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f4:	f7fe fdcc 	bl	8001590 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e17a      	b.n	8002cfc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a06:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <HAL_RCC_OscConfig+0x508>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0f0      	beq.n	80029f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d108      	bne.n	8002a2c <HAL_RCC_OscConfig+0x4d8>
 8002a1a:	4b0f      	ldr	r3, [pc, #60]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 8002a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a20:	4a0d      	ldr	r2, [pc, #52]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a2a:	e029      	b.n	8002a80 <HAL_RCC_OscConfig+0x52c>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	2b05      	cmp	r3, #5
 8002a32:	d115      	bne.n	8002a60 <HAL_RCC_OscConfig+0x50c>
 8002a34:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 8002a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3a:	4a07      	ldr	r2, [pc, #28]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 8002a3c:	f043 0304 	orr.w	r3, r3, #4
 8002a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a44:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 8002a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4a:	4a03      	ldr	r2, [pc, #12]	; (8002a58 <HAL_RCC_OscConfig+0x504>)
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a54:	e014      	b.n	8002a80 <HAL_RCC_OscConfig+0x52c>
 8002a56:	bf00      	nop
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	40007000 	.word	0x40007000
 8002a60:	4b9c      	ldr	r3, [pc, #624]	; (8002cd4 <HAL_RCC_OscConfig+0x780>)
 8002a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a66:	4a9b      	ldr	r2, [pc, #620]	; (8002cd4 <HAL_RCC_OscConfig+0x780>)
 8002a68:	f023 0301 	bic.w	r3, r3, #1
 8002a6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a70:	4b98      	ldr	r3, [pc, #608]	; (8002cd4 <HAL_RCC_OscConfig+0x780>)
 8002a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a76:	4a97      	ldr	r2, [pc, #604]	; (8002cd4 <HAL_RCC_OscConfig+0x780>)
 8002a78:	f023 0304 	bic.w	r3, r3, #4
 8002a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d016      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a88:	f7fe fd82 	bl	8001590 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a8e:	e00a      	b.n	8002aa6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a90:	f7fe fd7e 	bl	8001590 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e12a      	b.n	8002cfc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aa6:	4b8b      	ldr	r3, [pc, #556]	; (8002cd4 <HAL_RCC_OscConfig+0x780>)
 8002aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0ed      	beq.n	8002a90 <HAL_RCC_OscConfig+0x53c>
 8002ab4:	e015      	b.n	8002ae2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab6:	f7fe fd6b 	bl	8001590 <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002abc:	e00a      	b.n	8002ad4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002abe:	f7fe fd67 	bl	8001590 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e113      	b.n	8002cfc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ad4:	4b7f      	ldr	r3, [pc, #508]	; (8002cd4 <HAL_RCC_OscConfig+0x780>)
 8002ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1ed      	bne.n	8002abe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ae2:	7ffb      	ldrb	r3, [r7, #31]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d105      	bne.n	8002af4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae8:	4b7a      	ldr	r3, [pc, #488]	; (8002cd4 <HAL_RCC_OscConfig+0x780>)
 8002aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aec:	4a79      	ldr	r2, [pc, #484]	; (8002cd4 <HAL_RCC_OscConfig+0x780>)
 8002aee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002af2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 80fe 	beq.w	8002cfa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	f040 80d0 	bne.w	8002ca8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b08:	4b72      	ldr	r3, [pc, #456]	; (8002cd4 <HAL_RCC_OscConfig+0x780>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f003 0203 	and.w	r2, r3, #3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d130      	bne.n	8002b7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	3b01      	subs	r3, #1
 8002b28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d127      	bne.n	8002b7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b38:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d11f      	bne.n	8002b7e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b48:	2a07      	cmp	r2, #7
 8002b4a:	bf14      	ite	ne
 8002b4c:	2201      	movne	r2, #1
 8002b4e:	2200      	moveq	r2, #0
 8002b50:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d113      	bne.n	8002b7e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b60:	085b      	lsrs	r3, r3, #1
 8002b62:	3b01      	subs	r3, #1
 8002b64:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d109      	bne.n	8002b7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	085b      	lsrs	r3, r3, #1
 8002b76:	3b01      	subs	r3, #1
 8002b78:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d06e      	beq.n	8002c5c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	2b0c      	cmp	r3, #12
 8002b82:	d069      	beq.n	8002c58 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b84:	4b53      	ldr	r3, [pc, #332]	; (8002cd4 <HAL_RCC_OscConfig+0x780>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d105      	bne.n	8002b9c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b90:	4b50      	ldr	r3, [pc, #320]	; (8002cd4 <HAL_RCC_OscConfig+0x780>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e0ad      	b.n	8002cfc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ba0:	4b4c      	ldr	r3, [pc, #304]	; (8002cd4 <HAL_RCC_OscConfig+0x780>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a4b      	ldr	r2, [pc, #300]	; (8002cd4 <HAL_RCC_OscConfig+0x780>)
 8002ba6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002baa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bac:	f7fe fcf0 	bl	8001590 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb4:	f7fe fcec 	bl	8001590 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e09a      	b.n	8002cfc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bc6:	4b43      	ldr	r3, [pc, #268]	; (8002cd4 <HAL_RCC_OscConfig+0x780>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f0      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bd2:	4b40      	ldr	r3, [pc, #256]	; (8002cd4 <HAL_RCC_OscConfig+0x780>)
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	4b40      	ldr	r3, [pc, #256]	; (8002cd8 <HAL_RCC_OscConfig+0x784>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002be2:	3a01      	subs	r2, #1
 8002be4:	0112      	lsls	r2, r2, #4
 8002be6:	4311      	orrs	r1, r2
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bec:	0212      	lsls	r2, r2, #8
 8002bee:	4311      	orrs	r1, r2
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bf4:	0852      	lsrs	r2, r2, #1
 8002bf6:	3a01      	subs	r2, #1
 8002bf8:	0552      	lsls	r2, r2, #21
 8002bfa:	4311      	orrs	r1, r2
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c00:	0852      	lsrs	r2, r2, #1
 8002c02:	3a01      	subs	r2, #1
 8002c04:	0652      	lsls	r2, r2, #25
 8002c06:	4311      	orrs	r1, r2
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c0c:	0912      	lsrs	r2, r2, #4
 8002c0e:	0452      	lsls	r2, r2, #17
 8002c10:	430a      	orrs	r2, r1
 8002c12:	4930      	ldr	r1, [pc, #192]	; (8002cd4 <HAL_RCC_OscConfig+0x780>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c18:	4b2e      	ldr	r3, [pc, #184]	; (8002cd4 <HAL_RCC_OscConfig+0x780>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a2d      	ldr	r2, [pc, #180]	; (8002cd4 <HAL_RCC_OscConfig+0x780>)
 8002c1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c22:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c24:	4b2b      	ldr	r3, [pc, #172]	; (8002cd4 <HAL_RCC_OscConfig+0x780>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	4a2a      	ldr	r2, [pc, #168]	; (8002cd4 <HAL_RCC_OscConfig+0x780>)
 8002c2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c2e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c30:	f7fe fcae 	bl	8001590 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c38:	f7fe fcaa 	bl	8001590 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e058      	b.n	8002cfc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c4a:	4b22      	ldr	r3, [pc, #136]	; (8002cd4 <HAL_RCC_OscConfig+0x780>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c56:	e050      	b.n	8002cfa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e04f      	b.n	8002cfc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c5c:	4b1d      	ldr	r3, [pc, #116]	; (8002cd4 <HAL_RCC_OscConfig+0x780>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d148      	bne.n	8002cfa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c68:	4b1a      	ldr	r3, [pc, #104]	; (8002cd4 <HAL_RCC_OscConfig+0x780>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a19      	ldr	r2, [pc, #100]	; (8002cd4 <HAL_RCC_OscConfig+0x780>)
 8002c6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c72:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c74:	4b17      	ldr	r3, [pc, #92]	; (8002cd4 <HAL_RCC_OscConfig+0x780>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	4a16      	ldr	r2, [pc, #88]	; (8002cd4 <HAL_RCC_OscConfig+0x780>)
 8002c7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c80:	f7fe fc86 	bl	8001590 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c88:	f7fe fc82 	bl	8001590 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e030      	b.n	8002cfc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c9a:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <HAL_RCC_OscConfig+0x780>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCC_OscConfig+0x734>
 8002ca6:	e028      	b.n	8002cfa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	2b0c      	cmp	r3, #12
 8002cac:	d023      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cae:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <HAL_RCC_OscConfig+0x780>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a08      	ldr	r2, [pc, #32]	; (8002cd4 <HAL_RCC_OscConfig+0x780>)
 8002cb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cba:	f7fe fc69 	bl	8001590 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cc0:	e00c      	b.n	8002cdc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc2:	f7fe fc65 	bl	8001590 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d905      	bls.n	8002cdc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e013      	b.n	8002cfc <HAL_RCC_OscConfig+0x7a8>
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cdc:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <HAL_RCC_OscConfig+0x7b0>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1ec      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ce8:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <HAL_RCC_OscConfig+0x7b0>)
 8002cea:	68da      	ldr	r2, [r3, #12]
 8002cec:	4905      	ldr	r1, [pc, #20]	; (8002d04 <HAL_RCC_OscConfig+0x7b0>)
 8002cee:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <HAL_RCC_OscConfig+0x7b4>)
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	60cb      	str	r3, [r1, #12]
 8002cf4:	e001      	b.n	8002cfa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3720      	adds	r7, #32
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40021000 	.word	0x40021000
 8002d08:	feeefffc 	.word	0xfeeefffc

08002d0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e0e7      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d20:	4b75      	ldr	r3, [pc, #468]	; (8002ef8 <HAL_RCC_ClockConfig+0x1ec>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d910      	bls.n	8002d50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2e:	4b72      	ldr	r3, [pc, #456]	; (8002ef8 <HAL_RCC_ClockConfig+0x1ec>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f023 0207 	bic.w	r2, r3, #7
 8002d36:	4970      	ldr	r1, [pc, #448]	; (8002ef8 <HAL_RCC_ClockConfig+0x1ec>)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3e:	4b6e      	ldr	r3, [pc, #440]	; (8002ef8 <HAL_RCC_ClockConfig+0x1ec>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d001      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e0cf      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d010      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	4b66      	ldr	r3, [pc, #408]	; (8002efc <HAL_RCC_ClockConfig+0x1f0>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d908      	bls.n	8002d7e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d6c:	4b63      	ldr	r3, [pc, #396]	; (8002efc <HAL_RCC_ClockConfig+0x1f0>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	4960      	ldr	r1, [pc, #384]	; (8002efc <HAL_RCC_ClockConfig+0x1f0>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d04c      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d107      	bne.n	8002da2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d92:	4b5a      	ldr	r3, [pc, #360]	; (8002efc <HAL_RCC_ClockConfig+0x1f0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d121      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e0a6      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d107      	bne.n	8002dba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002daa:	4b54      	ldr	r3, [pc, #336]	; (8002efc <HAL_RCC_ClockConfig+0x1f0>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d115      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e09a      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d107      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dc2:	4b4e      	ldr	r3, [pc, #312]	; (8002efc <HAL_RCC_ClockConfig+0x1f0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d109      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e08e      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dd2:	4b4a      	ldr	r3, [pc, #296]	; (8002efc <HAL_RCC_ClockConfig+0x1f0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e086      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002de2:	4b46      	ldr	r3, [pc, #280]	; (8002efc <HAL_RCC_ClockConfig+0x1f0>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f023 0203 	bic.w	r2, r3, #3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	4943      	ldr	r1, [pc, #268]	; (8002efc <HAL_RCC_ClockConfig+0x1f0>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002df4:	f7fe fbcc 	bl	8001590 <HAL_GetTick>
 8002df8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfa:	e00a      	b.n	8002e12 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dfc:	f7fe fbc8 	bl	8001590 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e06e      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e12:	4b3a      	ldr	r3, [pc, #232]	; (8002efc <HAL_RCC_ClockConfig+0x1f0>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 020c 	and.w	r2, r3, #12
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d1eb      	bne.n	8002dfc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d010      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	4b31      	ldr	r3, [pc, #196]	; (8002efc <HAL_RCC_ClockConfig+0x1f0>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d208      	bcs.n	8002e52 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e40:	4b2e      	ldr	r3, [pc, #184]	; (8002efc <HAL_RCC_ClockConfig+0x1f0>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	492b      	ldr	r1, [pc, #172]	; (8002efc <HAL_RCC_ClockConfig+0x1f0>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e52:	4b29      	ldr	r3, [pc, #164]	; (8002ef8 <HAL_RCC_ClockConfig+0x1ec>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d210      	bcs.n	8002e82 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e60:	4b25      	ldr	r3, [pc, #148]	; (8002ef8 <HAL_RCC_ClockConfig+0x1ec>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f023 0207 	bic.w	r2, r3, #7
 8002e68:	4923      	ldr	r1, [pc, #140]	; (8002ef8 <HAL_RCC_ClockConfig+0x1ec>)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e70:	4b21      	ldr	r3, [pc, #132]	; (8002ef8 <HAL_RCC_ClockConfig+0x1ec>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d001      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e036      	b.n	8002ef0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0304 	and.w	r3, r3, #4
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d008      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e8e:	4b1b      	ldr	r3, [pc, #108]	; (8002efc <HAL_RCC_ClockConfig+0x1f0>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	4918      	ldr	r1, [pc, #96]	; (8002efc <HAL_RCC_ClockConfig+0x1f0>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0308 	and.w	r3, r3, #8
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d009      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eac:	4b13      	ldr	r3, [pc, #76]	; (8002efc <HAL_RCC_ClockConfig+0x1f0>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	4910      	ldr	r1, [pc, #64]	; (8002efc <HAL_RCC_ClockConfig+0x1f0>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ec0:	f000 f824 	bl	8002f0c <HAL_RCC_GetSysClockFreq>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	4b0d      	ldr	r3, [pc, #52]	; (8002efc <HAL_RCC_ClockConfig+0x1f0>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	091b      	lsrs	r3, r3, #4
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	490b      	ldr	r1, [pc, #44]	; (8002f00 <HAL_RCC_ClockConfig+0x1f4>)
 8002ed2:	5ccb      	ldrb	r3, [r1, r3]
 8002ed4:	f003 031f 	and.w	r3, r3, #31
 8002ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8002edc:	4a09      	ldr	r2, [pc, #36]	; (8002f04 <HAL_RCC_ClockConfig+0x1f8>)
 8002ede:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ee0:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <HAL_RCC_ClockConfig+0x1fc>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fe fb03 	bl	80014f0 <HAL_InitTick>
 8002eea:	4603      	mov	r3, r0
 8002eec:	72fb      	strb	r3, [r7, #11]

  return status;
 8002eee:	7afb      	ldrb	r3, [r7, #11]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40022000 	.word	0x40022000
 8002efc:	40021000 	.word	0x40021000
 8002f00:	080055a0 	.word	0x080055a0
 8002f04:	20000000 	.word	0x20000000
 8002f08:	20000004 	.word	0x20000004

08002f0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b089      	sub	sp, #36	; 0x24
 8002f10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	61fb      	str	r3, [r7, #28]
 8002f16:	2300      	movs	r3, #0
 8002f18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f1a:	4b3e      	ldr	r3, [pc, #248]	; (8003014 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
 8002f22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f24:	4b3b      	ldr	r3, [pc, #236]	; (8003014 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	f003 0303 	and.w	r3, r3, #3
 8002f2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <HAL_RCC_GetSysClockFreq+0x34>
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	2b0c      	cmp	r3, #12
 8002f38:	d121      	bne.n	8002f7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d11e      	bne.n	8002f7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f40:	4b34      	ldr	r3, [pc, #208]	; (8003014 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0308 	and.w	r3, r3, #8
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d107      	bne.n	8002f5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f4c:	4b31      	ldr	r3, [pc, #196]	; (8003014 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f52:	0a1b      	lsrs	r3, r3, #8
 8002f54:	f003 030f 	and.w	r3, r3, #15
 8002f58:	61fb      	str	r3, [r7, #28]
 8002f5a:	e005      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f5c:	4b2d      	ldr	r3, [pc, #180]	; (8003014 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	091b      	lsrs	r3, r3, #4
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f68:	4a2b      	ldr	r2, [pc, #172]	; (8003018 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10d      	bne.n	8002f94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f7c:	e00a      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d102      	bne.n	8002f8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f84:	4b25      	ldr	r3, [pc, #148]	; (800301c <HAL_RCC_GetSysClockFreq+0x110>)
 8002f86:	61bb      	str	r3, [r7, #24]
 8002f88:	e004      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d101      	bne.n	8002f94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f90:	4b23      	ldr	r3, [pc, #140]	; (8003020 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	2b0c      	cmp	r3, #12
 8002f98:	d134      	bne.n	8003004 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f9a:	4b1e      	ldr	r3, [pc, #120]	; (8003014 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d003      	beq.n	8002fb2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d003      	beq.n	8002fb8 <HAL_RCC_GetSysClockFreq+0xac>
 8002fb0:	e005      	b.n	8002fbe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002fb2:	4b1a      	ldr	r3, [pc, #104]	; (800301c <HAL_RCC_GetSysClockFreq+0x110>)
 8002fb4:	617b      	str	r3, [r7, #20]
      break;
 8002fb6:	e005      	b.n	8002fc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002fb8:	4b19      	ldr	r3, [pc, #100]	; (8003020 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fba:	617b      	str	r3, [r7, #20]
      break;
 8002fbc:	e002      	b.n	8002fc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	617b      	str	r3, [r7, #20]
      break;
 8002fc2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fc4:	4b13      	ldr	r3, [pc, #76]	; (8003014 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	3301      	adds	r3, #1
 8002fd0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002fd2:	4b10      	ldr	r3, [pc, #64]	; (8003014 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	0a1b      	lsrs	r3, r3, #8
 8002fd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	fb03 f202 	mul.w	r2, r3, r2
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fea:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	0e5b      	lsrs	r3, r3, #25
 8002ff0:	f003 0303 	and.w	r3, r3, #3
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003002:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003004:	69bb      	ldr	r3, [r7, #24]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3724      	adds	r7, #36	; 0x24
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	40021000 	.word	0x40021000
 8003018:	080055b8 	.word	0x080055b8
 800301c:	00f42400 	.word	0x00f42400
 8003020:	007a1200 	.word	0x007a1200

08003024 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003028:	4b03      	ldr	r3, [pc, #12]	; (8003038 <HAL_RCC_GetHCLKFreq+0x14>)
 800302a:	681b      	ldr	r3, [r3, #0]
}
 800302c:	4618      	mov	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	20000000 	.word	0x20000000

0800303c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003040:	f7ff fff0 	bl	8003024 <HAL_RCC_GetHCLKFreq>
 8003044:	4602      	mov	r2, r0
 8003046:	4b06      	ldr	r3, [pc, #24]	; (8003060 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	0a1b      	lsrs	r3, r3, #8
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	4904      	ldr	r1, [pc, #16]	; (8003064 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003052:	5ccb      	ldrb	r3, [r1, r3]
 8003054:	f003 031f 	and.w	r3, r3, #31
 8003058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800305c:	4618      	mov	r0, r3
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40021000 	.word	0x40021000
 8003064:	080055b0 	.word	0x080055b0

08003068 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800306c:	f7ff ffda 	bl	8003024 <HAL_RCC_GetHCLKFreq>
 8003070:	4602      	mov	r2, r0
 8003072:	4b06      	ldr	r3, [pc, #24]	; (800308c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	0adb      	lsrs	r3, r3, #11
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	4904      	ldr	r1, [pc, #16]	; (8003090 <HAL_RCC_GetPCLK2Freq+0x28>)
 800307e:	5ccb      	ldrb	r3, [r1, r3]
 8003080:	f003 031f 	and.w	r3, r3, #31
 8003084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003088:	4618      	mov	r0, r3
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40021000 	.word	0x40021000
 8003090:	080055b0 	.word	0x080055b0

08003094 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800309c:	2300      	movs	r3, #0
 800309e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80030a0:	4b2a      	ldr	r3, [pc, #168]	; (800314c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80030ac:	f7ff f922 	bl	80022f4 <HAL_PWREx_GetVoltageRange>
 80030b0:	6178      	str	r0, [r7, #20]
 80030b2:	e014      	b.n	80030de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80030b4:	4b25      	ldr	r3, [pc, #148]	; (800314c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b8:	4a24      	ldr	r2, [pc, #144]	; (800314c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030be:	6593      	str	r3, [r2, #88]	; 0x58
 80030c0:	4b22      	ldr	r3, [pc, #136]	; (800314c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80030cc:	f7ff f912 	bl	80022f4 <HAL_PWREx_GetVoltageRange>
 80030d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030d2:	4b1e      	ldr	r3, [pc, #120]	; (800314c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d6:	4a1d      	ldr	r2, [pc, #116]	; (800314c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030e4:	d10b      	bne.n	80030fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b80      	cmp	r3, #128	; 0x80
 80030ea:	d919      	bls.n	8003120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2ba0      	cmp	r3, #160	; 0xa0
 80030f0:	d902      	bls.n	80030f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030f2:	2302      	movs	r3, #2
 80030f4:	613b      	str	r3, [r7, #16]
 80030f6:	e013      	b.n	8003120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030f8:	2301      	movs	r3, #1
 80030fa:	613b      	str	r3, [r7, #16]
 80030fc:	e010      	b.n	8003120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b80      	cmp	r3, #128	; 0x80
 8003102:	d902      	bls.n	800310a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003104:	2303      	movs	r3, #3
 8003106:	613b      	str	r3, [r7, #16]
 8003108:	e00a      	b.n	8003120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b80      	cmp	r3, #128	; 0x80
 800310e:	d102      	bne.n	8003116 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003110:	2302      	movs	r3, #2
 8003112:	613b      	str	r3, [r7, #16]
 8003114:	e004      	b.n	8003120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b70      	cmp	r3, #112	; 0x70
 800311a:	d101      	bne.n	8003120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800311c:	2301      	movs	r3, #1
 800311e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003120:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f023 0207 	bic.w	r2, r3, #7
 8003128:	4909      	ldr	r1, [pc, #36]	; (8003150 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	4313      	orrs	r3, r2
 800312e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003130:	4b07      	ldr	r3, [pc, #28]	; (8003150 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	429a      	cmp	r2, r3
 800313c:	d001      	beq.n	8003142 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e000      	b.n	8003144 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40021000 	.word	0x40021000
 8003150:	40022000 	.word	0x40022000

08003154 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800315c:	2300      	movs	r3, #0
 800315e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003160:	2300      	movs	r3, #0
 8003162:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800316c:	2b00      	cmp	r3, #0
 800316e:	d041      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003174:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003178:	d02a      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800317a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800317e:	d824      	bhi.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003180:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003184:	d008      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003186:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800318a:	d81e      	bhi.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00a      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003190:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003194:	d010      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003196:	e018      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003198:	4b86      	ldr	r3, [pc, #536]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	4a85      	ldr	r2, [pc, #532]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800319e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031a4:	e015      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	3304      	adds	r3, #4
 80031aa:	2100      	movs	r1, #0
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 facb 	bl	8003748 <RCCEx_PLLSAI1_Config>
 80031b2:	4603      	mov	r3, r0
 80031b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031b6:	e00c      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3320      	adds	r3, #32
 80031bc:	2100      	movs	r1, #0
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 fbb6 	bl	8003930 <RCCEx_PLLSAI2_Config>
 80031c4:	4603      	mov	r3, r0
 80031c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031c8:	e003      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	74fb      	strb	r3, [r7, #19]
      break;
 80031ce:	e000      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80031d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031d2:	7cfb      	ldrb	r3, [r7, #19]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10b      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031d8:	4b76      	ldr	r3, [pc, #472]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031e6:	4973      	ldr	r1, [pc, #460]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031ee:	e001      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f0:	7cfb      	ldrb	r3, [r7, #19]
 80031f2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d041      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003204:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003208:	d02a      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800320a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800320e:	d824      	bhi.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003210:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003214:	d008      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003216:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800321a:	d81e      	bhi.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00a      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003220:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003224:	d010      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003226:	e018      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003228:	4b62      	ldr	r3, [pc, #392]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	4a61      	ldr	r2, [pc, #388]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800322e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003232:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003234:	e015      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	3304      	adds	r3, #4
 800323a:	2100      	movs	r1, #0
 800323c:	4618      	mov	r0, r3
 800323e:	f000 fa83 	bl	8003748 <RCCEx_PLLSAI1_Config>
 8003242:	4603      	mov	r3, r0
 8003244:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003246:	e00c      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3320      	adds	r3, #32
 800324c:	2100      	movs	r1, #0
 800324e:	4618      	mov	r0, r3
 8003250:	f000 fb6e 	bl	8003930 <RCCEx_PLLSAI2_Config>
 8003254:	4603      	mov	r3, r0
 8003256:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003258:	e003      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	74fb      	strb	r3, [r7, #19]
      break;
 800325e:	e000      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003260:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003262:	7cfb      	ldrb	r3, [r7, #19]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10b      	bne.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003268:	4b52      	ldr	r3, [pc, #328]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003276:	494f      	ldr	r1, [pc, #316]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003278:	4313      	orrs	r3, r2
 800327a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800327e:	e001      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003280:	7cfb      	ldrb	r3, [r7, #19]
 8003282:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 80a0 	beq.w	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003292:	2300      	movs	r3, #0
 8003294:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003296:	4b47      	ldr	r3, [pc, #284]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80032a2:	2301      	movs	r3, #1
 80032a4:	e000      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80032a6:	2300      	movs	r3, #0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00d      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ac:	4b41      	ldr	r3, [pc, #260]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b0:	4a40      	ldr	r2, [pc, #256]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b6:	6593      	str	r3, [r2, #88]	; 0x58
 80032b8:	4b3e      	ldr	r3, [pc, #248]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c0:	60bb      	str	r3, [r7, #8]
 80032c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032c4:	2301      	movs	r3, #1
 80032c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032c8:	4b3b      	ldr	r3, [pc, #236]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a3a      	ldr	r2, [pc, #232]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032d4:	f7fe f95c 	bl	8001590 <HAL_GetTick>
 80032d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032da:	e009      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032dc:	f7fe f958 	bl	8001590 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d902      	bls.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	74fb      	strb	r3, [r7, #19]
        break;
 80032ee:	e005      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032f0:	4b31      	ldr	r3, [pc, #196]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0ef      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80032fc:	7cfb      	ldrb	r3, [r7, #19]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d15c      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003302:	4b2c      	ldr	r3, [pc, #176]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003308:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800330c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d01f      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	429a      	cmp	r2, r3
 800331e:	d019      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003320:	4b24      	ldr	r3, [pc, #144]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800332a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800332c:	4b21      	ldr	r3, [pc, #132]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003332:	4a20      	ldr	r2, [pc, #128]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003338:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800333c:	4b1d      	ldr	r3, [pc, #116]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800333e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003342:	4a1c      	ldr	r2, [pc, #112]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003348:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800334c:	4a19      	ldr	r2, [pc, #100]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d016      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335e:	f7fe f917 	bl	8001590 <HAL_GetTick>
 8003362:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003364:	e00b      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003366:	f7fe f913 	bl	8001590 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	f241 3288 	movw	r2, #5000	; 0x1388
 8003374:	4293      	cmp	r3, r2
 8003376:	d902      	bls.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	74fb      	strb	r3, [r7, #19]
            break;
 800337c:	e006      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800337e:	4b0d      	ldr	r3, [pc, #52]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0ec      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800338c:	7cfb      	ldrb	r3, [r7, #19]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10c      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003392:	4b08      	ldr	r3, [pc, #32]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003398:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033a2:	4904      	ldr	r1, [pc, #16]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80033aa:	e009      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033ac:	7cfb      	ldrb	r3, [r7, #19]
 80033ae:	74bb      	strb	r3, [r7, #18]
 80033b0:	e006      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80033b2:	bf00      	nop
 80033b4:	40021000 	.word	0x40021000
 80033b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033bc:	7cfb      	ldrb	r3, [r7, #19]
 80033be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033c0:	7c7b      	ldrb	r3, [r7, #17]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d105      	bne.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033c6:	4b9e      	ldr	r3, [pc, #632]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ca:	4a9d      	ldr	r2, [pc, #628]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033de:	4b98      	ldr	r3, [pc, #608]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e4:	f023 0203 	bic.w	r2, r3, #3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ec:	4994      	ldr	r1, [pc, #592]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00a      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003400:	4b8f      	ldr	r3, [pc, #572]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003406:	f023 020c 	bic.w	r2, r3, #12
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340e:	498c      	ldr	r1, [pc, #560]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003410:	4313      	orrs	r3, r2
 8003412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0304 	and.w	r3, r3, #4
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003422:	4b87      	ldr	r3, [pc, #540]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003428:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	4983      	ldr	r1, [pc, #524]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003432:	4313      	orrs	r3, r2
 8003434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0308 	and.w	r3, r3, #8
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00a      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003444:	4b7e      	ldr	r3, [pc, #504]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003452:	497b      	ldr	r1, [pc, #492]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003454:	4313      	orrs	r3, r2
 8003456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0310 	and.w	r3, r3, #16
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003466:	4b76      	ldr	r3, [pc, #472]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003474:	4972      	ldr	r1, [pc, #456]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003476:	4313      	orrs	r3, r2
 8003478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0320 	and.w	r3, r3, #32
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00a      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003488:	4b6d      	ldr	r3, [pc, #436]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003496:	496a      	ldr	r1, [pc, #424]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003498:	4313      	orrs	r3, r2
 800349a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034aa:	4b65      	ldr	r3, [pc, #404]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b8:	4961      	ldr	r1, [pc, #388]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00a      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034cc:	4b5c      	ldr	r3, [pc, #368]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034da:	4959      	ldr	r1, [pc, #356]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00a      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034ee:	4b54      	ldr	r3, [pc, #336]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034fc:	4950      	ldr	r1, [pc, #320]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00a      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003510:	4b4b      	ldr	r3, [pc, #300]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003516:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351e:	4948      	ldr	r1, [pc, #288]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00a      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003532:	4b43      	ldr	r3, [pc, #268]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003538:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003540:	493f      	ldr	r1, [pc, #252]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d028      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003554:	4b3a      	ldr	r3, [pc, #232]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003562:	4937      	ldr	r1, [pc, #220]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003564:	4313      	orrs	r3, r2
 8003566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800356e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003572:	d106      	bne.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003574:	4b32      	ldr	r3, [pc, #200]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	4a31      	ldr	r2, [pc, #196]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800357e:	60d3      	str	r3, [r2, #12]
 8003580:	e011      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003586:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800358a:	d10c      	bne.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3304      	adds	r3, #4
 8003590:	2101      	movs	r1, #1
 8003592:	4618      	mov	r0, r3
 8003594:	f000 f8d8 	bl	8003748 <RCCEx_PLLSAI1_Config>
 8003598:	4603      	mov	r3, r0
 800359a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800359c:	7cfb      	ldrb	r3, [r7, #19]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80035a2:	7cfb      	ldrb	r3, [r7, #19]
 80035a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d028      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035b2:	4b23      	ldr	r3, [pc, #140]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c0:	491f      	ldr	r1, [pc, #124]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035d0:	d106      	bne.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035d2:	4b1b      	ldr	r3, [pc, #108]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	4a1a      	ldr	r2, [pc, #104]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035dc:	60d3      	str	r3, [r2, #12]
 80035de:	e011      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035e8:	d10c      	bne.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	3304      	adds	r3, #4
 80035ee:	2101      	movs	r1, #1
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 f8a9 	bl	8003748 <RCCEx_PLLSAI1_Config>
 80035f6:	4603      	mov	r3, r0
 80035f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035fa:	7cfb      	ldrb	r3, [r7, #19]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003600:	7cfb      	ldrb	r3, [r7, #19]
 8003602:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d02b      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003610:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003616:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800361e:	4908      	ldr	r1, [pc, #32]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003620:	4313      	orrs	r3, r2
 8003622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800362a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800362e:	d109      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003630:	4b03      	ldr	r3, [pc, #12]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	4a02      	ldr	r2, [pc, #8]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003636:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800363a:	60d3      	str	r3, [r2, #12]
 800363c:	e014      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800363e:	bf00      	nop
 8003640:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003648:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800364c:	d10c      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3304      	adds	r3, #4
 8003652:	2101      	movs	r1, #1
 8003654:	4618      	mov	r0, r3
 8003656:	f000 f877 	bl	8003748 <RCCEx_PLLSAI1_Config>
 800365a:	4603      	mov	r3, r0
 800365c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800365e:	7cfb      	ldrb	r3, [r7, #19]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003664:	7cfb      	ldrb	r3, [r7, #19]
 8003666:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d02f      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003674:	4b2b      	ldr	r3, [pc, #172]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003682:	4928      	ldr	r1, [pc, #160]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003684:	4313      	orrs	r3, r2
 8003686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800368e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003692:	d10d      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3304      	adds	r3, #4
 8003698:	2102      	movs	r1, #2
 800369a:	4618      	mov	r0, r3
 800369c:	f000 f854 	bl	8003748 <RCCEx_PLLSAI1_Config>
 80036a0:	4603      	mov	r3, r0
 80036a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036a4:	7cfb      	ldrb	r3, [r7, #19]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d014      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80036aa:	7cfb      	ldrb	r3, [r7, #19]
 80036ac:	74bb      	strb	r3, [r7, #18]
 80036ae:	e011      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036b8:	d10c      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	3320      	adds	r3, #32
 80036be:	2102      	movs	r1, #2
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 f935 	bl	8003930 <RCCEx_PLLSAI2_Config>
 80036c6:	4603      	mov	r3, r0
 80036c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036ca:	7cfb      	ldrb	r3, [r7, #19]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80036d0:	7cfb      	ldrb	r3, [r7, #19]
 80036d2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00a      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036e0:	4b10      	ldr	r3, [pc, #64]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036ee:	490d      	ldr	r1, [pc, #52]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00b      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003702:	4b08      	ldr	r3, [pc, #32]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003708:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003712:	4904      	ldr	r1, [pc, #16]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003714:	4313      	orrs	r3, r2
 8003716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800371a:	7cbb      	ldrb	r3, [r7, #18]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40021000 	.word	0x40021000

08003728 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800372c:	4b05      	ldr	r3, [pc, #20]	; (8003744 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a04      	ldr	r2, [pc, #16]	; (8003744 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003732:	f043 0304 	orr.w	r3, r3, #4
 8003736:	6013      	str	r3, [r2, #0]
}
 8003738:	bf00      	nop
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	40021000 	.word	0x40021000

08003748 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003756:	4b75      	ldr	r3, [pc, #468]	; (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d018      	beq.n	8003794 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003762:	4b72      	ldr	r3, [pc, #456]	; (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f003 0203 	and.w	r2, r3, #3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d10d      	bne.n	800378e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
       ||
 8003776:	2b00      	cmp	r3, #0
 8003778:	d009      	beq.n	800378e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800377a:	4b6c      	ldr	r3, [pc, #432]	; (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	091b      	lsrs	r3, r3, #4
 8003780:	f003 0307 	and.w	r3, r3, #7
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
       ||
 800378a:	429a      	cmp	r2, r3
 800378c:	d047      	beq.n	800381e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	73fb      	strb	r3, [r7, #15]
 8003792:	e044      	b.n	800381e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b03      	cmp	r3, #3
 800379a:	d018      	beq.n	80037ce <RCCEx_PLLSAI1_Config+0x86>
 800379c:	2b03      	cmp	r3, #3
 800379e:	d825      	bhi.n	80037ec <RCCEx_PLLSAI1_Config+0xa4>
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d002      	beq.n	80037aa <RCCEx_PLLSAI1_Config+0x62>
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d009      	beq.n	80037bc <RCCEx_PLLSAI1_Config+0x74>
 80037a8:	e020      	b.n	80037ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037aa:	4b60      	ldr	r3, [pc, #384]	; (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d11d      	bne.n	80037f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ba:	e01a      	b.n	80037f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037bc:	4b5b      	ldr	r3, [pc, #364]	; (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d116      	bne.n	80037f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037cc:	e013      	b.n	80037f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037ce:	4b57      	ldr	r3, [pc, #348]	; (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10f      	bne.n	80037fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037da:	4b54      	ldr	r3, [pc, #336]	; (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d109      	bne.n	80037fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037ea:	e006      	b.n	80037fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	73fb      	strb	r3, [r7, #15]
      break;
 80037f0:	e004      	b.n	80037fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037f2:	bf00      	nop
 80037f4:	e002      	b.n	80037fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037f6:	bf00      	nop
 80037f8:	e000      	b.n	80037fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10d      	bne.n	800381e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003802:	4b4a      	ldr	r3, [pc, #296]	; (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6819      	ldr	r1, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	3b01      	subs	r3, #1
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	430b      	orrs	r3, r1
 8003818:	4944      	ldr	r1, [pc, #272]	; (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 800381a:	4313      	orrs	r3, r2
 800381c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800381e:	7bfb      	ldrb	r3, [r7, #15]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d17d      	bne.n	8003920 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003824:	4b41      	ldr	r3, [pc, #260]	; (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a40      	ldr	r2, [pc, #256]	; (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 800382a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800382e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003830:	f7fd feae 	bl	8001590 <HAL_GetTick>
 8003834:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003836:	e009      	b.n	800384c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003838:	f7fd feaa 	bl	8001590 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d902      	bls.n	800384c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	73fb      	strb	r3, [r7, #15]
        break;
 800384a:	e005      	b.n	8003858 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800384c:	4b37      	ldr	r3, [pc, #220]	; (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1ef      	bne.n	8003838 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d160      	bne.n	8003920 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d111      	bne.n	8003888 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003864:	4b31      	ldr	r3, [pc, #196]	; (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800386c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6892      	ldr	r2, [r2, #8]
 8003874:	0211      	lsls	r1, r2, #8
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	68d2      	ldr	r2, [r2, #12]
 800387a:	0912      	lsrs	r2, r2, #4
 800387c:	0452      	lsls	r2, r2, #17
 800387e:	430a      	orrs	r2, r1
 8003880:	492a      	ldr	r1, [pc, #168]	; (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003882:	4313      	orrs	r3, r2
 8003884:	610b      	str	r3, [r1, #16]
 8003886:	e027      	b.n	80038d8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d112      	bne.n	80038b4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800388e:	4b27      	ldr	r3, [pc, #156]	; (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003896:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6892      	ldr	r2, [r2, #8]
 800389e:	0211      	lsls	r1, r2, #8
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6912      	ldr	r2, [r2, #16]
 80038a4:	0852      	lsrs	r2, r2, #1
 80038a6:	3a01      	subs	r2, #1
 80038a8:	0552      	lsls	r2, r2, #21
 80038aa:	430a      	orrs	r2, r1
 80038ac:	491f      	ldr	r1, [pc, #124]	; (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	610b      	str	r3, [r1, #16]
 80038b2:	e011      	b.n	80038d8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038b4:	4b1d      	ldr	r3, [pc, #116]	; (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6892      	ldr	r2, [r2, #8]
 80038c4:	0211      	lsls	r1, r2, #8
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6952      	ldr	r2, [r2, #20]
 80038ca:	0852      	lsrs	r2, r2, #1
 80038cc:	3a01      	subs	r2, #1
 80038ce:	0652      	lsls	r2, r2, #25
 80038d0:	430a      	orrs	r2, r1
 80038d2:	4916      	ldr	r1, [pc, #88]	; (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80038d8:	4b14      	ldr	r3, [pc, #80]	; (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a13      	ldr	r2, [pc, #76]	; (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e4:	f7fd fe54 	bl	8001590 <HAL_GetTick>
 80038e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038ea:	e009      	b.n	8003900 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038ec:	f7fd fe50 	bl	8001590 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d902      	bls.n	8003900 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	73fb      	strb	r3, [r7, #15]
          break;
 80038fe:	e005      	b.n	800390c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003900:	4b0a      	ldr	r3, [pc, #40]	; (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0ef      	beq.n	80038ec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800390c:	7bfb      	ldrb	r3, [r7, #15]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d106      	bne.n	8003920 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003912:	4b06      	ldr	r3, [pc, #24]	; (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003914:	691a      	ldr	r2, [r3, #16]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	4904      	ldr	r1, [pc, #16]	; (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 800391c:	4313      	orrs	r3, r2
 800391e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003920:	7bfb      	ldrb	r3, [r7, #15]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40021000 	.word	0x40021000

08003930 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800393e:	4b6a      	ldr	r3, [pc, #424]	; (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d018      	beq.n	800397c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800394a:	4b67      	ldr	r3, [pc, #412]	; (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	f003 0203 	and.w	r2, r3, #3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	429a      	cmp	r2, r3
 8003958:	d10d      	bne.n	8003976 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
       ||
 800395e:	2b00      	cmp	r3, #0
 8003960:	d009      	beq.n	8003976 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003962:	4b61      	ldr	r3, [pc, #388]	; (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	091b      	lsrs	r3, r3, #4
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	1c5a      	adds	r2, r3, #1
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
       ||
 8003972:	429a      	cmp	r2, r3
 8003974:	d047      	beq.n	8003a06 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	73fb      	strb	r3, [r7, #15]
 800397a:	e044      	b.n	8003a06 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2b03      	cmp	r3, #3
 8003982:	d018      	beq.n	80039b6 <RCCEx_PLLSAI2_Config+0x86>
 8003984:	2b03      	cmp	r3, #3
 8003986:	d825      	bhi.n	80039d4 <RCCEx_PLLSAI2_Config+0xa4>
 8003988:	2b01      	cmp	r3, #1
 800398a:	d002      	beq.n	8003992 <RCCEx_PLLSAI2_Config+0x62>
 800398c:	2b02      	cmp	r3, #2
 800398e:	d009      	beq.n	80039a4 <RCCEx_PLLSAI2_Config+0x74>
 8003990:	e020      	b.n	80039d4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003992:	4b55      	ldr	r3, [pc, #340]	; (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d11d      	bne.n	80039da <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039a2:	e01a      	b.n	80039da <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039a4:	4b50      	ldr	r3, [pc, #320]	; (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d116      	bne.n	80039de <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039b4:	e013      	b.n	80039de <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039b6:	4b4c      	ldr	r3, [pc, #304]	; (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10f      	bne.n	80039e2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039c2:	4b49      	ldr	r3, [pc, #292]	; (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d109      	bne.n	80039e2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039d2:	e006      	b.n	80039e2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	73fb      	strb	r3, [r7, #15]
      break;
 80039d8:	e004      	b.n	80039e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039da:	bf00      	nop
 80039dc:	e002      	b.n	80039e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039de:	bf00      	nop
 80039e0:	e000      	b.n	80039e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80039e4:	7bfb      	ldrb	r3, [r7, #15]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10d      	bne.n	8003a06 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039ea:	4b3f      	ldr	r3, [pc, #252]	; (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6819      	ldr	r1, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	430b      	orrs	r3, r1
 8003a00:	4939      	ldr	r1, [pc, #228]	; (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d167      	bne.n	8003adc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a0c:	4b36      	ldr	r3, [pc, #216]	; (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a35      	ldr	r2, [pc, #212]	; (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a18:	f7fd fdba 	bl	8001590 <HAL_GetTick>
 8003a1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a1e:	e009      	b.n	8003a34 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a20:	f7fd fdb6 	bl	8001590 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d902      	bls.n	8003a34 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	73fb      	strb	r3, [r7, #15]
        break;
 8003a32:	e005      	b.n	8003a40 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a34:	4b2c      	ldr	r3, [pc, #176]	; (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1ef      	bne.n	8003a20 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d14a      	bne.n	8003adc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d111      	bne.n	8003a70 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a4c:	4b26      	ldr	r3, [pc, #152]	; (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6892      	ldr	r2, [r2, #8]
 8003a5c:	0211      	lsls	r1, r2, #8
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	68d2      	ldr	r2, [r2, #12]
 8003a62:	0912      	lsrs	r2, r2, #4
 8003a64:	0452      	lsls	r2, r2, #17
 8003a66:	430a      	orrs	r2, r1
 8003a68:	491f      	ldr	r1, [pc, #124]	; (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	614b      	str	r3, [r1, #20]
 8003a6e:	e011      	b.n	8003a94 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a70:	4b1d      	ldr	r3, [pc, #116]	; (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6892      	ldr	r2, [r2, #8]
 8003a80:	0211      	lsls	r1, r2, #8
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6912      	ldr	r2, [r2, #16]
 8003a86:	0852      	lsrs	r2, r2, #1
 8003a88:	3a01      	subs	r2, #1
 8003a8a:	0652      	lsls	r2, r2, #25
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	4916      	ldr	r1, [pc, #88]	; (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a94:	4b14      	ldr	r3, [pc, #80]	; (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a13      	ldr	r2, [pc, #76]	; (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa0:	f7fd fd76 	bl	8001590 <HAL_GetTick>
 8003aa4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003aa6:	e009      	b.n	8003abc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003aa8:	f7fd fd72 	bl	8001590 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d902      	bls.n	8003abc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	73fb      	strb	r3, [r7, #15]
          break;
 8003aba:	e005      	b.n	8003ac8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003abc:	4b0a      	ldr	r3, [pc, #40]	; (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0ef      	beq.n	8003aa8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d106      	bne.n	8003adc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ace:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad0:	695a      	ldr	r2, [r3, #20]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	4904      	ldr	r1, [pc, #16]	; (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40021000 	.word	0x40021000

08003aec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e095      	b.n	8003c2a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d108      	bne.n	8003b18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b0e:	d009      	beq.n	8003b24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	61da      	str	r2, [r3, #28]
 8003b16:	e005      	b.n	8003b24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d106      	bne.n	8003b44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7fd fa08 	bl	8000f54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2202      	movs	r2, #2
 8003b48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b64:	d902      	bls.n	8003b6c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b66:	2300      	movs	r3, #0
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	e002      	b.n	8003b72 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b70:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003b7a:	d007      	beq.n	8003b8c <HAL_SPI_Init+0xa0>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b84:	d002      	beq.n	8003b8c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bce:	ea42 0103 	orr.w	r1, r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	0c1b      	lsrs	r3, r3, #16
 8003be8:	f003 0204 	and.w	r2, r3, #4
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	f003 0310 	and.w	r3, r3, #16
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003c08:	ea42 0103 	orr.w	r1, r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b082      	sub	sp, #8
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e040      	b.n	8003cc6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d106      	bne.n	8003c5a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7fd f9c1 	bl	8000fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2224      	movs	r2, #36	; 0x24
 8003c5e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0201 	bic.w	r2, r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 f82d 	bl	8003cd0 <UART_SetConfig>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d101      	bne.n	8003c80 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e022      	b.n	8003cc6 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d002      	beq.n	8003c8e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 fad9 	bl	8004240 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c9c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f042 0201 	orr.w	r2, r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fb60 	bl	8004384 <UART_CheckIdleState>
 8003cc4:	4603      	mov	r3, r0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
	...

08003cd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cd4:	b08a      	sub	sp, #40	; 0x28
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	69db      	ldr	r3, [r3, #28]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	4ba4      	ldr	r3, [pc, #656]	; (8003f90 <UART_SetConfig+0x2c0>)
 8003d00:	4013      	ands	r3, r2
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	6812      	ldr	r2, [r2, #0]
 8003d06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d08:	430b      	orrs	r3, r1
 8003d0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a99      	ldr	r2, [pc, #612]	; (8003f94 <UART_SetConfig+0x2c4>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d004      	beq.n	8003d3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a90      	ldr	r2, [pc, #576]	; (8003f98 <UART_SetConfig+0x2c8>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d126      	bne.n	8003da8 <UART_SetConfig+0xd8>
 8003d5a:	4b90      	ldr	r3, [pc, #576]	; (8003f9c <UART_SetConfig+0x2cc>)
 8003d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d60:	f003 0303 	and.w	r3, r3, #3
 8003d64:	2b03      	cmp	r3, #3
 8003d66:	d81b      	bhi.n	8003da0 <UART_SetConfig+0xd0>
 8003d68:	a201      	add	r2, pc, #4	; (adr r2, 8003d70 <UART_SetConfig+0xa0>)
 8003d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6e:	bf00      	nop
 8003d70:	08003d81 	.word	0x08003d81
 8003d74:	08003d91 	.word	0x08003d91
 8003d78:	08003d89 	.word	0x08003d89
 8003d7c:	08003d99 	.word	0x08003d99
 8003d80:	2301      	movs	r3, #1
 8003d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d86:	e116      	b.n	8003fb6 <UART_SetConfig+0x2e6>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d8e:	e112      	b.n	8003fb6 <UART_SetConfig+0x2e6>
 8003d90:	2304      	movs	r3, #4
 8003d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d96:	e10e      	b.n	8003fb6 <UART_SetConfig+0x2e6>
 8003d98:	2308      	movs	r3, #8
 8003d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d9e:	e10a      	b.n	8003fb6 <UART_SetConfig+0x2e6>
 8003da0:	2310      	movs	r3, #16
 8003da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003da6:	e106      	b.n	8003fb6 <UART_SetConfig+0x2e6>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a7c      	ldr	r2, [pc, #496]	; (8003fa0 <UART_SetConfig+0x2d0>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d138      	bne.n	8003e24 <UART_SetConfig+0x154>
 8003db2:	4b7a      	ldr	r3, [pc, #488]	; (8003f9c <UART_SetConfig+0x2cc>)
 8003db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db8:	f003 030c 	and.w	r3, r3, #12
 8003dbc:	2b0c      	cmp	r3, #12
 8003dbe:	d82d      	bhi.n	8003e1c <UART_SetConfig+0x14c>
 8003dc0:	a201      	add	r2, pc, #4	; (adr r2, 8003dc8 <UART_SetConfig+0xf8>)
 8003dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc6:	bf00      	nop
 8003dc8:	08003dfd 	.word	0x08003dfd
 8003dcc:	08003e1d 	.word	0x08003e1d
 8003dd0:	08003e1d 	.word	0x08003e1d
 8003dd4:	08003e1d 	.word	0x08003e1d
 8003dd8:	08003e0d 	.word	0x08003e0d
 8003ddc:	08003e1d 	.word	0x08003e1d
 8003de0:	08003e1d 	.word	0x08003e1d
 8003de4:	08003e1d 	.word	0x08003e1d
 8003de8:	08003e05 	.word	0x08003e05
 8003dec:	08003e1d 	.word	0x08003e1d
 8003df0:	08003e1d 	.word	0x08003e1d
 8003df4:	08003e1d 	.word	0x08003e1d
 8003df8:	08003e15 	.word	0x08003e15
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e02:	e0d8      	b.n	8003fb6 <UART_SetConfig+0x2e6>
 8003e04:	2302      	movs	r3, #2
 8003e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e0a:	e0d4      	b.n	8003fb6 <UART_SetConfig+0x2e6>
 8003e0c:	2304      	movs	r3, #4
 8003e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e12:	e0d0      	b.n	8003fb6 <UART_SetConfig+0x2e6>
 8003e14:	2308      	movs	r3, #8
 8003e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e1a:	e0cc      	b.n	8003fb6 <UART_SetConfig+0x2e6>
 8003e1c:	2310      	movs	r3, #16
 8003e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e22:	e0c8      	b.n	8003fb6 <UART_SetConfig+0x2e6>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a5e      	ldr	r2, [pc, #376]	; (8003fa4 <UART_SetConfig+0x2d4>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d125      	bne.n	8003e7a <UART_SetConfig+0x1aa>
 8003e2e:	4b5b      	ldr	r3, [pc, #364]	; (8003f9c <UART_SetConfig+0x2cc>)
 8003e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e34:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e38:	2b30      	cmp	r3, #48	; 0x30
 8003e3a:	d016      	beq.n	8003e6a <UART_SetConfig+0x19a>
 8003e3c:	2b30      	cmp	r3, #48	; 0x30
 8003e3e:	d818      	bhi.n	8003e72 <UART_SetConfig+0x1a2>
 8003e40:	2b20      	cmp	r3, #32
 8003e42:	d00a      	beq.n	8003e5a <UART_SetConfig+0x18a>
 8003e44:	2b20      	cmp	r3, #32
 8003e46:	d814      	bhi.n	8003e72 <UART_SetConfig+0x1a2>
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <UART_SetConfig+0x182>
 8003e4c:	2b10      	cmp	r3, #16
 8003e4e:	d008      	beq.n	8003e62 <UART_SetConfig+0x192>
 8003e50:	e00f      	b.n	8003e72 <UART_SetConfig+0x1a2>
 8003e52:	2300      	movs	r3, #0
 8003e54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e58:	e0ad      	b.n	8003fb6 <UART_SetConfig+0x2e6>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e60:	e0a9      	b.n	8003fb6 <UART_SetConfig+0x2e6>
 8003e62:	2304      	movs	r3, #4
 8003e64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e68:	e0a5      	b.n	8003fb6 <UART_SetConfig+0x2e6>
 8003e6a:	2308      	movs	r3, #8
 8003e6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e70:	e0a1      	b.n	8003fb6 <UART_SetConfig+0x2e6>
 8003e72:	2310      	movs	r3, #16
 8003e74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e78:	e09d      	b.n	8003fb6 <UART_SetConfig+0x2e6>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a4a      	ldr	r2, [pc, #296]	; (8003fa8 <UART_SetConfig+0x2d8>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d125      	bne.n	8003ed0 <UART_SetConfig+0x200>
 8003e84:	4b45      	ldr	r3, [pc, #276]	; (8003f9c <UART_SetConfig+0x2cc>)
 8003e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e8e:	2bc0      	cmp	r3, #192	; 0xc0
 8003e90:	d016      	beq.n	8003ec0 <UART_SetConfig+0x1f0>
 8003e92:	2bc0      	cmp	r3, #192	; 0xc0
 8003e94:	d818      	bhi.n	8003ec8 <UART_SetConfig+0x1f8>
 8003e96:	2b80      	cmp	r3, #128	; 0x80
 8003e98:	d00a      	beq.n	8003eb0 <UART_SetConfig+0x1e0>
 8003e9a:	2b80      	cmp	r3, #128	; 0x80
 8003e9c:	d814      	bhi.n	8003ec8 <UART_SetConfig+0x1f8>
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <UART_SetConfig+0x1d8>
 8003ea2:	2b40      	cmp	r3, #64	; 0x40
 8003ea4:	d008      	beq.n	8003eb8 <UART_SetConfig+0x1e8>
 8003ea6:	e00f      	b.n	8003ec8 <UART_SetConfig+0x1f8>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eae:	e082      	b.n	8003fb6 <UART_SetConfig+0x2e6>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eb6:	e07e      	b.n	8003fb6 <UART_SetConfig+0x2e6>
 8003eb8:	2304      	movs	r3, #4
 8003eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ebe:	e07a      	b.n	8003fb6 <UART_SetConfig+0x2e6>
 8003ec0:	2308      	movs	r3, #8
 8003ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ec6:	e076      	b.n	8003fb6 <UART_SetConfig+0x2e6>
 8003ec8:	2310      	movs	r3, #16
 8003eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ece:	e072      	b.n	8003fb6 <UART_SetConfig+0x2e6>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a35      	ldr	r2, [pc, #212]	; (8003fac <UART_SetConfig+0x2dc>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d12a      	bne.n	8003f30 <UART_SetConfig+0x260>
 8003eda:	4b30      	ldr	r3, [pc, #192]	; (8003f9c <UART_SetConfig+0x2cc>)
 8003edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ee8:	d01a      	beq.n	8003f20 <UART_SetConfig+0x250>
 8003eea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eee:	d81b      	bhi.n	8003f28 <UART_SetConfig+0x258>
 8003ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ef4:	d00c      	beq.n	8003f10 <UART_SetConfig+0x240>
 8003ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003efa:	d815      	bhi.n	8003f28 <UART_SetConfig+0x258>
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d003      	beq.n	8003f08 <UART_SetConfig+0x238>
 8003f00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f04:	d008      	beq.n	8003f18 <UART_SetConfig+0x248>
 8003f06:	e00f      	b.n	8003f28 <UART_SetConfig+0x258>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f0e:	e052      	b.n	8003fb6 <UART_SetConfig+0x2e6>
 8003f10:	2302      	movs	r3, #2
 8003f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f16:	e04e      	b.n	8003fb6 <UART_SetConfig+0x2e6>
 8003f18:	2304      	movs	r3, #4
 8003f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f1e:	e04a      	b.n	8003fb6 <UART_SetConfig+0x2e6>
 8003f20:	2308      	movs	r3, #8
 8003f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f26:	e046      	b.n	8003fb6 <UART_SetConfig+0x2e6>
 8003f28:	2310      	movs	r3, #16
 8003f2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f2e:	e042      	b.n	8003fb6 <UART_SetConfig+0x2e6>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a17      	ldr	r2, [pc, #92]	; (8003f94 <UART_SetConfig+0x2c4>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d13a      	bne.n	8003fb0 <UART_SetConfig+0x2e0>
 8003f3a:	4b18      	ldr	r3, [pc, #96]	; (8003f9c <UART_SetConfig+0x2cc>)
 8003f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f48:	d01a      	beq.n	8003f80 <UART_SetConfig+0x2b0>
 8003f4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f4e:	d81b      	bhi.n	8003f88 <UART_SetConfig+0x2b8>
 8003f50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f54:	d00c      	beq.n	8003f70 <UART_SetConfig+0x2a0>
 8003f56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f5a:	d815      	bhi.n	8003f88 <UART_SetConfig+0x2b8>
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d003      	beq.n	8003f68 <UART_SetConfig+0x298>
 8003f60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f64:	d008      	beq.n	8003f78 <UART_SetConfig+0x2a8>
 8003f66:	e00f      	b.n	8003f88 <UART_SetConfig+0x2b8>
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f6e:	e022      	b.n	8003fb6 <UART_SetConfig+0x2e6>
 8003f70:	2302      	movs	r3, #2
 8003f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f76:	e01e      	b.n	8003fb6 <UART_SetConfig+0x2e6>
 8003f78:	2304      	movs	r3, #4
 8003f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f7e:	e01a      	b.n	8003fb6 <UART_SetConfig+0x2e6>
 8003f80:	2308      	movs	r3, #8
 8003f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f86:	e016      	b.n	8003fb6 <UART_SetConfig+0x2e6>
 8003f88:	2310      	movs	r3, #16
 8003f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f8e:	e012      	b.n	8003fb6 <UART_SetConfig+0x2e6>
 8003f90:	efff69f3 	.word	0xefff69f3
 8003f94:	40008000 	.word	0x40008000
 8003f98:	40013800 	.word	0x40013800
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	40004400 	.word	0x40004400
 8003fa4:	40004800 	.word	0x40004800
 8003fa8:	40004c00 	.word	0x40004c00
 8003fac:	40005000 	.word	0x40005000
 8003fb0:	2310      	movs	r3, #16
 8003fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a9f      	ldr	r2, [pc, #636]	; (8004238 <UART_SetConfig+0x568>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d17a      	bne.n	80040b6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d824      	bhi.n	8004012 <UART_SetConfig+0x342>
 8003fc8:	a201      	add	r2, pc, #4	; (adr r2, 8003fd0 <UART_SetConfig+0x300>)
 8003fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fce:	bf00      	nop
 8003fd0:	08003ff5 	.word	0x08003ff5
 8003fd4:	08004013 	.word	0x08004013
 8003fd8:	08003ffd 	.word	0x08003ffd
 8003fdc:	08004013 	.word	0x08004013
 8003fe0:	08004003 	.word	0x08004003
 8003fe4:	08004013 	.word	0x08004013
 8003fe8:	08004013 	.word	0x08004013
 8003fec:	08004013 	.word	0x08004013
 8003ff0:	0800400b 	.word	0x0800400b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ff4:	f7ff f822 	bl	800303c <HAL_RCC_GetPCLK1Freq>
 8003ff8:	61f8      	str	r0, [r7, #28]
        break;
 8003ffa:	e010      	b.n	800401e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ffc:	4b8f      	ldr	r3, [pc, #572]	; (800423c <UART_SetConfig+0x56c>)
 8003ffe:	61fb      	str	r3, [r7, #28]
        break;
 8004000:	e00d      	b.n	800401e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004002:	f7fe ff83 	bl	8002f0c <HAL_RCC_GetSysClockFreq>
 8004006:	61f8      	str	r0, [r7, #28]
        break;
 8004008:	e009      	b.n	800401e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800400a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800400e:	61fb      	str	r3, [r7, #28]
        break;
 8004010:	e005      	b.n	800401e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004012:	2300      	movs	r3, #0
 8004014:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800401c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 80fb 	beq.w	800421c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	4413      	add	r3, r2
 8004030:	69fa      	ldr	r2, [r7, #28]
 8004032:	429a      	cmp	r2, r3
 8004034:	d305      	bcc.n	8004042 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800403c:	69fa      	ldr	r2, [r7, #28]
 800403e:	429a      	cmp	r2, r3
 8004040:	d903      	bls.n	800404a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004048:	e0e8      	b.n	800421c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	2200      	movs	r2, #0
 800404e:	461c      	mov	r4, r3
 8004050:	4615      	mov	r5, r2
 8004052:	f04f 0200 	mov.w	r2, #0
 8004056:	f04f 0300 	mov.w	r3, #0
 800405a:	022b      	lsls	r3, r5, #8
 800405c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004060:	0222      	lsls	r2, r4, #8
 8004062:	68f9      	ldr	r1, [r7, #12]
 8004064:	6849      	ldr	r1, [r1, #4]
 8004066:	0849      	lsrs	r1, r1, #1
 8004068:	2000      	movs	r0, #0
 800406a:	4688      	mov	r8, r1
 800406c:	4681      	mov	r9, r0
 800406e:	eb12 0a08 	adds.w	sl, r2, r8
 8004072:	eb43 0b09 	adc.w	fp, r3, r9
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	603b      	str	r3, [r7, #0]
 800407e:	607a      	str	r2, [r7, #4]
 8004080:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004084:	4650      	mov	r0, sl
 8004086:	4659      	mov	r1, fp
 8004088:	f7fc f89e 	bl	80001c8 <__aeabi_uldivmod>
 800408c:	4602      	mov	r2, r0
 800408e:	460b      	mov	r3, r1
 8004090:	4613      	mov	r3, r2
 8004092:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800409a:	d308      	bcc.n	80040ae <UART_SetConfig+0x3de>
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040a2:	d204      	bcs.n	80040ae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	60da      	str	r2, [r3, #12]
 80040ac:	e0b6      	b.n	800421c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80040b4:	e0b2      	b.n	800421c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040be:	d15e      	bne.n	800417e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80040c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	d828      	bhi.n	800411a <UART_SetConfig+0x44a>
 80040c8:	a201      	add	r2, pc, #4	; (adr r2, 80040d0 <UART_SetConfig+0x400>)
 80040ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ce:	bf00      	nop
 80040d0:	080040f5 	.word	0x080040f5
 80040d4:	080040fd 	.word	0x080040fd
 80040d8:	08004105 	.word	0x08004105
 80040dc:	0800411b 	.word	0x0800411b
 80040e0:	0800410b 	.word	0x0800410b
 80040e4:	0800411b 	.word	0x0800411b
 80040e8:	0800411b 	.word	0x0800411b
 80040ec:	0800411b 	.word	0x0800411b
 80040f0:	08004113 	.word	0x08004113
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040f4:	f7fe ffa2 	bl	800303c <HAL_RCC_GetPCLK1Freq>
 80040f8:	61f8      	str	r0, [r7, #28]
        break;
 80040fa:	e014      	b.n	8004126 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040fc:	f7fe ffb4 	bl	8003068 <HAL_RCC_GetPCLK2Freq>
 8004100:	61f8      	str	r0, [r7, #28]
        break;
 8004102:	e010      	b.n	8004126 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004104:	4b4d      	ldr	r3, [pc, #308]	; (800423c <UART_SetConfig+0x56c>)
 8004106:	61fb      	str	r3, [r7, #28]
        break;
 8004108:	e00d      	b.n	8004126 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800410a:	f7fe feff 	bl	8002f0c <HAL_RCC_GetSysClockFreq>
 800410e:	61f8      	str	r0, [r7, #28]
        break;
 8004110:	e009      	b.n	8004126 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004116:	61fb      	str	r3, [r7, #28]
        break;
 8004118:	e005      	b.n	8004126 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800411a:	2300      	movs	r3, #0
 800411c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004124:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d077      	beq.n	800421c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	005a      	lsls	r2, r3, #1
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	085b      	lsrs	r3, r3, #1
 8004136:	441a      	add	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004140:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	2b0f      	cmp	r3, #15
 8004146:	d916      	bls.n	8004176 <UART_SetConfig+0x4a6>
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800414e:	d212      	bcs.n	8004176 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	b29b      	uxth	r3, r3
 8004154:	f023 030f 	bic.w	r3, r3, #15
 8004158:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	085b      	lsrs	r3, r3, #1
 800415e:	b29b      	uxth	r3, r3
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	b29a      	uxth	r2, r3
 8004166:	8afb      	ldrh	r3, [r7, #22]
 8004168:	4313      	orrs	r3, r2
 800416a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	8afa      	ldrh	r2, [r7, #22]
 8004172:	60da      	str	r2, [r3, #12]
 8004174:	e052      	b.n	800421c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800417c:	e04e      	b.n	800421c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800417e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004182:	2b08      	cmp	r3, #8
 8004184:	d827      	bhi.n	80041d6 <UART_SetConfig+0x506>
 8004186:	a201      	add	r2, pc, #4	; (adr r2, 800418c <UART_SetConfig+0x4bc>)
 8004188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418c:	080041b1 	.word	0x080041b1
 8004190:	080041b9 	.word	0x080041b9
 8004194:	080041c1 	.word	0x080041c1
 8004198:	080041d7 	.word	0x080041d7
 800419c:	080041c7 	.word	0x080041c7
 80041a0:	080041d7 	.word	0x080041d7
 80041a4:	080041d7 	.word	0x080041d7
 80041a8:	080041d7 	.word	0x080041d7
 80041ac:	080041cf 	.word	0x080041cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041b0:	f7fe ff44 	bl	800303c <HAL_RCC_GetPCLK1Freq>
 80041b4:	61f8      	str	r0, [r7, #28]
        break;
 80041b6:	e014      	b.n	80041e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041b8:	f7fe ff56 	bl	8003068 <HAL_RCC_GetPCLK2Freq>
 80041bc:	61f8      	str	r0, [r7, #28]
        break;
 80041be:	e010      	b.n	80041e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041c0:	4b1e      	ldr	r3, [pc, #120]	; (800423c <UART_SetConfig+0x56c>)
 80041c2:	61fb      	str	r3, [r7, #28]
        break;
 80041c4:	e00d      	b.n	80041e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041c6:	f7fe fea1 	bl	8002f0c <HAL_RCC_GetSysClockFreq>
 80041ca:	61f8      	str	r0, [r7, #28]
        break;
 80041cc:	e009      	b.n	80041e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041d2:	61fb      	str	r3, [r7, #28]
        break;
 80041d4:	e005      	b.n	80041e2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80041e0:	bf00      	nop
    }

    if (pclk != 0U)
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d019      	beq.n	800421c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	085a      	lsrs	r2, r3, #1
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	441a      	add	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	2b0f      	cmp	r3, #15
 8004200:	d909      	bls.n	8004216 <UART_SetConfig+0x546>
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004208:	d205      	bcs.n	8004216 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	b29a      	uxth	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	60da      	str	r2, [r3, #12]
 8004214:	e002      	b.n	800421c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004228:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800422c:	4618      	mov	r0, r3
 800422e:	3728      	adds	r7, #40	; 0x28
 8004230:	46bd      	mov	sp, r7
 8004232:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004236:	bf00      	nop
 8004238:	40008000 	.word	0x40008000
 800423c:	00f42400 	.word	0x00f42400

08004240 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00a      	beq.n	800426a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00a      	beq.n	800428c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	430a      	orrs	r2, r1
 800428a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00a      	beq.n	80042ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b2:	f003 0308 	and.w	r3, r3, #8
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00a      	beq.n	80042d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	430a      	orrs	r2, r1
 80042ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	f003 0310 	and.w	r3, r3, #16
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00a      	beq.n	80042f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f6:	f003 0320 	and.w	r3, r3, #32
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00a      	beq.n	8004314 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431c:	2b00      	cmp	r3, #0
 800431e:	d01a      	beq.n	8004356 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800433e:	d10a      	bne.n	8004356 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00a      	beq.n	8004378 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	605a      	str	r2, [r3, #4]
  }
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af02      	add	r7, sp, #8
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004394:	f7fd f8fc 	bl	8001590 <HAL_GetTick>
 8004398:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0308 	and.w	r3, r3, #8
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d10e      	bne.n	80043c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f82d 	bl	8004416 <UART_WaitOnFlagUntilTimeout>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e023      	b.n	800440e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0304 	and.w	r3, r3, #4
 80043d0:	2b04      	cmp	r3, #4
 80043d2:	d10e      	bne.n	80043f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f817 	bl	8004416 <UART_WaitOnFlagUntilTimeout>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e00d      	b.n	800440e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2220      	movs	r2, #32
 80043f6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2220      	movs	r2, #32
 80043fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b09c      	sub	sp, #112	; 0x70
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	603b      	str	r3, [r7, #0]
 8004422:	4613      	mov	r3, r2
 8004424:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004426:	e0a5      	b.n	8004574 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004428:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800442a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800442e:	f000 80a1 	beq.w	8004574 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004432:	f7fd f8ad 	bl	8001590 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800443e:	429a      	cmp	r2, r3
 8004440:	d302      	bcc.n	8004448 <UART_WaitOnFlagUntilTimeout+0x32>
 8004442:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004444:	2b00      	cmp	r3, #0
 8004446:	d13e      	bne.n	80044c6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004450:	e853 3f00 	ldrex	r3, [r3]
 8004454:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004458:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800445c:	667b      	str	r3, [r7, #100]	; 0x64
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004466:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004468:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800446c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800446e:	e841 2300 	strex	r3, r2, [r1]
 8004472:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1e6      	bne.n	8004448 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3308      	adds	r3, #8
 8004480:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004484:	e853 3f00 	ldrex	r3, [r3]
 8004488:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800448a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448c:	f023 0301 	bic.w	r3, r3, #1
 8004490:	663b      	str	r3, [r7, #96]	; 0x60
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	3308      	adds	r3, #8
 8004498:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800449a:	64ba      	str	r2, [r7, #72]	; 0x48
 800449c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80044a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044a2:	e841 2300 	strex	r3, r2, [r1]
 80044a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80044a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1e5      	bne.n	800447a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2220      	movs	r2, #32
 80044b2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2220      	movs	r2, #32
 80044b8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e067      	b.n	8004596 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d04f      	beq.n	8004574 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044e2:	d147      	bne.n	8004574 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044ec:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f6:	e853 3f00 	ldrex	r3, [r3]
 80044fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004502:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	461a      	mov	r2, r3
 800450a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800450c:	637b      	str	r3, [r7, #52]	; 0x34
 800450e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004510:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004514:	e841 2300 	strex	r3, r2, [r1]
 8004518:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800451a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1e6      	bne.n	80044ee <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	3308      	adds	r3, #8
 8004526:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	e853 3f00 	ldrex	r3, [r3]
 800452e:	613b      	str	r3, [r7, #16]
   return(result);
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f023 0301 	bic.w	r3, r3, #1
 8004536:	66bb      	str	r3, [r7, #104]	; 0x68
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3308      	adds	r3, #8
 800453e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004540:	623a      	str	r2, [r7, #32]
 8004542:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004544:	69f9      	ldr	r1, [r7, #28]
 8004546:	6a3a      	ldr	r2, [r7, #32]
 8004548:	e841 2300 	strex	r3, r2, [r1]
 800454c:	61bb      	str	r3, [r7, #24]
   return(result);
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1e5      	bne.n	8004520 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2220      	movs	r2, #32
 8004558:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2220      	movs	r2, #32
 800455e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2220      	movs	r2, #32
 8004564:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e010      	b.n	8004596 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	69da      	ldr	r2, [r3, #28]
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	4013      	ands	r3, r2
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	429a      	cmp	r2, r3
 8004582:	bf0c      	ite	eq
 8004584:	2301      	moveq	r3, #1
 8004586:	2300      	movne	r3, #0
 8004588:	b2db      	uxtb	r3, r3
 800458a:	461a      	mov	r2, r3
 800458c:	79fb      	ldrb	r3, [r7, #7]
 800458e:	429a      	cmp	r2, r3
 8004590:	f43f af4a 	beq.w	8004428 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3770      	adds	r7, #112	; 0x70
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800459e:	b084      	sub	sp, #16
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	f107 001c 	add.w	r0, r7, #28
 80045ac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 fa6f 	bl	8004aa0 <USB_CoreReset>
 80045c2:	4603      	mov	r3, r0
 80045c4:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80045c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d106      	bne.n	80045da <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	639a      	str	r2, [r3, #56]	; 0x38
 80045d8:	e005      	b.n	80045e6 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80045e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045f2:	b004      	add	sp, #16
 80045f4:	4770      	bx	lr

080045f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f023 0201 	bic.w	r2, r3, #1
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	460b      	mov	r3, r1
 8004622:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004634:	78fb      	ldrb	r3, [r7, #3]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d115      	bne.n	8004666 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004646:	2001      	movs	r0, #1
 8004648:	f7fc ffae 	bl	80015a8 <HAL_Delay>
      ms++;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	3301      	adds	r3, #1
 8004650:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 fa16 	bl	8004a84 <USB_GetMode>
 8004658:	4603      	mov	r3, r0
 800465a:	2b01      	cmp	r3, #1
 800465c:	d01e      	beq.n	800469c <USB_SetCurrentMode+0x84>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2b31      	cmp	r3, #49	; 0x31
 8004662:	d9f0      	bls.n	8004646 <USB_SetCurrentMode+0x2e>
 8004664:	e01a      	b.n	800469c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004666:	78fb      	ldrb	r3, [r7, #3]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d115      	bne.n	8004698 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004678:	2001      	movs	r0, #1
 800467a:	f7fc ff95 	bl	80015a8 <HAL_Delay>
      ms++;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	3301      	adds	r3, #1
 8004682:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f9fd 	bl	8004a84 <USB_GetMode>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d005      	beq.n	800469c <USB_SetCurrentMode+0x84>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2b31      	cmp	r3, #49	; 0x31
 8004694:	d9f0      	bls.n	8004678 <USB_SetCurrentMode+0x60>
 8004696:	e001      	b.n	800469c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e005      	b.n	80046a8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2b32      	cmp	r3, #50	; 0x32
 80046a0:	d101      	bne.n	80046a6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e000      	b.n	80046a8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046b0:	b084      	sub	sp, #16
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b086      	sub	sp, #24
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
 80046ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80046be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80046c2:	2300      	movs	r3, #0
 80046c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80046ca:	2300      	movs	r3, #0
 80046cc:	613b      	str	r3, [r7, #16]
 80046ce:	e009      	b.n	80046e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	3340      	adds	r3, #64	; 0x40
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4413      	add	r3, r2
 80046da:	2200      	movs	r2, #0
 80046dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	3301      	adds	r3, #1
 80046e2:	613b      	str	r3, [r7, #16]
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	2b0e      	cmp	r3, #14
 80046e8:	d9f2      	bls.n	80046d0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80046ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d11c      	bne.n	800472a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046fe:	f043 0302 	orr.w	r3, r3, #2
 8004702:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004708:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	601a      	str	r2, [r3, #0]
 8004728:	e005      	b.n	8004736 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800473c:	461a      	mov	r2, r3
 800473e:	2300      	movs	r3, #0
 8004740:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004748:	4619      	mov	r1, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004750:	461a      	mov	r2, r3
 8004752:	680b      	ldr	r3, [r1, #0]
 8004754:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004756:	2103      	movs	r1, #3
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f959 	bl	8004a10 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800475e:	2110      	movs	r1, #16
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 f8f1 	bl	8004948 <USB_FlushTxFifo>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f91d 	bl	80049b0 <USB_FlushRxFifo>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004786:	461a      	mov	r2, r3
 8004788:	2300      	movs	r3, #0
 800478a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004792:	461a      	mov	r2, r3
 8004794:	2300      	movs	r3, #0
 8004796:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800479e:	461a      	mov	r2, r3
 80047a0:	2300      	movs	r3, #0
 80047a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047a4:	2300      	movs	r3, #0
 80047a6:	613b      	str	r3, [r7, #16]
 80047a8:	e043      	b.n	8004832 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	015a      	lsls	r2, r3, #5
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	4413      	add	r3, r2
 80047b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047c0:	d118      	bne.n	80047f4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10a      	bne.n	80047de <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	015a      	lsls	r2, r3, #5
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d4:	461a      	mov	r2, r3
 80047d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047da:	6013      	str	r3, [r2, #0]
 80047dc:	e013      	b.n	8004806 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	015a      	lsls	r2, r3, #5
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ea:	461a      	mov	r2, r3
 80047ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047f0:	6013      	str	r3, [r2, #0]
 80047f2:	e008      	b.n	8004806 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	015a      	lsls	r2, r3, #5
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4413      	add	r3, r2
 80047fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004800:	461a      	mov	r2, r3
 8004802:	2300      	movs	r3, #0
 8004804:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4413      	add	r3, r2
 800480e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004812:	461a      	mov	r2, r3
 8004814:	2300      	movs	r3, #0
 8004816:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4413      	add	r3, r2
 8004820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004824:	461a      	mov	r2, r3
 8004826:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800482a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	3301      	adds	r3, #1
 8004830:	613b      	str	r3, [r7, #16]
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	429a      	cmp	r2, r3
 8004838:	d3b7      	bcc.n	80047aa <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800483a:	2300      	movs	r3, #0
 800483c:	613b      	str	r3, [r7, #16]
 800483e:	e043      	b.n	80048c8 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4413      	add	r3, r2
 8004848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004852:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004856:	d118      	bne.n	800488a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10a      	bne.n	8004874 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	4413      	add	r3, r2
 8004866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800486a:	461a      	mov	r2, r3
 800486c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004870:	6013      	str	r3, [r2, #0]
 8004872:	e013      	b.n	800489c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	015a      	lsls	r2, r3, #5
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4413      	add	r3, r2
 800487c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004880:	461a      	mov	r2, r3
 8004882:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004886:	6013      	str	r3, [r2, #0]
 8004888:	e008      	b.n	800489c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	015a      	lsls	r2, r3, #5
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	4413      	add	r3, r2
 8004892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004896:	461a      	mov	r2, r3
 8004898:	2300      	movs	r3, #0
 800489a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	015a      	lsls	r2, r3, #5
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a8:	461a      	mov	r2, r3
 80048aa:	2300      	movs	r3, #0
 80048ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ba:	461a      	mov	r2, r3
 80048bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	3301      	adds	r3, #1
 80048c6:	613b      	str	r3, [r7, #16]
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d3b7      	bcc.n	8004840 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80048f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	f043 0210 	orr.w	r2, r3, #16
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699a      	ldr	r2, [r3, #24]
 8004902:	4b10      	ldr	r3, [pc, #64]	; (8004944 <USB_DevInit+0x294>)
 8004904:	4313      	orrs	r3, r2
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800490a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800490c:	2b00      	cmp	r3, #0
 800490e:	d005      	beq.n	800491c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	f043 0208 	orr.w	r2, r3, #8
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800491c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800491e:	2b01      	cmp	r3, #1
 8004920:	d107      	bne.n	8004932 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800492a:	f043 0304 	orr.w	r3, r3, #4
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004932:	7dfb      	ldrb	r3, [r7, #23]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3718      	adds	r7, #24
 8004938:	46bd      	mov	sp, r7
 800493a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800493e:	b004      	add	sp, #16
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	803c3800 	.word	0x803c3800

08004948 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004952:	2300      	movs	r3, #0
 8004954:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	3301      	adds	r3, #1
 800495a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4a13      	ldr	r2, [pc, #76]	; (80049ac <USB_FlushTxFifo+0x64>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d901      	bls.n	8004968 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e01b      	b.n	80049a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	2b00      	cmp	r3, #0
 800496e:	daf2      	bge.n	8004956 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004970:	2300      	movs	r3, #0
 8004972:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	019b      	lsls	r3, r3, #6
 8004978:	f043 0220 	orr.w	r2, r3, #32
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	3301      	adds	r3, #1
 8004984:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	4a08      	ldr	r2, [pc, #32]	; (80049ac <USB_FlushTxFifo+0x64>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d901      	bls.n	8004992 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e006      	b.n	80049a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0320 	and.w	r3, r3, #32
 800499a:	2b20      	cmp	r3, #32
 800499c:	d0f0      	beq.n	8004980 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	00030d40 	.word	0x00030d40

080049b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049b8:	2300      	movs	r3, #0
 80049ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	3301      	adds	r3, #1
 80049c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4a11      	ldr	r2, [pc, #68]	; (8004a0c <USB_FlushRxFifo+0x5c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d901      	bls.n	80049ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e018      	b.n	8004a00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	daf2      	bge.n	80049bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2210      	movs	r2, #16
 80049de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	3301      	adds	r3, #1
 80049e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	4a08      	ldr	r2, [pc, #32]	; (8004a0c <USB_FlushRxFifo+0x5c>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d901      	bls.n	80049f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e006      	b.n	8004a00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	f003 0310 	and.w	r3, r3, #16
 80049fa:	2b10      	cmp	r3, #16
 80049fc:	d0f0      	beq.n	80049e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	00030d40 	.word	0x00030d40

08004a10 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	460b      	mov	r3, r1
 8004a1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	78fb      	ldrb	r3, [r7, #3]
 8004a2a:	68f9      	ldr	r1, [r7, #12]
 8004a2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a30:	4313      	orrs	r3, r2
 8004a32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b085      	sub	sp, #20
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004a5c:	f023 0303 	bic.w	r3, r3, #3
 8004a60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a70:	f043 0302 	orr.w	r3, r3, #2
 8004a74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3714      	adds	r7, #20
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	f003 0301 	and.w	r3, r3, #1
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4a13      	ldr	r2, [pc, #76]	; (8004b04 <USB_CoreReset+0x64>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d901      	bls.n	8004abe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e01b      	b.n	8004af6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	daf2      	bge.n	8004aac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	f043 0201 	orr.w	r2, r3, #1
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4a09      	ldr	r2, [pc, #36]	; (8004b04 <USB_CoreReset+0x64>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d901      	bls.n	8004ae8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e006      	b.n	8004af6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d0f0      	beq.n	8004ad6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	00030d40 	.word	0x00030d40

08004b08 <__errno>:
 8004b08:	4b01      	ldr	r3, [pc, #4]	; (8004b10 <__errno+0x8>)
 8004b0a:	6818      	ldr	r0, [r3, #0]
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	2000000c 	.word	0x2000000c

08004b14 <__libc_init_array>:
 8004b14:	b570      	push	{r4, r5, r6, lr}
 8004b16:	4d0d      	ldr	r5, [pc, #52]	; (8004b4c <__libc_init_array+0x38>)
 8004b18:	4c0d      	ldr	r4, [pc, #52]	; (8004b50 <__libc_init_array+0x3c>)
 8004b1a:	1b64      	subs	r4, r4, r5
 8004b1c:	10a4      	asrs	r4, r4, #2
 8004b1e:	2600      	movs	r6, #0
 8004b20:	42a6      	cmp	r6, r4
 8004b22:	d109      	bne.n	8004b38 <__libc_init_array+0x24>
 8004b24:	4d0b      	ldr	r5, [pc, #44]	; (8004b54 <__libc_init_array+0x40>)
 8004b26:	4c0c      	ldr	r4, [pc, #48]	; (8004b58 <__libc_init_array+0x44>)
 8004b28:	f000 fd1e 	bl	8005568 <_init>
 8004b2c:	1b64      	subs	r4, r4, r5
 8004b2e:	10a4      	asrs	r4, r4, #2
 8004b30:	2600      	movs	r6, #0
 8004b32:	42a6      	cmp	r6, r4
 8004b34:	d105      	bne.n	8004b42 <__libc_init_array+0x2e>
 8004b36:	bd70      	pop	{r4, r5, r6, pc}
 8004b38:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b3c:	4798      	blx	r3
 8004b3e:	3601      	adds	r6, #1
 8004b40:	e7ee      	b.n	8004b20 <__libc_init_array+0xc>
 8004b42:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b46:	4798      	blx	r3
 8004b48:	3601      	adds	r6, #1
 8004b4a:	e7f2      	b.n	8004b32 <__libc_init_array+0x1e>
 8004b4c:	08005654 	.word	0x08005654
 8004b50:	08005654 	.word	0x08005654
 8004b54:	08005654 	.word	0x08005654
 8004b58:	08005658 	.word	0x08005658

08004b5c <memset>:
 8004b5c:	4402      	add	r2, r0
 8004b5e:	4603      	mov	r3, r0
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d100      	bne.n	8004b66 <memset+0xa>
 8004b64:	4770      	bx	lr
 8004b66:	f803 1b01 	strb.w	r1, [r3], #1
 8004b6a:	e7f9      	b.n	8004b60 <memset+0x4>

08004b6c <_puts_r>:
 8004b6c:	b570      	push	{r4, r5, r6, lr}
 8004b6e:	460e      	mov	r6, r1
 8004b70:	4605      	mov	r5, r0
 8004b72:	b118      	cbz	r0, 8004b7c <_puts_r+0x10>
 8004b74:	6983      	ldr	r3, [r0, #24]
 8004b76:	b90b      	cbnz	r3, 8004b7c <_puts_r+0x10>
 8004b78:	f000 fa48 	bl	800500c <__sinit>
 8004b7c:	69ab      	ldr	r3, [r5, #24]
 8004b7e:	68ac      	ldr	r4, [r5, #8]
 8004b80:	b913      	cbnz	r3, 8004b88 <_puts_r+0x1c>
 8004b82:	4628      	mov	r0, r5
 8004b84:	f000 fa42 	bl	800500c <__sinit>
 8004b88:	4b2c      	ldr	r3, [pc, #176]	; (8004c3c <_puts_r+0xd0>)
 8004b8a:	429c      	cmp	r4, r3
 8004b8c:	d120      	bne.n	8004bd0 <_puts_r+0x64>
 8004b8e:	686c      	ldr	r4, [r5, #4]
 8004b90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b92:	07db      	lsls	r3, r3, #31
 8004b94:	d405      	bmi.n	8004ba2 <_puts_r+0x36>
 8004b96:	89a3      	ldrh	r3, [r4, #12]
 8004b98:	0598      	lsls	r0, r3, #22
 8004b9a:	d402      	bmi.n	8004ba2 <_puts_r+0x36>
 8004b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b9e:	f000 fad3 	bl	8005148 <__retarget_lock_acquire_recursive>
 8004ba2:	89a3      	ldrh	r3, [r4, #12]
 8004ba4:	0719      	lsls	r1, r3, #28
 8004ba6:	d51d      	bpl.n	8004be4 <_puts_r+0x78>
 8004ba8:	6923      	ldr	r3, [r4, #16]
 8004baa:	b1db      	cbz	r3, 8004be4 <_puts_r+0x78>
 8004bac:	3e01      	subs	r6, #1
 8004bae:	68a3      	ldr	r3, [r4, #8]
 8004bb0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	60a3      	str	r3, [r4, #8]
 8004bb8:	bb39      	cbnz	r1, 8004c0a <_puts_r+0x9e>
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	da38      	bge.n	8004c30 <_puts_r+0xc4>
 8004bbe:	4622      	mov	r2, r4
 8004bc0:	210a      	movs	r1, #10
 8004bc2:	4628      	mov	r0, r5
 8004bc4:	f000 f848 	bl	8004c58 <__swbuf_r>
 8004bc8:	3001      	adds	r0, #1
 8004bca:	d011      	beq.n	8004bf0 <_puts_r+0x84>
 8004bcc:	250a      	movs	r5, #10
 8004bce:	e011      	b.n	8004bf4 <_puts_r+0x88>
 8004bd0:	4b1b      	ldr	r3, [pc, #108]	; (8004c40 <_puts_r+0xd4>)
 8004bd2:	429c      	cmp	r4, r3
 8004bd4:	d101      	bne.n	8004bda <_puts_r+0x6e>
 8004bd6:	68ac      	ldr	r4, [r5, #8]
 8004bd8:	e7da      	b.n	8004b90 <_puts_r+0x24>
 8004bda:	4b1a      	ldr	r3, [pc, #104]	; (8004c44 <_puts_r+0xd8>)
 8004bdc:	429c      	cmp	r4, r3
 8004bde:	bf08      	it	eq
 8004be0:	68ec      	ldreq	r4, [r5, #12]
 8004be2:	e7d5      	b.n	8004b90 <_puts_r+0x24>
 8004be4:	4621      	mov	r1, r4
 8004be6:	4628      	mov	r0, r5
 8004be8:	f000 f888 	bl	8004cfc <__swsetup_r>
 8004bec:	2800      	cmp	r0, #0
 8004bee:	d0dd      	beq.n	8004bac <_puts_r+0x40>
 8004bf0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004bf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bf6:	07da      	lsls	r2, r3, #31
 8004bf8:	d405      	bmi.n	8004c06 <_puts_r+0x9a>
 8004bfa:	89a3      	ldrh	r3, [r4, #12]
 8004bfc:	059b      	lsls	r3, r3, #22
 8004bfe:	d402      	bmi.n	8004c06 <_puts_r+0x9a>
 8004c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c02:	f000 faa2 	bl	800514a <__retarget_lock_release_recursive>
 8004c06:	4628      	mov	r0, r5
 8004c08:	bd70      	pop	{r4, r5, r6, pc}
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	da04      	bge.n	8004c18 <_puts_r+0xac>
 8004c0e:	69a2      	ldr	r2, [r4, #24]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	dc06      	bgt.n	8004c22 <_puts_r+0xb6>
 8004c14:	290a      	cmp	r1, #10
 8004c16:	d004      	beq.n	8004c22 <_puts_r+0xb6>
 8004c18:	6823      	ldr	r3, [r4, #0]
 8004c1a:	1c5a      	adds	r2, r3, #1
 8004c1c:	6022      	str	r2, [r4, #0]
 8004c1e:	7019      	strb	r1, [r3, #0]
 8004c20:	e7c5      	b.n	8004bae <_puts_r+0x42>
 8004c22:	4622      	mov	r2, r4
 8004c24:	4628      	mov	r0, r5
 8004c26:	f000 f817 	bl	8004c58 <__swbuf_r>
 8004c2a:	3001      	adds	r0, #1
 8004c2c:	d1bf      	bne.n	8004bae <_puts_r+0x42>
 8004c2e:	e7df      	b.n	8004bf0 <_puts_r+0x84>
 8004c30:	6823      	ldr	r3, [r4, #0]
 8004c32:	250a      	movs	r5, #10
 8004c34:	1c5a      	adds	r2, r3, #1
 8004c36:	6022      	str	r2, [r4, #0]
 8004c38:	701d      	strb	r5, [r3, #0]
 8004c3a:	e7db      	b.n	8004bf4 <_puts_r+0x88>
 8004c3c:	0800560c 	.word	0x0800560c
 8004c40:	0800562c 	.word	0x0800562c
 8004c44:	080055ec 	.word	0x080055ec

08004c48 <puts>:
 8004c48:	4b02      	ldr	r3, [pc, #8]	; (8004c54 <puts+0xc>)
 8004c4a:	4601      	mov	r1, r0
 8004c4c:	6818      	ldr	r0, [r3, #0]
 8004c4e:	f7ff bf8d 	b.w	8004b6c <_puts_r>
 8004c52:	bf00      	nop
 8004c54:	2000000c 	.word	0x2000000c

08004c58 <__swbuf_r>:
 8004c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c5a:	460e      	mov	r6, r1
 8004c5c:	4614      	mov	r4, r2
 8004c5e:	4605      	mov	r5, r0
 8004c60:	b118      	cbz	r0, 8004c6a <__swbuf_r+0x12>
 8004c62:	6983      	ldr	r3, [r0, #24]
 8004c64:	b90b      	cbnz	r3, 8004c6a <__swbuf_r+0x12>
 8004c66:	f000 f9d1 	bl	800500c <__sinit>
 8004c6a:	4b21      	ldr	r3, [pc, #132]	; (8004cf0 <__swbuf_r+0x98>)
 8004c6c:	429c      	cmp	r4, r3
 8004c6e:	d12b      	bne.n	8004cc8 <__swbuf_r+0x70>
 8004c70:	686c      	ldr	r4, [r5, #4]
 8004c72:	69a3      	ldr	r3, [r4, #24]
 8004c74:	60a3      	str	r3, [r4, #8]
 8004c76:	89a3      	ldrh	r3, [r4, #12]
 8004c78:	071a      	lsls	r2, r3, #28
 8004c7a:	d52f      	bpl.n	8004cdc <__swbuf_r+0x84>
 8004c7c:	6923      	ldr	r3, [r4, #16]
 8004c7e:	b36b      	cbz	r3, 8004cdc <__swbuf_r+0x84>
 8004c80:	6923      	ldr	r3, [r4, #16]
 8004c82:	6820      	ldr	r0, [r4, #0]
 8004c84:	1ac0      	subs	r0, r0, r3
 8004c86:	6963      	ldr	r3, [r4, #20]
 8004c88:	b2f6      	uxtb	r6, r6
 8004c8a:	4283      	cmp	r3, r0
 8004c8c:	4637      	mov	r7, r6
 8004c8e:	dc04      	bgt.n	8004c9a <__swbuf_r+0x42>
 8004c90:	4621      	mov	r1, r4
 8004c92:	4628      	mov	r0, r5
 8004c94:	f000 f926 	bl	8004ee4 <_fflush_r>
 8004c98:	bb30      	cbnz	r0, 8004ce8 <__swbuf_r+0x90>
 8004c9a:	68a3      	ldr	r3, [r4, #8]
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	60a3      	str	r3, [r4, #8]
 8004ca0:	6823      	ldr	r3, [r4, #0]
 8004ca2:	1c5a      	adds	r2, r3, #1
 8004ca4:	6022      	str	r2, [r4, #0]
 8004ca6:	701e      	strb	r6, [r3, #0]
 8004ca8:	6963      	ldr	r3, [r4, #20]
 8004caa:	3001      	adds	r0, #1
 8004cac:	4283      	cmp	r3, r0
 8004cae:	d004      	beq.n	8004cba <__swbuf_r+0x62>
 8004cb0:	89a3      	ldrh	r3, [r4, #12]
 8004cb2:	07db      	lsls	r3, r3, #31
 8004cb4:	d506      	bpl.n	8004cc4 <__swbuf_r+0x6c>
 8004cb6:	2e0a      	cmp	r6, #10
 8004cb8:	d104      	bne.n	8004cc4 <__swbuf_r+0x6c>
 8004cba:	4621      	mov	r1, r4
 8004cbc:	4628      	mov	r0, r5
 8004cbe:	f000 f911 	bl	8004ee4 <_fflush_r>
 8004cc2:	b988      	cbnz	r0, 8004ce8 <__swbuf_r+0x90>
 8004cc4:	4638      	mov	r0, r7
 8004cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cc8:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <__swbuf_r+0x9c>)
 8004cca:	429c      	cmp	r4, r3
 8004ccc:	d101      	bne.n	8004cd2 <__swbuf_r+0x7a>
 8004cce:	68ac      	ldr	r4, [r5, #8]
 8004cd0:	e7cf      	b.n	8004c72 <__swbuf_r+0x1a>
 8004cd2:	4b09      	ldr	r3, [pc, #36]	; (8004cf8 <__swbuf_r+0xa0>)
 8004cd4:	429c      	cmp	r4, r3
 8004cd6:	bf08      	it	eq
 8004cd8:	68ec      	ldreq	r4, [r5, #12]
 8004cda:	e7ca      	b.n	8004c72 <__swbuf_r+0x1a>
 8004cdc:	4621      	mov	r1, r4
 8004cde:	4628      	mov	r0, r5
 8004ce0:	f000 f80c 	bl	8004cfc <__swsetup_r>
 8004ce4:	2800      	cmp	r0, #0
 8004ce6:	d0cb      	beq.n	8004c80 <__swbuf_r+0x28>
 8004ce8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004cec:	e7ea      	b.n	8004cc4 <__swbuf_r+0x6c>
 8004cee:	bf00      	nop
 8004cf0:	0800560c 	.word	0x0800560c
 8004cf4:	0800562c 	.word	0x0800562c
 8004cf8:	080055ec 	.word	0x080055ec

08004cfc <__swsetup_r>:
 8004cfc:	4b32      	ldr	r3, [pc, #200]	; (8004dc8 <__swsetup_r+0xcc>)
 8004cfe:	b570      	push	{r4, r5, r6, lr}
 8004d00:	681d      	ldr	r5, [r3, #0]
 8004d02:	4606      	mov	r6, r0
 8004d04:	460c      	mov	r4, r1
 8004d06:	b125      	cbz	r5, 8004d12 <__swsetup_r+0x16>
 8004d08:	69ab      	ldr	r3, [r5, #24]
 8004d0a:	b913      	cbnz	r3, 8004d12 <__swsetup_r+0x16>
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	f000 f97d 	bl	800500c <__sinit>
 8004d12:	4b2e      	ldr	r3, [pc, #184]	; (8004dcc <__swsetup_r+0xd0>)
 8004d14:	429c      	cmp	r4, r3
 8004d16:	d10f      	bne.n	8004d38 <__swsetup_r+0x3c>
 8004d18:	686c      	ldr	r4, [r5, #4]
 8004d1a:	89a3      	ldrh	r3, [r4, #12]
 8004d1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d20:	0719      	lsls	r1, r3, #28
 8004d22:	d42c      	bmi.n	8004d7e <__swsetup_r+0x82>
 8004d24:	06dd      	lsls	r5, r3, #27
 8004d26:	d411      	bmi.n	8004d4c <__swsetup_r+0x50>
 8004d28:	2309      	movs	r3, #9
 8004d2a:	6033      	str	r3, [r6, #0]
 8004d2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004d30:	81a3      	strh	r3, [r4, #12]
 8004d32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d36:	e03e      	b.n	8004db6 <__swsetup_r+0xba>
 8004d38:	4b25      	ldr	r3, [pc, #148]	; (8004dd0 <__swsetup_r+0xd4>)
 8004d3a:	429c      	cmp	r4, r3
 8004d3c:	d101      	bne.n	8004d42 <__swsetup_r+0x46>
 8004d3e:	68ac      	ldr	r4, [r5, #8]
 8004d40:	e7eb      	b.n	8004d1a <__swsetup_r+0x1e>
 8004d42:	4b24      	ldr	r3, [pc, #144]	; (8004dd4 <__swsetup_r+0xd8>)
 8004d44:	429c      	cmp	r4, r3
 8004d46:	bf08      	it	eq
 8004d48:	68ec      	ldreq	r4, [r5, #12]
 8004d4a:	e7e6      	b.n	8004d1a <__swsetup_r+0x1e>
 8004d4c:	0758      	lsls	r0, r3, #29
 8004d4e:	d512      	bpl.n	8004d76 <__swsetup_r+0x7a>
 8004d50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d52:	b141      	cbz	r1, 8004d66 <__swsetup_r+0x6a>
 8004d54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d58:	4299      	cmp	r1, r3
 8004d5a:	d002      	beq.n	8004d62 <__swsetup_r+0x66>
 8004d5c:	4630      	mov	r0, r6
 8004d5e:	f000 fa5b 	bl	8005218 <_free_r>
 8004d62:	2300      	movs	r3, #0
 8004d64:	6363      	str	r3, [r4, #52]	; 0x34
 8004d66:	89a3      	ldrh	r3, [r4, #12]
 8004d68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d6c:	81a3      	strh	r3, [r4, #12]
 8004d6e:	2300      	movs	r3, #0
 8004d70:	6063      	str	r3, [r4, #4]
 8004d72:	6923      	ldr	r3, [r4, #16]
 8004d74:	6023      	str	r3, [r4, #0]
 8004d76:	89a3      	ldrh	r3, [r4, #12]
 8004d78:	f043 0308 	orr.w	r3, r3, #8
 8004d7c:	81a3      	strh	r3, [r4, #12]
 8004d7e:	6923      	ldr	r3, [r4, #16]
 8004d80:	b94b      	cbnz	r3, 8004d96 <__swsetup_r+0x9a>
 8004d82:	89a3      	ldrh	r3, [r4, #12]
 8004d84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d8c:	d003      	beq.n	8004d96 <__swsetup_r+0x9a>
 8004d8e:	4621      	mov	r1, r4
 8004d90:	4630      	mov	r0, r6
 8004d92:	f000 fa01 	bl	8005198 <__smakebuf_r>
 8004d96:	89a0      	ldrh	r0, [r4, #12]
 8004d98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d9c:	f010 0301 	ands.w	r3, r0, #1
 8004da0:	d00a      	beq.n	8004db8 <__swsetup_r+0xbc>
 8004da2:	2300      	movs	r3, #0
 8004da4:	60a3      	str	r3, [r4, #8]
 8004da6:	6963      	ldr	r3, [r4, #20]
 8004da8:	425b      	negs	r3, r3
 8004daa:	61a3      	str	r3, [r4, #24]
 8004dac:	6923      	ldr	r3, [r4, #16]
 8004dae:	b943      	cbnz	r3, 8004dc2 <__swsetup_r+0xc6>
 8004db0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004db4:	d1ba      	bne.n	8004d2c <__swsetup_r+0x30>
 8004db6:	bd70      	pop	{r4, r5, r6, pc}
 8004db8:	0781      	lsls	r1, r0, #30
 8004dba:	bf58      	it	pl
 8004dbc:	6963      	ldrpl	r3, [r4, #20]
 8004dbe:	60a3      	str	r3, [r4, #8]
 8004dc0:	e7f4      	b.n	8004dac <__swsetup_r+0xb0>
 8004dc2:	2000      	movs	r0, #0
 8004dc4:	e7f7      	b.n	8004db6 <__swsetup_r+0xba>
 8004dc6:	bf00      	nop
 8004dc8:	2000000c 	.word	0x2000000c
 8004dcc:	0800560c 	.word	0x0800560c
 8004dd0:	0800562c 	.word	0x0800562c
 8004dd4:	080055ec 	.word	0x080055ec

08004dd8 <__sflush_r>:
 8004dd8:	898a      	ldrh	r2, [r1, #12]
 8004dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dde:	4605      	mov	r5, r0
 8004de0:	0710      	lsls	r0, r2, #28
 8004de2:	460c      	mov	r4, r1
 8004de4:	d458      	bmi.n	8004e98 <__sflush_r+0xc0>
 8004de6:	684b      	ldr	r3, [r1, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	dc05      	bgt.n	8004df8 <__sflush_r+0x20>
 8004dec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	dc02      	bgt.n	8004df8 <__sflush_r+0x20>
 8004df2:	2000      	movs	r0, #0
 8004df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004df8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004dfa:	2e00      	cmp	r6, #0
 8004dfc:	d0f9      	beq.n	8004df2 <__sflush_r+0x1a>
 8004dfe:	2300      	movs	r3, #0
 8004e00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e04:	682f      	ldr	r7, [r5, #0]
 8004e06:	602b      	str	r3, [r5, #0]
 8004e08:	d032      	beq.n	8004e70 <__sflush_r+0x98>
 8004e0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e0c:	89a3      	ldrh	r3, [r4, #12]
 8004e0e:	075a      	lsls	r2, r3, #29
 8004e10:	d505      	bpl.n	8004e1e <__sflush_r+0x46>
 8004e12:	6863      	ldr	r3, [r4, #4]
 8004e14:	1ac0      	subs	r0, r0, r3
 8004e16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e18:	b10b      	cbz	r3, 8004e1e <__sflush_r+0x46>
 8004e1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e1c:	1ac0      	subs	r0, r0, r3
 8004e1e:	2300      	movs	r3, #0
 8004e20:	4602      	mov	r2, r0
 8004e22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e24:	6a21      	ldr	r1, [r4, #32]
 8004e26:	4628      	mov	r0, r5
 8004e28:	47b0      	blx	r6
 8004e2a:	1c43      	adds	r3, r0, #1
 8004e2c:	89a3      	ldrh	r3, [r4, #12]
 8004e2e:	d106      	bne.n	8004e3e <__sflush_r+0x66>
 8004e30:	6829      	ldr	r1, [r5, #0]
 8004e32:	291d      	cmp	r1, #29
 8004e34:	d82c      	bhi.n	8004e90 <__sflush_r+0xb8>
 8004e36:	4a2a      	ldr	r2, [pc, #168]	; (8004ee0 <__sflush_r+0x108>)
 8004e38:	40ca      	lsrs	r2, r1
 8004e3a:	07d6      	lsls	r6, r2, #31
 8004e3c:	d528      	bpl.n	8004e90 <__sflush_r+0xb8>
 8004e3e:	2200      	movs	r2, #0
 8004e40:	6062      	str	r2, [r4, #4]
 8004e42:	04d9      	lsls	r1, r3, #19
 8004e44:	6922      	ldr	r2, [r4, #16]
 8004e46:	6022      	str	r2, [r4, #0]
 8004e48:	d504      	bpl.n	8004e54 <__sflush_r+0x7c>
 8004e4a:	1c42      	adds	r2, r0, #1
 8004e4c:	d101      	bne.n	8004e52 <__sflush_r+0x7a>
 8004e4e:	682b      	ldr	r3, [r5, #0]
 8004e50:	b903      	cbnz	r3, 8004e54 <__sflush_r+0x7c>
 8004e52:	6560      	str	r0, [r4, #84]	; 0x54
 8004e54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e56:	602f      	str	r7, [r5, #0]
 8004e58:	2900      	cmp	r1, #0
 8004e5a:	d0ca      	beq.n	8004df2 <__sflush_r+0x1a>
 8004e5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e60:	4299      	cmp	r1, r3
 8004e62:	d002      	beq.n	8004e6a <__sflush_r+0x92>
 8004e64:	4628      	mov	r0, r5
 8004e66:	f000 f9d7 	bl	8005218 <_free_r>
 8004e6a:	2000      	movs	r0, #0
 8004e6c:	6360      	str	r0, [r4, #52]	; 0x34
 8004e6e:	e7c1      	b.n	8004df4 <__sflush_r+0x1c>
 8004e70:	6a21      	ldr	r1, [r4, #32]
 8004e72:	2301      	movs	r3, #1
 8004e74:	4628      	mov	r0, r5
 8004e76:	47b0      	blx	r6
 8004e78:	1c41      	adds	r1, r0, #1
 8004e7a:	d1c7      	bne.n	8004e0c <__sflush_r+0x34>
 8004e7c:	682b      	ldr	r3, [r5, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d0c4      	beq.n	8004e0c <__sflush_r+0x34>
 8004e82:	2b1d      	cmp	r3, #29
 8004e84:	d001      	beq.n	8004e8a <__sflush_r+0xb2>
 8004e86:	2b16      	cmp	r3, #22
 8004e88:	d101      	bne.n	8004e8e <__sflush_r+0xb6>
 8004e8a:	602f      	str	r7, [r5, #0]
 8004e8c:	e7b1      	b.n	8004df2 <__sflush_r+0x1a>
 8004e8e:	89a3      	ldrh	r3, [r4, #12]
 8004e90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e94:	81a3      	strh	r3, [r4, #12]
 8004e96:	e7ad      	b.n	8004df4 <__sflush_r+0x1c>
 8004e98:	690f      	ldr	r7, [r1, #16]
 8004e9a:	2f00      	cmp	r7, #0
 8004e9c:	d0a9      	beq.n	8004df2 <__sflush_r+0x1a>
 8004e9e:	0793      	lsls	r3, r2, #30
 8004ea0:	680e      	ldr	r6, [r1, #0]
 8004ea2:	bf08      	it	eq
 8004ea4:	694b      	ldreq	r3, [r1, #20]
 8004ea6:	600f      	str	r7, [r1, #0]
 8004ea8:	bf18      	it	ne
 8004eaa:	2300      	movne	r3, #0
 8004eac:	eba6 0807 	sub.w	r8, r6, r7
 8004eb0:	608b      	str	r3, [r1, #8]
 8004eb2:	f1b8 0f00 	cmp.w	r8, #0
 8004eb6:	dd9c      	ble.n	8004df2 <__sflush_r+0x1a>
 8004eb8:	6a21      	ldr	r1, [r4, #32]
 8004eba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ebc:	4643      	mov	r3, r8
 8004ebe:	463a      	mov	r2, r7
 8004ec0:	4628      	mov	r0, r5
 8004ec2:	47b0      	blx	r6
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	dc06      	bgt.n	8004ed6 <__sflush_r+0xfe>
 8004ec8:	89a3      	ldrh	r3, [r4, #12]
 8004eca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ece:	81a3      	strh	r3, [r4, #12]
 8004ed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ed4:	e78e      	b.n	8004df4 <__sflush_r+0x1c>
 8004ed6:	4407      	add	r7, r0
 8004ed8:	eba8 0800 	sub.w	r8, r8, r0
 8004edc:	e7e9      	b.n	8004eb2 <__sflush_r+0xda>
 8004ede:	bf00      	nop
 8004ee0:	20400001 	.word	0x20400001

08004ee4 <_fflush_r>:
 8004ee4:	b538      	push	{r3, r4, r5, lr}
 8004ee6:	690b      	ldr	r3, [r1, #16]
 8004ee8:	4605      	mov	r5, r0
 8004eea:	460c      	mov	r4, r1
 8004eec:	b913      	cbnz	r3, 8004ef4 <_fflush_r+0x10>
 8004eee:	2500      	movs	r5, #0
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	bd38      	pop	{r3, r4, r5, pc}
 8004ef4:	b118      	cbz	r0, 8004efe <_fflush_r+0x1a>
 8004ef6:	6983      	ldr	r3, [r0, #24]
 8004ef8:	b90b      	cbnz	r3, 8004efe <_fflush_r+0x1a>
 8004efa:	f000 f887 	bl	800500c <__sinit>
 8004efe:	4b14      	ldr	r3, [pc, #80]	; (8004f50 <_fflush_r+0x6c>)
 8004f00:	429c      	cmp	r4, r3
 8004f02:	d11b      	bne.n	8004f3c <_fflush_r+0x58>
 8004f04:	686c      	ldr	r4, [r5, #4]
 8004f06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0ef      	beq.n	8004eee <_fflush_r+0xa>
 8004f0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f10:	07d0      	lsls	r0, r2, #31
 8004f12:	d404      	bmi.n	8004f1e <_fflush_r+0x3a>
 8004f14:	0599      	lsls	r1, r3, #22
 8004f16:	d402      	bmi.n	8004f1e <_fflush_r+0x3a>
 8004f18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f1a:	f000 f915 	bl	8005148 <__retarget_lock_acquire_recursive>
 8004f1e:	4628      	mov	r0, r5
 8004f20:	4621      	mov	r1, r4
 8004f22:	f7ff ff59 	bl	8004dd8 <__sflush_r>
 8004f26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f28:	07da      	lsls	r2, r3, #31
 8004f2a:	4605      	mov	r5, r0
 8004f2c:	d4e0      	bmi.n	8004ef0 <_fflush_r+0xc>
 8004f2e:	89a3      	ldrh	r3, [r4, #12]
 8004f30:	059b      	lsls	r3, r3, #22
 8004f32:	d4dd      	bmi.n	8004ef0 <_fflush_r+0xc>
 8004f34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f36:	f000 f908 	bl	800514a <__retarget_lock_release_recursive>
 8004f3a:	e7d9      	b.n	8004ef0 <_fflush_r+0xc>
 8004f3c:	4b05      	ldr	r3, [pc, #20]	; (8004f54 <_fflush_r+0x70>)
 8004f3e:	429c      	cmp	r4, r3
 8004f40:	d101      	bne.n	8004f46 <_fflush_r+0x62>
 8004f42:	68ac      	ldr	r4, [r5, #8]
 8004f44:	e7df      	b.n	8004f06 <_fflush_r+0x22>
 8004f46:	4b04      	ldr	r3, [pc, #16]	; (8004f58 <_fflush_r+0x74>)
 8004f48:	429c      	cmp	r4, r3
 8004f4a:	bf08      	it	eq
 8004f4c:	68ec      	ldreq	r4, [r5, #12]
 8004f4e:	e7da      	b.n	8004f06 <_fflush_r+0x22>
 8004f50:	0800560c 	.word	0x0800560c
 8004f54:	0800562c 	.word	0x0800562c
 8004f58:	080055ec 	.word	0x080055ec

08004f5c <std>:
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	b510      	push	{r4, lr}
 8004f60:	4604      	mov	r4, r0
 8004f62:	e9c0 3300 	strd	r3, r3, [r0]
 8004f66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f6a:	6083      	str	r3, [r0, #8]
 8004f6c:	8181      	strh	r1, [r0, #12]
 8004f6e:	6643      	str	r3, [r0, #100]	; 0x64
 8004f70:	81c2      	strh	r2, [r0, #14]
 8004f72:	6183      	str	r3, [r0, #24]
 8004f74:	4619      	mov	r1, r3
 8004f76:	2208      	movs	r2, #8
 8004f78:	305c      	adds	r0, #92	; 0x5c
 8004f7a:	f7ff fdef 	bl	8004b5c <memset>
 8004f7e:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <std+0x38>)
 8004f80:	6263      	str	r3, [r4, #36]	; 0x24
 8004f82:	4b05      	ldr	r3, [pc, #20]	; (8004f98 <std+0x3c>)
 8004f84:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f86:	4b05      	ldr	r3, [pc, #20]	; (8004f9c <std+0x40>)
 8004f88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f8a:	4b05      	ldr	r3, [pc, #20]	; (8004fa0 <std+0x44>)
 8004f8c:	6224      	str	r4, [r4, #32]
 8004f8e:	6323      	str	r3, [r4, #48]	; 0x30
 8004f90:	bd10      	pop	{r4, pc}
 8004f92:	bf00      	nop
 8004f94:	080053f9 	.word	0x080053f9
 8004f98:	0800541b 	.word	0x0800541b
 8004f9c:	08005453 	.word	0x08005453
 8004fa0:	08005477 	.word	0x08005477

08004fa4 <_cleanup_r>:
 8004fa4:	4901      	ldr	r1, [pc, #4]	; (8004fac <_cleanup_r+0x8>)
 8004fa6:	f000 b8af 	b.w	8005108 <_fwalk_reent>
 8004faa:	bf00      	nop
 8004fac:	08004ee5 	.word	0x08004ee5

08004fb0 <__sfmoreglue>:
 8004fb0:	b570      	push	{r4, r5, r6, lr}
 8004fb2:	2268      	movs	r2, #104	; 0x68
 8004fb4:	1e4d      	subs	r5, r1, #1
 8004fb6:	4355      	muls	r5, r2
 8004fb8:	460e      	mov	r6, r1
 8004fba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004fbe:	f000 f997 	bl	80052f0 <_malloc_r>
 8004fc2:	4604      	mov	r4, r0
 8004fc4:	b140      	cbz	r0, 8004fd8 <__sfmoreglue+0x28>
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	e9c0 1600 	strd	r1, r6, [r0]
 8004fcc:	300c      	adds	r0, #12
 8004fce:	60a0      	str	r0, [r4, #8]
 8004fd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004fd4:	f7ff fdc2 	bl	8004b5c <memset>
 8004fd8:	4620      	mov	r0, r4
 8004fda:	bd70      	pop	{r4, r5, r6, pc}

08004fdc <__sfp_lock_acquire>:
 8004fdc:	4801      	ldr	r0, [pc, #4]	; (8004fe4 <__sfp_lock_acquire+0x8>)
 8004fde:	f000 b8b3 	b.w	8005148 <__retarget_lock_acquire_recursive>
 8004fe2:	bf00      	nop
 8004fe4:	20000805 	.word	0x20000805

08004fe8 <__sfp_lock_release>:
 8004fe8:	4801      	ldr	r0, [pc, #4]	; (8004ff0 <__sfp_lock_release+0x8>)
 8004fea:	f000 b8ae 	b.w	800514a <__retarget_lock_release_recursive>
 8004fee:	bf00      	nop
 8004ff0:	20000805 	.word	0x20000805

08004ff4 <__sinit_lock_acquire>:
 8004ff4:	4801      	ldr	r0, [pc, #4]	; (8004ffc <__sinit_lock_acquire+0x8>)
 8004ff6:	f000 b8a7 	b.w	8005148 <__retarget_lock_acquire_recursive>
 8004ffa:	bf00      	nop
 8004ffc:	20000806 	.word	0x20000806

08005000 <__sinit_lock_release>:
 8005000:	4801      	ldr	r0, [pc, #4]	; (8005008 <__sinit_lock_release+0x8>)
 8005002:	f000 b8a2 	b.w	800514a <__retarget_lock_release_recursive>
 8005006:	bf00      	nop
 8005008:	20000806 	.word	0x20000806

0800500c <__sinit>:
 800500c:	b510      	push	{r4, lr}
 800500e:	4604      	mov	r4, r0
 8005010:	f7ff fff0 	bl	8004ff4 <__sinit_lock_acquire>
 8005014:	69a3      	ldr	r3, [r4, #24]
 8005016:	b11b      	cbz	r3, 8005020 <__sinit+0x14>
 8005018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800501c:	f7ff bff0 	b.w	8005000 <__sinit_lock_release>
 8005020:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005024:	6523      	str	r3, [r4, #80]	; 0x50
 8005026:	4b13      	ldr	r3, [pc, #76]	; (8005074 <__sinit+0x68>)
 8005028:	4a13      	ldr	r2, [pc, #76]	; (8005078 <__sinit+0x6c>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	62a2      	str	r2, [r4, #40]	; 0x28
 800502e:	42a3      	cmp	r3, r4
 8005030:	bf04      	itt	eq
 8005032:	2301      	moveq	r3, #1
 8005034:	61a3      	streq	r3, [r4, #24]
 8005036:	4620      	mov	r0, r4
 8005038:	f000 f820 	bl	800507c <__sfp>
 800503c:	6060      	str	r0, [r4, #4]
 800503e:	4620      	mov	r0, r4
 8005040:	f000 f81c 	bl	800507c <__sfp>
 8005044:	60a0      	str	r0, [r4, #8]
 8005046:	4620      	mov	r0, r4
 8005048:	f000 f818 	bl	800507c <__sfp>
 800504c:	2200      	movs	r2, #0
 800504e:	60e0      	str	r0, [r4, #12]
 8005050:	2104      	movs	r1, #4
 8005052:	6860      	ldr	r0, [r4, #4]
 8005054:	f7ff ff82 	bl	8004f5c <std>
 8005058:	68a0      	ldr	r0, [r4, #8]
 800505a:	2201      	movs	r2, #1
 800505c:	2109      	movs	r1, #9
 800505e:	f7ff ff7d 	bl	8004f5c <std>
 8005062:	68e0      	ldr	r0, [r4, #12]
 8005064:	2202      	movs	r2, #2
 8005066:	2112      	movs	r1, #18
 8005068:	f7ff ff78 	bl	8004f5c <std>
 800506c:	2301      	movs	r3, #1
 800506e:	61a3      	str	r3, [r4, #24]
 8005070:	e7d2      	b.n	8005018 <__sinit+0xc>
 8005072:	bf00      	nop
 8005074:	080055e8 	.word	0x080055e8
 8005078:	08004fa5 	.word	0x08004fa5

0800507c <__sfp>:
 800507c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507e:	4607      	mov	r7, r0
 8005080:	f7ff ffac 	bl	8004fdc <__sfp_lock_acquire>
 8005084:	4b1e      	ldr	r3, [pc, #120]	; (8005100 <__sfp+0x84>)
 8005086:	681e      	ldr	r6, [r3, #0]
 8005088:	69b3      	ldr	r3, [r6, #24]
 800508a:	b913      	cbnz	r3, 8005092 <__sfp+0x16>
 800508c:	4630      	mov	r0, r6
 800508e:	f7ff ffbd 	bl	800500c <__sinit>
 8005092:	3648      	adds	r6, #72	; 0x48
 8005094:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005098:	3b01      	subs	r3, #1
 800509a:	d503      	bpl.n	80050a4 <__sfp+0x28>
 800509c:	6833      	ldr	r3, [r6, #0]
 800509e:	b30b      	cbz	r3, 80050e4 <__sfp+0x68>
 80050a0:	6836      	ldr	r6, [r6, #0]
 80050a2:	e7f7      	b.n	8005094 <__sfp+0x18>
 80050a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80050a8:	b9d5      	cbnz	r5, 80050e0 <__sfp+0x64>
 80050aa:	4b16      	ldr	r3, [pc, #88]	; (8005104 <__sfp+0x88>)
 80050ac:	60e3      	str	r3, [r4, #12]
 80050ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80050b2:	6665      	str	r5, [r4, #100]	; 0x64
 80050b4:	f000 f847 	bl	8005146 <__retarget_lock_init_recursive>
 80050b8:	f7ff ff96 	bl	8004fe8 <__sfp_lock_release>
 80050bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80050c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80050c4:	6025      	str	r5, [r4, #0]
 80050c6:	61a5      	str	r5, [r4, #24]
 80050c8:	2208      	movs	r2, #8
 80050ca:	4629      	mov	r1, r5
 80050cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80050d0:	f7ff fd44 	bl	8004b5c <memset>
 80050d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80050d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80050dc:	4620      	mov	r0, r4
 80050de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050e0:	3468      	adds	r4, #104	; 0x68
 80050e2:	e7d9      	b.n	8005098 <__sfp+0x1c>
 80050e4:	2104      	movs	r1, #4
 80050e6:	4638      	mov	r0, r7
 80050e8:	f7ff ff62 	bl	8004fb0 <__sfmoreglue>
 80050ec:	4604      	mov	r4, r0
 80050ee:	6030      	str	r0, [r6, #0]
 80050f0:	2800      	cmp	r0, #0
 80050f2:	d1d5      	bne.n	80050a0 <__sfp+0x24>
 80050f4:	f7ff ff78 	bl	8004fe8 <__sfp_lock_release>
 80050f8:	230c      	movs	r3, #12
 80050fa:	603b      	str	r3, [r7, #0]
 80050fc:	e7ee      	b.n	80050dc <__sfp+0x60>
 80050fe:	bf00      	nop
 8005100:	080055e8 	.word	0x080055e8
 8005104:	ffff0001 	.word	0xffff0001

08005108 <_fwalk_reent>:
 8005108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800510c:	4606      	mov	r6, r0
 800510e:	4688      	mov	r8, r1
 8005110:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005114:	2700      	movs	r7, #0
 8005116:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800511a:	f1b9 0901 	subs.w	r9, r9, #1
 800511e:	d505      	bpl.n	800512c <_fwalk_reent+0x24>
 8005120:	6824      	ldr	r4, [r4, #0]
 8005122:	2c00      	cmp	r4, #0
 8005124:	d1f7      	bne.n	8005116 <_fwalk_reent+0xe>
 8005126:	4638      	mov	r0, r7
 8005128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800512c:	89ab      	ldrh	r3, [r5, #12]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d907      	bls.n	8005142 <_fwalk_reent+0x3a>
 8005132:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005136:	3301      	adds	r3, #1
 8005138:	d003      	beq.n	8005142 <_fwalk_reent+0x3a>
 800513a:	4629      	mov	r1, r5
 800513c:	4630      	mov	r0, r6
 800513e:	47c0      	blx	r8
 8005140:	4307      	orrs	r7, r0
 8005142:	3568      	adds	r5, #104	; 0x68
 8005144:	e7e9      	b.n	800511a <_fwalk_reent+0x12>

08005146 <__retarget_lock_init_recursive>:
 8005146:	4770      	bx	lr

08005148 <__retarget_lock_acquire_recursive>:
 8005148:	4770      	bx	lr

0800514a <__retarget_lock_release_recursive>:
 800514a:	4770      	bx	lr

0800514c <__swhatbuf_r>:
 800514c:	b570      	push	{r4, r5, r6, lr}
 800514e:	460e      	mov	r6, r1
 8005150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005154:	2900      	cmp	r1, #0
 8005156:	b096      	sub	sp, #88	; 0x58
 8005158:	4614      	mov	r4, r2
 800515a:	461d      	mov	r5, r3
 800515c:	da08      	bge.n	8005170 <__swhatbuf_r+0x24>
 800515e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	602a      	str	r2, [r5, #0]
 8005166:	061a      	lsls	r2, r3, #24
 8005168:	d410      	bmi.n	800518c <__swhatbuf_r+0x40>
 800516a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800516e:	e00e      	b.n	800518e <__swhatbuf_r+0x42>
 8005170:	466a      	mov	r2, sp
 8005172:	f000 f9a7 	bl	80054c4 <_fstat_r>
 8005176:	2800      	cmp	r0, #0
 8005178:	dbf1      	blt.n	800515e <__swhatbuf_r+0x12>
 800517a:	9a01      	ldr	r2, [sp, #4]
 800517c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005180:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005184:	425a      	negs	r2, r3
 8005186:	415a      	adcs	r2, r3
 8005188:	602a      	str	r2, [r5, #0]
 800518a:	e7ee      	b.n	800516a <__swhatbuf_r+0x1e>
 800518c:	2340      	movs	r3, #64	; 0x40
 800518e:	2000      	movs	r0, #0
 8005190:	6023      	str	r3, [r4, #0]
 8005192:	b016      	add	sp, #88	; 0x58
 8005194:	bd70      	pop	{r4, r5, r6, pc}
	...

08005198 <__smakebuf_r>:
 8005198:	898b      	ldrh	r3, [r1, #12]
 800519a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800519c:	079d      	lsls	r5, r3, #30
 800519e:	4606      	mov	r6, r0
 80051a0:	460c      	mov	r4, r1
 80051a2:	d507      	bpl.n	80051b4 <__smakebuf_r+0x1c>
 80051a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80051a8:	6023      	str	r3, [r4, #0]
 80051aa:	6123      	str	r3, [r4, #16]
 80051ac:	2301      	movs	r3, #1
 80051ae:	6163      	str	r3, [r4, #20]
 80051b0:	b002      	add	sp, #8
 80051b2:	bd70      	pop	{r4, r5, r6, pc}
 80051b4:	ab01      	add	r3, sp, #4
 80051b6:	466a      	mov	r2, sp
 80051b8:	f7ff ffc8 	bl	800514c <__swhatbuf_r>
 80051bc:	9900      	ldr	r1, [sp, #0]
 80051be:	4605      	mov	r5, r0
 80051c0:	4630      	mov	r0, r6
 80051c2:	f000 f895 	bl	80052f0 <_malloc_r>
 80051c6:	b948      	cbnz	r0, 80051dc <__smakebuf_r+0x44>
 80051c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051cc:	059a      	lsls	r2, r3, #22
 80051ce:	d4ef      	bmi.n	80051b0 <__smakebuf_r+0x18>
 80051d0:	f023 0303 	bic.w	r3, r3, #3
 80051d4:	f043 0302 	orr.w	r3, r3, #2
 80051d8:	81a3      	strh	r3, [r4, #12]
 80051da:	e7e3      	b.n	80051a4 <__smakebuf_r+0xc>
 80051dc:	4b0d      	ldr	r3, [pc, #52]	; (8005214 <__smakebuf_r+0x7c>)
 80051de:	62b3      	str	r3, [r6, #40]	; 0x28
 80051e0:	89a3      	ldrh	r3, [r4, #12]
 80051e2:	6020      	str	r0, [r4, #0]
 80051e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e8:	81a3      	strh	r3, [r4, #12]
 80051ea:	9b00      	ldr	r3, [sp, #0]
 80051ec:	6163      	str	r3, [r4, #20]
 80051ee:	9b01      	ldr	r3, [sp, #4]
 80051f0:	6120      	str	r0, [r4, #16]
 80051f2:	b15b      	cbz	r3, 800520c <__smakebuf_r+0x74>
 80051f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051f8:	4630      	mov	r0, r6
 80051fa:	f000 f975 	bl	80054e8 <_isatty_r>
 80051fe:	b128      	cbz	r0, 800520c <__smakebuf_r+0x74>
 8005200:	89a3      	ldrh	r3, [r4, #12]
 8005202:	f023 0303 	bic.w	r3, r3, #3
 8005206:	f043 0301 	orr.w	r3, r3, #1
 800520a:	81a3      	strh	r3, [r4, #12]
 800520c:	89a0      	ldrh	r0, [r4, #12]
 800520e:	4305      	orrs	r5, r0
 8005210:	81a5      	strh	r5, [r4, #12]
 8005212:	e7cd      	b.n	80051b0 <__smakebuf_r+0x18>
 8005214:	08004fa5 	.word	0x08004fa5

08005218 <_free_r>:
 8005218:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800521a:	2900      	cmp	r1, #0
 800521c:	d044      	beq.n	80052a8 <_free_r+0x90>
 800521e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005222:	9001      	str	r0, [sp, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	f1a1 0404 	sub.w	r4, r1, #4
 800522a:	bfb8      	it	lt
 800522c:	18e4      	addlt	r4, r4, r3
 800522e:	f000 f97d 	bl	800552c <__malloc_lock>
 8005232:	4a1e      	ldr	r2, [pc, #120]	; (80052ac <_free_r+0x94>)
 8005234:	9801      	ldr	r0, [sp, #4]
 8005236:	6813      	ldr	r3, [r2, #0]
 8005238:	b933      	cbnz	r3, 8005248 <_free_r+0x30>
 800523a:	6063      	str	r3, [r4, #4]
 800523c:	6014      	str	r4, [r2, #0]
 800523e:	b003      	add	sp, #12
 8005240:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005244:	f000 b978 	b.w	8005538 <__malloc_unlock>
 8005248:	42a3      	cmp	r3, r4
 800524a:	d908      	bls.n	800525e <_free_r+0x46>
 800524c:	6825      	ldr	r5, [r4, #0]
 800524e:	1961      	adds	r1, r4, r5
 8005250:	428b      	cmp	r3, r1
 8005252:	bf01      	itttt	eq
 8005254:	6819      	ldreq	r1, [r3, #0]
 8005256:	685b      	ldreq	r3, [r3, #4]
 8005258:	1949      	addeq	r1, r1, r5
 800525a:	6021      	streq	r1, [r4, #0]
 800525c:	e7ed      	b.n	800523a <_free_r+0x22>
 800525e:	461a      	mov	r2, r3
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	b10b      	cbz	r3, 8005268 <_free_r+0x50>
 8005264:	42a3      	cmp	r3, r4
 8005266:	d9fa      	bls.n	800525e <_free_r+0x46>
 8005268:	6811      	ldr	r1, [r2, #0]
 800526a:	1855      	adds	r5, r2, r1
 800526c:	42a5      	cmp	r5, r4
 800526e:	d10b      	bne.n	8005288 <_free_r+0x70>
 8005270:	6824      	ldr	r4, [r4, #0]
 8005272:	4421      	add	r1, r4
 8005274:	1854      	adds	r4, r2, r1
 8005276:	42a3      	cmp	r3, r4
 8005278:	6011      	str	r1, [r2, #0]
 800527a:	d1e0      	bne.n	800523e <_free_r+0x26>
 800527c:	681c      	ldr	r4, [r3, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	6053      	str	r3, [r2, #4]
 8005282:	4421      	add	r1, r4
 8005284:	6011      	str	r1, [r2, #0]
 8005286:	e7da      	b.n	800523e <_free_r+0x26>
 8005288:	d902      	bls.n	8005290 <_free_r+0x78>
 800528a:	230c      	movs	r3, #12
 800528c:	6003      	str	r3, [r0, #0]
 800528e:	e7d6      	b.n	800523e <_free_r+0x26>
 8005290:	6825      	ldr	r5, [r4, #0]
 8005292:	1961      	adds	r1, r4, r5
 8005294:	428b      	cmp	r3, r1
 8005296:	bf04      	itt	eq
 8005298:	6819      	ldreq	r1, [r3, #0]
 800529a:	685b      	ldreq	r3, [r3, #4]
 800529c:	6063      	str	r3, [r4, #4]
 800529e:	bf04      	itt	eq
 80052a0:	1949      	addeq	r1, r1, r5
 80052a2:	6021      	streq	r1, [r4, #0]
 80052a4:	6054      	str	r4, [r2, #4]
 80052a6:	e7ca      	b.n	800523e <_free_r+0x26>
 80052a8:	b003      	add	sp, #12
 80052aa:	bd30      	pop	{r4, r5, pc}
 80052ac:	20000808 	.word	0x20000808

080052b0 <sbrk_aligned>:
 80052b0:	b570      	push	{r4, r5, r6, lr}
 80052b2:	4e0e      	ldr	r6, [pc, #56]	; (80052ec <sbrk_aligned+0x3c>)
 80052b4:	460c      	mov	r4, r1
 80052b6:	6831      	ldr	r1, [r6, #0]
 80052b8:	4605      	mov	r5, r0
 80052ba:	b911      	cbnz	r1, 80052c2 <sbrk_aligned+0x12>
 80052bc:	f000 f88c 	bl	80053d8 <_sbrk_r>
 80052c0:	6030      	str	r0, [r6, #0]
 80052c2:	4621      	mov	r1, r4
 80052c4:	4628      	mov	r0, r5
 80052c6:	f000 f887 	bl	80053d8 <_sbrk_r>
 80052ca:	1c43      	adds	r3, r0, #1
 80052cc:	d00a      	beq.n	80052e4 <sbrk_aligned+0x34>
 80052ce:	1cc4      	adds	r4, r0, #3
 80052d0:	f024 0403 	bic.w	r4, r4, #3
 80052d4:	42a0      	cmp	r0, r4
 80052d6:	d007      	beq.n	80052e8 <sbrk_aligned+0x38>
 80052d8:	1a21      	subs	r1, r4, r0
 80052da:	4628      	mov	r0, r5
 80052dc:	f000 f87c 	bl	80053d8 <_sbrk_r>
 80052e0:	3001      	adds	r0, #1
 80052e2:	d101      	bne.n	80052e8 <sbrk_aligned+0x38>
 80052e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80052e8:	4620      	mov	r0, r4
 80052ea:	bd70      	pop	{r4, r5, r6, pc}
 80052ec:	2000080c 	.word	0x2000080c

080052f0 <_malloc_r>:
 80052f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052f4:	1ccd      	adds	r5, r1, #3
 80052f6:	f025 0503 	bic.w	r5, r5, #3
 80052fa:	3508      	adds	r5, #8
 80052fc:	2d0c      	cmp	r5, #12
 80052fe:	bf38      	it	cc
 8005300:	250c      	movcc	r5, #12
 8005302:	2d00      	cmp	r5, #0
 8005304:	4607      	mov	r7, r0
 8005306:	db01      	blt.n	800530c <_malloc_r+0x1c>
 8005308:	42a9      	cmp	r1, r5
 800530a:	d905      	bls.n	8005318 <_malloc_r+0x28>
 800530c:	230c      	movs	r3, #12
 800530e:	603b      	str	r3, [r7, #0]
 8005310:	2600      	movs	r6, #0
 8005312:	4630      	mov	r0, r6
 8005314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005318:	4e2e      	ldr	r6, [pc, #184]	; (80053d4 <_malloc_r+0xe4>)
 800531a:	f000 f907 	bl	800552c <__malloc_lock>
 800531e:	6833      	ldr	r3, [r6, #0]
 8005320:	461c      	mov	r4, r3
 8005322:	bb34      	cbnz	r4, 8005372 <_malloc_r+0x82>
 8005324:	4629      	mov	r1, r5
 8005326:	4638      	mov	r0, r7
 8005328:	f7ff ffc2 	bl	80052b0 <sbrk_aligned>
 800532c:	1c43      	adds	r3, r0, #1
 800532e:	4604      	mov	r4, r0
 8005330:	d14d      	bne.n	80053ce <_malloc_r+0xde>
 8005332:	6834      	ldr	r4, [r6, #0]
 8005334:	4626      	mov	r6, r4
 8005336:	2e00      	cmp	r6, #0
 8005338:	d140      	bne.n	80053bc <_malloc_r+0xcc>
 800533a:	6823      	ldr	r3, [r4, #0]
 800533c:	4631      	mov	r1, r6
 800533e:	4638      	mov	r0, r7
 8005340:	eb04 0803 	add.w	r8, r4, r3
 8005344:	f000 f848 	bl	80053d8 <_sbrk_r>
 8005348:	4580      	cmp	r8, r0
 800534a:	d13a      	bne.n	80053c2 <_malloc_r+0xd2>
 800534c:	6821      	ldr	r1, [r4, #0]
 800534e:	3503      	adds	r5, #3
 8005350:	1a6d      	subs	r5, r5, r1
 8005352:	f025 0503 	bic.w	r5, r5, #3
 8005356:	3508      	adds	r5, #8
 8005358:	2d0c      	cmp	r5, #12
 800535a:	bf38      	it	cc
 800535c:	250c      	movcc	r5, #12
 800535e:	4629      	mov	r1, r5
 8005360:	4638      	mov	r0, r7
 8005362:	f7ff ffa5 	bl	80052b0 <sbrk_aligned>
 8005366:	3001      	adds	r0, #1
 8005368:	d02b      	beq.n	80053c2 <_malloc_r+0xd2>
 800536a:	6823      	ldr	r3, [r4, #0]
 800536c:	442b      	add	r3, r5
 800536e:	6023      	str	r3, [r4, #0]
 8005370:	e00e      	b.n	8005390 <_malloc_r+0xa0>
 8005372:	6822      	ldr	r2, [r4, #0]
 8005374:	1b52      	subs	r2, r2, r5
 8005376:	d41e      	bmi.n	80053b6 <_malloc_r+0xc6>
 8005378:	2a0b      	cmp	r2, #11
 800537a:	d916      	bls.n	80053aa <_malloc_r+0xba>
 800537c:	1961      	adds	r1, r4, r5
 800537e:	42a3      	cmp	r3, r4
 8005380:	6025      	str	r5, [r4, #0]
 8005382:	bf18      	it	ne
 8005384:	6059      	strne	r1, [r3, #4]
 8005386:	6863      	ldr	r3, [r4, #4]
 8005388:	bf08      	it	eq
 800538a:	6031      	streq	r1, [r6, #0]
 800538c:	5162      	str	r2, [r4, r5]
 800538e:	604b      	str	r3, [r1, #4]
 8005390:	4638      	mov	r0, r7
 8005392:	f104 060b 	add.w	r6, r4, #11
 8005396:	f000 f8cf 	bl	8005538 <__malloc_unlock>
 800539a:	f026 0607 	bic.w	r6, r6, #7
 800539e:	1d23      	adds	r3, r4, #4
 80053a0:	1af2      	subs	r2, r6, r3
 80053a2:	d0b6      	beq.n	8005312 <_malloc_r+0x22>
 80053a4:	1b9b      	subs	r3, r3, r6
 80053a6:	50a3      	str	r3, [r4, r2]
 80053a8:	e7b3      	b.n	8005312 <_malloc_r+0x22>
 80053aa:	6862      	ldr	r2, [r4, #4]
 80053ac:	42a3      	cmp	r3, r4
 80053ae:	bf0c      	ite	eq
 80053b0:	6032      	streq	r2, [r6, #0]
 80053b2:	605a      	strne	r2, [r3, #4]
 80053b4:	e7ec      	b.n	8005390 <_malloc_r+0xa0>
 80053b6:	4623      	mov	r3, r4
 80053b8:	6864      	ldr	r4, [r4, #4]
 80053ba:	e7b2      	b.n	8005322 <_malloc_r+0x32>
 80053bc:	4634      	mov	r4, r6
 80053be:	6876      	ldr	r6, [r6, #4]
 80053c0:	e7b9      	b.n	8005336 <_malloc_r+0x46>
 80053c2:	230c      	movs	r3, #12
 80053c4:	603b      	str	r3, [r7, #0]
 80053c6:	4638      	mov	r0, r7
 80053c8:	f000 f8b6 	bl	8005538 <__malloc_unlock>
 80053cc:	e7a1      	b.n	8005312 <_malloc_r+0x22>
 80053ce:	6025      	str	r5, [r4, #0]
 80053d0:	e7de      	b.n	8005390 <_malloc_r+0xa0>
 80053d2:	bf00      	nop
 80053d4:	20000808 	.word	0x20000808

080053d8 <_sbrk_r>:
 80053d8:	b538      	push	{r3, r4, r5, lr}
 80053da:	4d06      	ldr	r5, [pc, #24]	; (80053f4 <_sbrk_r+0x1c>)
 80053dc:	2300      	movs	r3, #0
 80053de:	4604      	mov	r4, r0
 80053e0:	4608      	mov	r0, r1
 80053e2:	602b      	str	r3, [r5, #0]
 80053e4:	f7fb fffa 	bl	80013dc <_sbrk>
 80053e8:	1c43      	adds	r3, r0, #1
 80053ea:	d102      	bne.n	80053f2 <_sbrk_r+0x1a>
 80053ec:	682b      	ldr	r3, [r5, #0]
 80053ee:	b103      	cbz	r3, 80053f2 <_sbrk_r+0x1a>
 80053f0:	6023      	str	r3, [r4, #0]
 80053f2:	bd38      	pop	{r3, r4, r5, pc}
 80053f4:	20000810 	.word	0x20000810

080053f8 <__sread>:
 80053f8:	b510      	push	{r4, lr}
 80053fa:	460c      	mov	r4, r1
 80053fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005400:	f000 f8a0 	bl	8005544 <_read_r>
 8005404:	2800      	cmp	r0, #0
 8005406:	bfab      	itete	ge
 8005408:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800540a:	89a3      	ldrhlt	r3, [r4, #12]
 800540c:	181b      	addge	r3, r3, r0
 800540e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005412:	bfac      	ite	ge
 8005414:	6563      	strge	r3, [r4, #84]	; 0x54
 8005416:	81a3      	strhlt	r3, [r4, #12]
 8005418:	bd10      	pop	{r4, pc}

0800541a <__swrite>:
 800541a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800541e:	461f      	mov	r7, r3
 8005420:	898b      	ldrh	r3, [r1, #12]
 8005422:	05db      	lsls	r3, r3, #23
 8005424:	4605      	mov	r5, r0
 8005426:	460c      	mov	r4, r1
 8005428:	4616      	mov	r6, r2
 800542a:	d505      	bpl.n	8005438 <__swrite+0x1e>
 800542c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005430:	2302      	movs	r3, #2
 8005432:	2200      	movs	r2, #0
 8005434:	f000 f868 	bl	8005508 <_lseek_r>
 8005438:	89a3      	ldrh	r3, [r4, #12]
 800543a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800543e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005442:	81a3      	strh	r3, [r4, #12]
 8005444:	4632      	mov	r2, r6
 8005446:	463b      	mov	r3, r7
 8005448:	4628      	mov	r0, r5
 800544a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800544e:	f000 b817 	b.w	8005480 <_write_r>

08005452 <__sseek>:
 8005452:	b510      	push	{r4, lr}
 8005454:	460c      	mov	r4, r1
 8005456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800545a:	f000 f855 	bl	8005508 <_lseek_r>
 800545e:	1c43      	adds	r3, r0, #1
 8005460:	89a3      	ldrh	r3, [r4, #12]
 8005462:	bf15      	itete	ne
 8005464:	6560      	strne	r0, [r4, #84]	; 0x54
 8005466:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800546a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800546e:	81a3      	strheq	r3, [r4, #12]
 8005470:	bf18      	it	ne
 8005472:	81a3      	strhne	r3, [r4, #12]
 8005474:	bd10      	pop	{r4, pc}

08005476 <__sclose>:
 8005476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800547a:	f000 b813 	b.w	80054a4 <_close_r>
	...

08005480 <_write_r>:
 8005480:	b538      	push	{r3, r4, r5, lr}
 8005482:	4d07      	ldr	r5, [pc, #28]	; (80054a0 <_write_r+0x20>)
 8005484:	4604      	mov	r4, r0
 8005486:	4608      	mov	r0, r1
 8005488:	4611      	mov	r1, r2
 800548a:	2200      	movs	r2, #0
 800548c:	602a      	str	r2, [r5, #0]
 800548e:	461a      	mov	r2, r3
 8005490:	f7fb ff54 	bl	800133c <_write>
 8005494:	1c43      	adds	r3, r0, #1
 8005496:	d102      	bne.n	800549e <_write_r+0x1e>
 8005498:	682b      	ldr	r3, [r5, #0]
 800549a:	b103      	cbz	r3, 800549e <_write_r+0x1e>
 800549c:	6023      	str	r3, [r4, #0]
 800549e:	bd38      	pop	{r3, r4, r5, pc}
 80054a0:	20000810 	.word	0x20000810

080054a4 <_close_r>:
 80054a4:	b538      	push	{r3, r4, r5, lr}
 80054a6:	4d06      	ldr	r5, [pc, #24]	; (80054c0 <_close_r+0x1c>)
 80054a8:	2300      	movs	r3, #0
 80054aa:	4604      	mov	r4, r0
 80054ac:	4608      	mov	r0, r1
 80054ae:	602b      	str	r3, [r5, #0]
 80054b0:	f7fb ff60 	bl	8001374 <_close>
 80054b4:	1c43      	adds	r3, r0, #1
 80054b6:	d102      	bne.n	80054be <_close_r+0x1a>
 80054b8:	682b      	ldr	r3, [r5, #0]
 80054ba:	b103      	cbz	r3, 80054be <_close_r+0x1a>
 80054bc:	6023      	str	r3, [r4, #0]
 80054be:	bd38      	pop	{r3, r4, r5, pc}
 80054c0:	20000810 	.word	0x20000810

080054c4 <_fstat_r>:
 80054c4:	b538      	push	{r3, r4, r5, lr}
 80054c6:	4d07      	ldr	r5, [pc, #28]	; (80054e4 <_fstat_r+0x20>)
 80054c8:	2300      	movs	r3, #0
 80054ca:	4604      	mov	r4, r0
 80054cc:	4608      	mov	r0, r1
 80054ce:	4611      	mov	r1, r2
 80054d0:	602b      	str	r3, [r5, #0]
 80054d2:	f7fb ff5b 	bl	800138c <_fstat>
 80054d6:	1c43      	adds	r3, r0, #1
 80054d8:	d102      	bne.n	80054e0 <_fstat_r+0x1c>
 80054da:	682b      	ldr	r3, [r5, #0]
 80054dc:	b103      	cbz	r3, 80054e0 <_fstat_r+0x1c>
 80054de:	6023      	str	r3, [r4, #0]
 80054e0:	bd38      	pop	{r3, r4, r5, pc}
 80054e2:	bf00      	nop
 80054e4:	20000810 	.word	0x20000810

080054e8 <_isatty_r>:
 80054e8:	b538      	push	{r3, r4, r5, lr}
 80054ea:	4d06      	ldr	r5, [pc, #24]	; (8005504 <_isatty_r+0x1c>)
 80054ec:	2300      	movs	r3, #0
 80054ee:	4604      	mov	r4, r0
 80054f0:	4608      	mov	r0, r1
 80054f2:	602b      	str	r3, [r5, #0]
 80054f4:	f7fb ff5a 	bl	80013ac <_isatty>
 80054f8:	1c43      	adds	r3, r0, #1
 80054fa:	d102      	bne.n	8005502 <_isatty_r+0x1a>
 80054fc:	682b      	ldr	r3, [r5, #0]
 80054fe:	b103      	cbz	r3, 8005502 <_isatty_r+0x1a>
 8005500:	6023      	str	r3, [r4, #0]
 8005502:	bd38      	pop	{r3, r4, r5, pc}
 8005504:	20000810 	.word	0x20000810

08005508 <_lseek_r>:
 8005508:	b538      	push	{r3, r4, r5, lr}
 800550a:	4d07      	ldr	r5, [pc, #28]	; (8005528 <_lseek_r+0x20>)
 800550c:	4604      	mov	r4, r0
 800550e:	4608      	mov	r0, r1
 8005510:	4611      	mov	r1, r2
 8005512:	2200      	movs	r2, #0
 8005514:	602a      	str	r2, [r5, #0]
 8005516:	461a      	mov	r2, r3
 8005518:	f7fb ff53 	bl	80013c2 <_lseek>
 800551c:	1c43      	adds	r3, r0, #1
 800551e:	d102      	bne.n	8005526 <_lseek_r+0x1e>
 8005520:	682b      	ldr	r3, [r5, #0]
 8005522:	b103      	cbz	r3, 8005526 <_lseek_r+0x1e>
 8005524:	6023      	str	r3, [r4, #0]
 8005526:	bd38      	pop	{r3, r4, r5, pc}
 8005528:	20000810 	.word	0x20000810

0800552c <__malloc_lock>:
 800552c:	4801      	ldr	r0, [pc, #4]	; (8005534 <__malloc_lock+0x8>)
 800552e:	f7ff be0b 	b.w	8005148 <__retarget_lock_acquire_recursive>
 8005532:	bf00      	nop
 8005534:	20000804 	.word	0x20000804

08005538 <__malloc_unlock>:
 8005538:	4801      	ldr	r0, [pc, #4]	; (8005540 <__malloc_unlock+0x8>)
 800553a:	f7ff be06 	b.w	800514a <__retarget_lock_release_recursive>
 800553e:	bf00      	nop
 8005540:	20000804 	.word	0x20000804

08005544 <_read_r>:
 8005544:	b538      	push	{r3, r4, r5, lr}
 8005546:	4d07      	ldr	r5, [pc, #28]	; (8005564 <_read_r+0x20>)
 8005548:	4604      	mov	r4, r0
 800554a:	4608      	mov	r0, r1
 800554c:	4611      	mov	r1, r2
 800554e:	2200      	movs	r2, #0
 8005550:	602a      	str	r2, [r5, #0]
 8005552:	461a      	mov	r2, r3
 8005554:	f7fb fed5 	bl	8001302 <_read>
 8005558:	1c43      	adds	r3, r0, #1
 800555a:	d102      	bne.n	8005562 <_read_r+0x1e>
 800555c:	682b      	ldr	r3, [r5, #0]
 800555e:	b103      	cbz	r3, 8005562 <_read_r+0x1e>
 8005560:	6023      	str	r3, [r4, #0]
 8005562:	bd38      	pop	{r3, r4, r5, pc}
 8005564:	20000810 	.word	0x20000810

08005568 <_init>:
 8005568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800556a:	bf00      	nop
 800556c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800556e:	bc08      	pop	{r3}
 8005570:	469e      	mov	lr, r3
 8005572:	4770      	bx	lr

08005574 <_fini>:
 8005574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005576:	bf00      	nop
 8005578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800557a:	bc08      	pop	{r3}
 800557c:	469e      	mov	lr, r3
 800557e:	4770      	bx	lr
